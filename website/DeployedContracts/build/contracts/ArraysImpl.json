{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "array",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "element",
          "type": "uint256"
        }
      ],
      "name": "findUpperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "179": "contracts/OpenZepellin/contracts/utils/Arrays.sol",
    "201": "contracts/OpenZepellin/contracts/utils/math/Math.sol",
    "38": "contracts/OpenZepellin/contracts/mocks/ArraysImpl.sol"
  },
  "ast": {
    "absolutePath": "contracts/OpenZepellin/contracts/mocks/ArraysImpl.sol",
    "exportedSymbols": {
      "Arrays": [
        24423
      ],
      "ArraysImpl": [
        6682
      ],
      "Math": [
        26744
      ]
    },
    "id": 6683,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6649,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:38"
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/utils/Arrays.sol",
        "file": "../utils/Arrays.sol",
        "id": 6650,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 6683,
        "sourceUnit": 24424,
        "src": "58:29:38",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 6682,
        "linearizedBaseContracts": [
          6682
        ],
        "name": "ArraysImpl",
        "nameLocation": "98:10:38",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 6654,
            "libraryName": {
              "id": 6651,
              "name": "Arrays",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24423,
              "src": "121:6:38"
            },
            "nodeType": "UsingForDirective",
            "src": "115:27:38",
            "typeName": {
              "baseType": {
                "id": 6652,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "132:7:38",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 6653,
              "nodeType": "ArrayTypeName",
              "src": "132:9:38",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            }
          },
          {
            "constant": false,
            "id": 6657,
            "mutability": "mutable",
            "name": "_array",
            "nameLocation": "166:6:38",
            "nodeType": "VariableDeclaration",
            "scope": 6682,
            "src": "148:24:38",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 6655,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "148:7:38",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 6656,
              "nodeType": "ArrayTypeName",
              "src": "148:9:38",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 6667,
              "nodeType": "Block",
              "src": "215:31:38",
              "statements": [
                {
                  "expression": {
                    "id": 6665,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 6663,
                      "name": "_array",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6657,
                      "src": "225:6:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 6664,
                      "name": "array",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 6660,
                      "src": "234:5:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "225:14:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 6666,
                  "nodeType": "ExpressionStatement",
                  "src": "225:14:38"
                }
              ]
            },
            "id": 6668,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6660,
                  "mutability": "mutable",
                  "name": "array",
                  "nameLocation": "208:5:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 6668,
                  "src": "191:22:38",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 6658,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "191:7:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 6659,
                    "nodeType": "ArrayTypeName",
                    "src": "191:9:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "190:24:38"
            },
            "returnParameters": {
              "id": 6662,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "215:0:38"
            },
            "scope": 6682,
            "src": "179:67:38",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 6680,
              "nodeType": "Block",
              "src": "325:54:38",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 6677,
                        "name": "element",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6670,
                        "src": "364:7:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 6675,
                        "name": "_array",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6657,
                        "src": "342:6:38",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 6676,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "findUpperBound",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24422,
                      "src": "342:21:38",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$_t_uint256_$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                        "typeString": "function (uint256[] storage pointer,uint256) view returns (uint256)"
                      }
                    },
                    "id": 6678,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "342:30:38",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 6674,
                  "id": 6679,
                  "nodeType": "Return",
                  "src": "335:37:38"
                }
              ]
            },
            "functionSelector": "33e3a58a",
            "id": 6681,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "findUpperBound",
            "nameLocation": "261:14:38",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 6671,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6670,
                  "mutability": "mutable",
                  "name": "element",
                  "nameLocation": "284:7:38",
                  "nodeType": "VariableDeclaration",
                  "scope": 6681,
                  "src": "276:15:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6669,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "276:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "275:17:38"
            },
            "returnParameters": {
              "id": 6674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6673,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 6681,
                  "src": "316:7:38",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6672,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "316:7:38",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "315:9:38"
            },
            "scope": 6682,
            "src": "252:127:38",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 6683,
        "src": "89:292:38",
        "usedErrors": []
      }
    ],
    "src": "33:349:38"
  },
  "bytecode": "608060405234801561001057600080fd5b506040516103aa3803806103aa83398101604081905261002f916100a9565b8051610042906000906020840190610049565b5050610183565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b600060208083850312156100bc57600080fd5b82516001600160401b03808211156100d357600080fd5b818501915085601f8301126100e757600080fd5b8151818111156100f9576100f961016d565b8060051b604051601f19603f8301168101818110858211171561011e5761011e61016d565b604052828152858101935084860182860187018a101561013d57600080fd5b600095505b83861015610160578051855260019590950194938601938601610142565b5098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b610218806101926000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004361003e36600461014c565b610055565b60405190815260200160405180910390f35b60006100618183610067565b92915050565b815460009061007857506000610061565b82546000905b808210156100d4576000610092838361012a565b9050848682815481106100a7576100a76101cc565b906000526020600020015411156100c0578091506100ce565b6100cb816001610165565b92505b5061007e565b600082118015610109575083856100ec60018561019f565b815481106100fc576100fc6101cc565b9060005260206000200154145b156101225761011960018361019f565b92505050610061565b509392505050565b6000610139600284841861017d565b61014590848416610165565b9392505050565b60006020828403121561015e57600080fd5b5035919050565b60008219821115610178576101786101b6565b500190565b60008261019a57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156101b1576101b16101b6565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220904c4ef1630ad3e648db48717bef0f4621559d58625f6bbcef66a821fb918aa564736f6c63430008060033",
  "bytecodeSha1": "572c662b7770b53907ffea6e9e17a44544373d53",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.6+commit.11564f7e"
  },
  "contractName": "ArraysImpl",
  "coverageMap": {
    "branches": {
      "179": {
        "Arrays.findUpperBound": {
          "7": [
            1158,
            1178,
            false
          ],
          "8": [
            1402,
            1409,
            false
          ],
          "9": [
            1413,
            1438,
            false
          ]
        }
      },
      "201": {},
      "38": {}
    },
    "statements": {
      "179": {
        "Arrays.findUpperBound": {
          "1": [
            779,
            787
          ],
          "2": [
            1198,
            1208
          ],
          "3": [
            1247,
            1260
          ],
          "4": [
            1454,
            1468
          ],
          "5": [
            1499,
            1509
          ]
        }
      },
      "201": {
        "Math.average": {
          "6": [
            781,
            809
          ]
        }
      },
      "38": {
        "ArraysImpl.findUpperBound": {
          "0": [
            335,
            372
          ]
        }
      }
    }
  },
  "dependencies": [
    "Arrays",
    "Math"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c806333e3a58a14610030575b600080fd5b61004361003e36600461014c565b610055565b60405190815260200160405180910390f35b60006100618183610067565b92915050565b815460009061007857506000610061565b82546000905b808210156100d4576000610092838361012a565b9050848682815481106100a7576100a76101cc565b906000526020600020015411156100c0578091506100ce565b6100cb816001610165565b92505b5061007e565b600082118015610109575083856100ec60018561019f565b815481106100fc576100fc6101cc565b9060005260206000200154145b156101225761011960018361019f565b92505050610061565b509392505050565b6000610139600284841861017d565b61014590848416610165565b9392505050565b60006020828403121561015e57600080fd5b5035919050565b60008219821115610178576101786101b6565b500190565b60008261019a57634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156101b1576101b16101b6565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220904c4ef1630ad3e648db48717bef0f4621559d58625f6bbcef66a821fb918aa564736f6c63430008060033",
  "deployedSourceMap": "89:292:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;252:127;;;;;;:::i;:::-;;:::i;:::-;;;345:25:211;;;333:2;318:18;252:127:38;;;;;;;;316:7;342:30;316:7;364;342:21;:30::i;:::-;335:37;252:127;-1:-1:-1;;252:127:38:o;634:892:179:-;746:12;;723:7;;742:56;;-1:-1:-1;786:1:179;779:8;;742:56;848:12;;808:11;;871:414;884:4;878:3;:10;871:414;;;904:11;918:23;931:3;936:4;918:12;:23::i;:::-;904:37;;1171:7;1158:5;1164:3;1158:10;;;;;;;;:::i;:::-;;;;;;;;;:20;1154:121;;;1205:3;1198:10;;1154:121;;;1253:7;:3;1259:1;1253:7;:::i;:::-;1247:13;;1154:121;890:395;871:414;;;1408:1;1402:3;:7;:36;;;;-1:-1:-1;1431:7:179;1413:5;1419:7;1425:1;1419:3;:7;:::i;:::-;1413:14;;;;;;;;:::i;:::-;;;;;;;;;:25;1402:36;1398:122;;;1461:7;1467:1;1461:3;:7;:::i;:::-;1454:14;;;;;;1398:122;-1:-1:-1;1506:3:179;634:892;-1:-1:-1;;;634:892:179:o;663:153:201:-;725:7;798:11;808:1;799:5;;;798:11;:::i;:::-;788:21;;789:5;;;788:21;:::i;:::-;781:28;663:153;-1:-1:-1;;;663:153:201:o;14:180:211:-;73:6;126:2;114:9;105:7;101:23;97:32;94:2;;;142:1;139;132:12;94:2;-1:-1:-1;165:23:211;;84:110;-1:-1:-1;84:110:211:o;381:128::-;421:3;452:1;448:6;445:1;442:13;439:2;;;458:18;;:::i;:::-;-1:-1:-1;494:9:211;;429:80::o;514:217::-;554:1;580;570:2;;624:10;619:3;615:20;612:1;605:31;659:4;656:1;649:15;687:4;684:1;677:15;570:2;-1:-1:-1;716:9:211;;560:171::o;736:125::-;776:4;804:1;801;798:8;795:2;;;809:18;;:::i;:::-;-1:-1:-1;846:9:211;;785:76::o;866:127::-;927:10;922:3;918:20;915:1;908:31;958:4;955:1;948:15;982:4;979:1;972:15;998:127;1059:10;1054:3;1050:20;1047:1;1040:31;1090:4;1087:1;1080:15;1114:4;1111:1;1104:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    89,
    381
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x33E3A58A EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x43 PUSH2 0x3E CALLDATASIZE PUSH1 0x4 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x55 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x61 DUP2 DUP4 PUSH2 0x67 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x78 JUMPI POP PUSH1 0x0 PUSH2 0x61 JUMP JUMPDEST DUP3 SLOAD PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 PUSH2 0x92 DUP4 DUP4 PUSH2 0x12A JUMP JUMPDEST SWAP1 POP DUP5 DUP7 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xA7 JUMPI PUSH2 0xA7 PUSH2 0x1CC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD GT ISZERO PUSH2 0xC0 JUMPI DUP1 SWAP2 POP PUSH2 0xCE JUMP JUMPDEST PUSH2 0xCB DUP2 PUSH1 0x1 PUSH2 0x165 JUMP JUMPDEST SWAP3 POP JUMPDEST POP PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x109 JUMPI POP DUP4 DUP6 PUSH2 0xEC PUSH1 0x1 DUP6 PUSH2 0x19F JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xFC JUMPI PUSH2 0xFC PUSH2 0x1CC JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD EQ JUMPDEST ISZERO PUSH2 0x122 JUMPI PUSH2 0x119 PUSH1 0x1 DUP4 PUSH2 0x19F JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x61 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x139 PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x17D JUMP JUMPDEST PUSH2 0x145 SWAP1 DUP5 DUP5 AND PUSH2 0x165 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x178 JUMPI PUSH2 0x178 PUSH2 0x1B6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x19A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1B1 JUMPI PUSH2 0x1B1 PUSH2 0x1B6 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP1 0x4C 0x4E CALL PUSH4 0xAD3E648 0xDB 0x48 PUSH18 0x7BEF0F4621559D58625F6BBCEF66A821FB91 DUP11 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "MSTORE",
      "path": "38"
    },
    "5": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "CALLVALUE",
      "path": "38"
    },
    "6": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "38"
    },
    "7": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "ISZERO",
      "path": "38"
    },
    "8": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPI",
      "path": "38"
    },
    "12": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "38"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "REVERT",
      "path": "38"
    },
    "16": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "17": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "POP",
      "path": "38"
    },
    "18": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "CALLDATASIZE",
      "path": "38"
    },
    "21": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "LT",
      "path": "38"
    },
    "22": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x2B"
    },
    "25": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPI",
      "path": "38"
    },
    "26": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "CALLDATALOAD",
      "path": "38"
    },
    "29": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "SHR",
      "path": "38"
    },
    "32": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "38"
    },
    "33": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH4",
      "path": "38",
      "value": "0x33E3A58A"
    },
    "38": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "EQ",
      "path": "38"
    },
    "39": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x30"
    },
    "42": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPI",
      "path": "38"
    },
    "43": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "44": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x0"
    },
    "46": {
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "DUP1",
      "path": "38"
    },
    "47": {
      "first_revert": true,
      "fn": null,
      "offset": [
        89,
        381
      ],
      "op": "REVERT",
      "path": "38"
    },
    "48": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "49": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x43"
    },
    "52": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x3E"
    },
    "55": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "CALLDATASIZE",
      "path": "38"
    },
    "56": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x4"
    },
    "58": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x14C"
    },
    "61": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "i",
      "offset": [
        252,
        379
      ],
      "op": "JUMP",
      "path": "38"
    },
    "62": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "63": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x55"
    },
    "66": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "i",
      "offset": [
        252,
        379
      ],
      "op": "JUMP",
      "path": "38"
    },
    "67": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "68": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x40"
    },
    "70": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "MLOAD",
      "path": "38"
    },
    "71": {
      "op": "SWAP1"
    },
    "72": {
      "op": "DUP2"
    },
    "73": {
      "op": "MSTORE"
    },
    "74": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "76": {
      "op": "ADD"
    },
    "77": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x40"
    },
    "79": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "MLOAD",
      "path": "38"
    },
    "80": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "DUP1",
      "path": "38"
    },
    "81": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SWAP2",
      "path": "38"
    },
    "82": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SUB",
      "path": "38"
    },
    "83": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SWAP1",
      "path": "38"
    },
    "84": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "RETURN",
      "path": "38"
    },
    "85": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "86": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        316,
        323
      ],
      "op": "PUSH1",
      "path": "38",
      "value": "0x0"
    },
    "88": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        342,
        372
      ],
      "op": "PUSH2",
      "path": "38",
      "statement": 0,
      "value": "0x61"
    },
    "91": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        316,
        323
      ],
      "op": "DUP2",
      "path": "38"
    },
    "92": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        364,
        371
      ],
      "op": "DUP4",
      "path": "38"
    },
    "93": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        342,
        363
      ],
      "op": "PUSH2",
      "path": "38",
      "value": "0x67"
    },
    "96": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "i",
      "offset": [
        342,
        372
      ],
      "op": "JUMP",
      "path": "38"
    },
    "97": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        342,
        372
      ],
      "op": "JUMPDEST",
      "path": "38"
    },
    "98": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        335,
        372
      ],
      "op": "SWAP3",
      "path": "38"
    },
    "99": {
      "fn": "ArraysImpl.findUpperBound",
      "offset": [
        252,
        379
      ],
      "op": "SWAP2",
      "path": "38"
    },
    "100": {
      "op": "POP"
    },
    "101": {
      "op": "POP"
    },
    "102": {
      "fn": "ArraysImpl.findUpperBound",
      "jump": "o",
      "offset": [
        252,
        379
      ],
      "op": "JUMP",
      "path": "38"
    },
    "103": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        634,
        1526
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "104": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        746,
        758
      ],
      "op": "DUP2",
      "path": "179"
    },
    "105": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        746,
        758
      ],
      "op": "SLOAD",
      "path": "179"
    },
    "106": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        723,
        730
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "108": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        723,
        730
      ],
      "op": "SWAP1",
      "path": "179"
    },
    "109": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        742,
        798
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x78"
    },
    "112": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        742,
        798
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "113": {
      "op": "POP"
    },
    "114": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        786,
        787
      ],
      "op": "PUSH1",
      "path": "179",
      "statement": 1,
      "value": "0x0"
    },
    "116": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        779,
        787
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x61"
    },
    "119": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        779,
        787
      ],
      "op": "JUMP",
      "path": "179"
    },
    "120": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        742,
        798
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "121": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        848,
        860
      ],
      "op": "DUP3",
      "path": "179"
    },
    "122": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        848,
        860
      ],
      "op": "SLOAD",
      "path": "179"
    },
    "123": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        808,
        819
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "125": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        808,
        819
      ],
      "op": "SWAP1",
      "path": "179"
    },
    "126": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "127": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        884,
        888
      ],
      "op": "DUP1",
      "path": "179"
    },
    "128": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        878,
        881
      ],
      "op": "DUP3",
      "path": "179"
    },
    "129": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        878,
        888
      ],
      "op": "LT",
      "path": "179"
    },
    "130": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "ISZERO",
      "path": "179"
    },
    "131": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xD4"
    },
    "134": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "135": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        904,
        915
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "137": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        918,
        941
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x92"
    },
    "140": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        931,
        934
      ],
      "op": "DUP4",
      "path": "179"
    },
    "141": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        936,
        940
      ],
      "op": "DUP4",
      "path": "179"
    },
    "142": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        918,
        930
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x12A"
    },
    "145": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        918,
        941
      ],
      "op": "JUMP",
      "path": "179"
    },
    "146": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        918,
        941
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "147": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        904,
        941
      ],
      "op": "SWAP1",
      "path": "179"
    },
    "148": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        904,
        941
      ],
      "op": "POP",
      "path": "179"
    },
    "149": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1171,
        1178
      ],
      "op": "DUP5",
      "path": "179"
    },
    "150": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1163
      ],
      "op": "DUP7",
      "path": "179"
    },
    "151": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1164,
        1167
      ],
      "op": "DUP3",
      "path": "179"
    },
    "152": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "DUP2",
      "path": "179"
    },
    "153": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "SLOAD",
      "path": "179"
    },
    "154": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "DUP2",
      "path": "179"
    },
    "155": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "LT",
      "path": "179"
    },
    "156": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xA7"
    },
    "159": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "160": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xA7"
    },
    "163": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x1CC"
    },
    "166": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1158,
        1168
      ],
      "op": "JUMP",
      "path": "179"
    },
    "167": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "168": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "SWAP1",
      "path": "179"
    },
    "169": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "171": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "MSTORE",
      "path": "179"
    },
    "172": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x20"
    },
    "174": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "176": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "KECCAK256",
      "path": "179"
    },
    "177": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "ADD",
      "path": "179"
    },
    "178": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1168
      ],
      "op": "SLOAD",
      "path": "179"
    },
    "179": {
      "branch": 7,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1158,
        1178
      ],
      "op": "GT",
      "path": "179"
    },
    "180": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "ISZERO",
      "path": "179"
    },
    "181": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xC0"
    },
    "184": {
      "branch": 7,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "185": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1205,
        1208
      ],
      "op": "DUP1",
      "path": "179",
      "statement": 2
    },
    "186": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1198,
        1208
      ],
      "op": "SWAP2",
      "path": "179"
    },
    "187": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1198,
        1208
      ],
      "op": "POP",
      "path": "179"
    },
    "188": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xCE"
    },
    "191": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMP",
      "path": "179"
    },
    "192": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "193": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1260
      ],
      "op": "PUSH2",
      "path": "179",
      "statement": 3,
      "value": "0xCB"
    },
    "196": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1256
      ],
      "op": "DUP2",
      "path": "179"
    },
    "197": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1259,
        1260
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x1"
    },
    "199": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1260
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x165"
    },
    "202": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1253,
        1260
      ],
      "op": "JUMP",
      "path": "179"
    },
    "203": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1253,
        1260
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "204": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1247,
        1260
      ],
      "op": "SWAP3",
      "path": "179"
    },
    "205": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1247,
        1260
      ],
      "op": "POP",
      "path": "179"
    },
    "206": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1154,
        1275
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "207": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        890,
        1285
      ],
      "op": "POP",
      "path": "179"
    },
    "208": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x7E"
    },
    "211": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMP",
      "path": "179"
    },
    "212": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        871,
        1285
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "213": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1408,
        1409
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "215": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1405
      ],
      "op": "DUP3",
      "path": "179"
    },
    "216": {
      "branch": 8,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1409
      ],
      "op": "GT",
      "path": "179"
    },
    "217": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "DUP1",
      "path": "179"
    },
    "218": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "ISZERO",
      "path": "179"
    },
    "219": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x109"
    },
    "222": {
      "branch": 8,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "223": {
      "op": "POP"
    },
    "224": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1431,
        1438
      ],
      "op": "DUP4",
      "path": "179"
    },
    "225": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1418
      ],
      "op": "DUP6",
      "path": "179"
    },
    "226": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1426
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xEC"
    },
    "229": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1425,
        1426
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x1"
    },
    "231": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1422
      ],
      "op": "DUP6",
      "path": "179"
    },
    "232": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1426
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x19F"
    },
    "235": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1419,
        1426
      ],
      "op": "JUMP",
      "path": "179"
    },
    "236": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1419,
        1426
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "237": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "DUP2",
      "path": "179"
    },
    "238": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "SLOAD",
      "path": "179"
    },
    "239": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "DUP2",
      "path": "179"
    },
    "240": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "LT",
      "path": "179"
    },
    "241": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xFC"
    },
    "244": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "245": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0xFC"
    },
    "248": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x1CC"
    },
    "251": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1413,
        1427
      ],
      "op": "JUMP",
      "path": "179"
    },
    "252": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "253": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "SWAP1",
      "path": "179"
    },
    "254": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "256": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "MSTORE",
      "path": "179"
    },
    "257": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x20"
    },
    "259": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x0"
    },
    "261": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "KECCAK256",
      "path": "179"
    },
    "262": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "ADD",
      "path": "179"
    },
    "263": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1427
      ],
      "op": "SLOAD",
      "path": "179"
    },
    "264": {
      "branch": 9,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1413,
        1438
      ],
      "op": "EQ",
      "path": "179"
    },
    "265": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1402,
        1438
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "266": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "ISZERO",
      "path": "179"
    },
    "267": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x122"
    },
    "270": {
      "branch": 9,
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "JUMPI",
      "path": "179"
    },
    "271": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1468
      ],
      "op": "PUSH2",
      "path": "179",
      "statement": 4,
      "value": "0x119"
    },
    "274": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1467,
        1468
      ],
      "op": "PUSH1",
      "path": "179",
      "value": "0x1"
    },
    "276": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1464
      ],
      "op": "DUP4",
      "path": "179"
    },
    "277": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1468
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x19F"
    },
    "280": {
      "fn": "Arrays.findUpperBound",
      "jump": "i",
      "offset": [
        1461,
        1468
      ],
      "op": "JUMP",
      "path": "179"
    },
    "281": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1461,
        1468
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "282": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "SWAP3",
      "path": "179"
    },
    "283": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "POP",
      "path": "179"
    },
    "284": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "POP",
      "path": "179"
    },
    "285": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "POP",
      "path": "179"
    },
    "286": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "PUSH2",
      "path": "179",
      "value": "0x61"
    },
    "289": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1454,
        1468
      ],
      "op": "JUMP",
      "path": "179"
    },
    "290": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1398,
        1520
      ],
      "op": "JUMPDEST",
      "path": "179"
    },
    "291": {
      "op": "POP"
    },
    "292": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        1506,
        1509
      ],
      "op": "SWAP4",
      "path": "179",
      "statement": 5
    },
    "293": {
      "fn": "Arrays.findUpperBound",
      "offset": [
        634,
        1526
      ],
      "op": "SWAP3",
      "path": "179"
    },
    "294": {
      "op": "POP"
    },
    "295": {
      "op": "POP"
    },
    "296": {
      "op": "POP"
    },
    "297": {
      "fn": "Arrays.findUpperBound",
      "jump": "o",
      "offset": [
        634,
        1526
      ],
      "op": "JUMP",
      "path": "179"
    },
    "298": {
      "fn": "Math.average",
      "offset": [
        663,
        816
      ],
      "op": "JUMPDEST",
      "path": "201"
    },
    "299": {
      "fn": "Math.average",
      "offset": [
        725,
        732
      ],
      "op": "PUSH1",
      "path": "201",
      "value": "0x0"
    },
    "301": {
      "fn": "Math.average",
      "offset": [
        798,
        809
      ],
      "op": "PUSH2",
      "path": "201",
      "statement": 6,
      "value": "0x139"
    },
    "304": {
      "fn": "Math.average",
      "offset": [
        808,
        809
      ],
      "op": "PUSH1",
      "path": "201",
      "value": "0x2"
    },
    "306": {
      "fn": "Math.average",
      "offset": [
        799,
        804
      ],
      "op": "DUP5",
      "path": "201"
    },
    "307": {
      "fn": "Math.average",
      "offset": [
        799,
        804
      ],
      "op": "DUP5",
      "path": "201"
    },
    "308": {
      "fn": "Math.average",
      "offset": [
        799,
        804
      ],
      "op": "XOR",
      "path": "201"
    },
    "309": {
      "fn": "Math.average",
      "offset": [
        798,
        809
      ],
      "op": "PUSH2",
      "path": "201",
      "value": "0x17D"
    },
    "312": {
      "fn": "Math.average",
      "jump": "i",
      "offset": [
        798,
        809
      ],
      "op": "JUMP",
      "path": "201"
    },
    "313": {
      "fn": "Math.average",
      "offset": [
        798,
        809
      ],
      "op": "JUMPDEST",
      "path": "201"
    },
    "314": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "PUSH2",
      "path": "201",
      "value": "0x145"
    },
    "317": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "SWAP1",
      "path": "201"
    },
    "318": {
      "fn": "Math.average",
      "offset": [
        789,
        794
      ],
      "op": "DUP5",
      "path": "201"
    },
    "319": {
      "fn": "Math.average",
      "offset": [
        789,
        794
      ],
      "op": "DUP5",
      "path": "201"
    },
    "320": {
      "fn": "Math.average",
      "offset": [
        789,
        794
      ],
      "op": "AND",
      "path": "201"
    },
    "321": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "PUSH2",
      "path": "201",
      "value": "0x165"
    },
    "324": {
      "fn": "Math.average",
      "jump": "i",
      "offset": [
        788,
        809
      ],
      "op": "JUMP",
      "path": "201"
    },
    "325": {
      "fn": "Math.average",
      "offset": [
        788,
        809
      ],
      "op": "JUMPDEST",
      "path": "201"
    },
    "326": {
      "fn": "Math.average",
      "offset": [
        781,
        809
      ],
      "op": "SWAP4",
      "path": "201"
    },
    "327": {
      "fn": "Math.average",
      "offset": [
        663,
        816
      ],
      "op": "SWAP3",
      "path": "201"
    },
    "328": {
      "op": "POP"
    },
    "329": {
      "op": "POP"
    },
    "330": {
      "op": "POP"
    },
    "331": {
      "fn": "Math.average",
      "jump": "o",
      "offset": [
        663,
        816
      ],
      "op": "JUMP",
      "path": "201"
    },
    "332": {
      "op": "JUMPDEST"
    },
    "333": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "335": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "337": {
      "op": "DUP3"
    },
    "338": {
      "op": "DUP5"
    },
    "339": {
      "op": "SUB"
    },
    "340": {
      "op": "SLT"
    },
    "341": {
      "op": "ISZERO"
    },
    "342": {
      "op": "PUSH2",
      "value": "0x15E"
    },
    "345": {
      "op": "JUMPI"
    },
    "346": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "348": {
      "op": "DUP1"
    },
    "349": {
      "op": "REVERT"
    },
    "350": {
      "op": "JUMPDEST"
    },
    "351": {
      "op": "POP"
    },
    "352": {
      "op": "CALLDATALOAD"
    },
    "353": {
      "op": "SWAP2"
    },
    "354": {
      "op": "SWAP1"
    },
    "355": {
      "op": "POP"
    },
    "356": {
      "jump": "o",
      "op": "JUMP"
    },
    "357": {
      "op": "JUMPDEST"
    },
    "358": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "360": {
      "op": "DUP3"
    },
    "361": {
      "op": "NOT"
    },
    "362": {
      "op": "DUP3"
    },
    "363": {
      "op": "GT"
    },
    "364": {
      "op": "ISZERO"
    },
    "365": {
      "op": "PUSH2",
      "value": "0x178"
    },
    "368": {
      "op": "JUMPI"
    },
    "369": {
      "op": "PUSH2",
      "value": "0x178"
    },
    "372": {
      "op": "PUSH2",
      "value": "0x1B6"
    },
    "375": {
      "jump": "i",
      "op": "JUMP"
    },
    "376": {
      "op": "JUMPDEST"
    },
    "377": {
      "op": "POP"
    },
    "378": {
      "op": "ADD"
    },
    "379": {
      "op": "SWAP1"
    },
    "380": {
      "jump": "o",
      "op": "JUMP"
    },
    "381": {
      "op": "JUMPDEST"
    },
    "382": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "384": {
      "op": "DUP3"
    },
    "385": {
      "op": "PUSH2",
      "value": "0x19A"
    },
    "388": {
      "op": "JUMPI"
    },
    "389": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "394": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "396": {
      "op": "SHL"
    },
    "397": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "399": {
      "op": "MSTORE"
    },
    "400": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "404": {
      "op": "MSTORE"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "407": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "409": {
      "op": "REVERT"
    },
    "410": {
      "op": "JUMPDEST"
    },
    "411": {
      "op": "POP"
    },
    "412": {
      "op": "DIV"
    },
    "413": {
      "op": "SWAP1"
    },
    "414": {
      "jump": "o",
      "op": "JUMP"
    },
    "415": {
      "op": "JUMPDEST"
    },
    "416": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "418": {
      "op": "DUP3"
    },
    "419": {
      "op": "DUP3"
    },
    "420": {
      "op": "LT"
    },
    "421": {
      "op": "ISZERO"
    },
    "422": {
      "op": "PUSH2",
      "value": "0x1B1"
    },
    "425": {
      "op": "JUMPI"
    },
    "426": {
      "op": "PUSH2",
      "value": "0x1B1"
    },
    "429": {
      "op": "PUSH2",
      "value": "0x1B6"
    },
    "432": {
      "jump": "i",
      "op": "JUMP"
    },
    "433": {
      "op": "JUMPDEST"
    },
    "434": {
      "op": "POP"
    },
    "435": {
      "op": "SUB"
    },
    "436": {
      "op": "SWAP1"
    },
    "437": {
      "jump": "o",
      "op": "JUMP"
    },
    "438": {
      "op": "JUMPDEST"
    },
    "439": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "444": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "446": {
      "op": "SHL"
    },
    "447": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "449": {
      "op": "MSTORE"
    },
    "450": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "452": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "454": {
      "op": "MSTORE"
    },
    "455": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "457": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "459": {
      "op": "REVERT"
    },
    "460": {
      "op": "JUMPDEST"
    },
    "461": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "466": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "468": {
      "op": "SHL"
    },
    "469": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "471": {
      "op": "MSTORE"
    },
    "472": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "474": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "476": {
      "op": "MSTORE"
    },
    "477": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "481": {
      "op": "REVERT"
    }
  },
  "sha1": "ef1acbc3e33350c426845f9e7da242d767c4242b",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Arrays.sol\";\n\ncontract ArraysImpl {\n    using Arrays for uint256[];\n\n    uint256[] private _array;\n\n    constructor(uint256[] memory array) {\n        _array = array;\n    }\n\n    function findUpperBound(uint256 element) external view returns (uint256) {\n        return _array.findUpperBound(element);\n    }\n}\n",
  "sourceMap": "89:292:38:-:0;;;179:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;225:14;;;;:6;;:14;;;;;:::i;:::-;;179:67;89:292;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;89:292:38;;;-1:-1:-1;89:292:38;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:1116:211;109:6;140:2;183;171:9;162:7;158:23;154:32;151:2;;;199:1;196;189:12;151:2;226:16;;-1:-1:-1;;;;;291:14:211;;;288:2;;;318:1;315;308:12;288:2;356:6;345:9;341:22;331:32;;401:7;394:4;390:2;386:13;382:27;372:2;;423:1;420;413:12;372:2;452;446:9;474:2;470;467:10;464:2;;;480:18;;:::i;:::-;526:2;523:1;519:10;558:2;552:9;621:2;617:7;612:2;608;604:11;600:25;592:6;588:38;676:6;664:10;661:22;656:2;644:10;641:18;638:46;635:2;;;687:18;;:::i;:::-;723:2;716:22;773:18;;;807:15;;;;-1:-1:-1;842:11:211;;;872;;;868:20;;865:33;-1:-1:-1;862:2:211;;;911:1;908;901:12;862:2;933:1;924:10;;943:156;957:2;954:1;951:9;943:156;;;1014:10;;1002:23;;975:1;968:9;;;;;1045:12;;;;1077;;943:156;;;-1:-1:-1;1118:6:211;120:1010;-1:-1:-1;;;;;;;;120:1010:211:o;1135:127::-;1196:10;1191:3;1187:20;1184:1;1177:31;1227:4;1224:1;1217:15;1251:4;1248:1;1241:15;1167:95;89:292:38;;;;;;",
  "sourcePath": "contracts/OpenZepellin/contracts/mocks/ArraysImpl.sol",
  "type": "contract"
}