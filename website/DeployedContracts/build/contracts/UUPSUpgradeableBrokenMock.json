{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "current",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "116": "contracts/OpenZepellin/contracts/mocks/UUPS/TestInProd.sol",
    "123": "contracts/OpenZepellin/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "131": "contracts/OpenZepellin/contracts/proxy/utils/UUPSUpgradeable.sol",
    "46": "contracts/OpenZepellin/contracts/mocks/CountersImpl.sol"
  },
  "ast": {
    "absolutePath": "contracts/OpenZepellin/contracts/mocks/UUPS/TestInProd.sol",
    "exportedSymbols": {
      "Address": [
        24338
      ],
      "Counters": [
        24519
      ],
      "CountersImpl": [
        7121
      ],
      "ERC1967Upgrade": [
        15419
      ],
      "IBeacon": [
        15563
      ],
      "StorageSlot": [
        24745
      ],
      "UUPSUpgradeable": [
        16070
      ],
      "UUPSUpgradeableBrokenMock": [
        13784
      ],
      "UUPSUpgradeableMock": [
        13727
      ],
      "UUPSUpgradeableUnsafeMock": [
        13765
      ]
    },
    "id": 13785,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 13713,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:116"
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/mocks/CountersImpl.sol",
        "file": "../CountersImpl.sol",
        "id": 13714,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 13785,
        "sourceUnit": 7122,
        "src": "58:29:116",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/proxy/utils/UUPSUpgradeable.sol",
        "file": "../../proxy/utils/UUPSUpgradeable.sol",
        "id": 13715,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 13785,
        "sourceUnit": 16071,
        "src": "88:47:116",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 13716,
              "name": "CountersImpl",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 7121,
              "src": "169:12:116"
            },
            "id": 13717,
            "nodeType": "InheritanceSpecifier",
            "src": "169:12:116"
          },
          {
            "baseName": {
              "id": 13718,
              "name": "UUPSUpgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 16070,
              "src": "183:15:116"
            },
            "id": 13719,
            "nodeType": "InheritanceSpecifier",
            "src": "183:15:116"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 13727,
        "linearizedBaseContracts": [
          13727,
          16070,
          15419,
          7121
        ],
        "name": "UUPSUpgradeableMock",
        "nameLocation": "146:19:116",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              16069
            ],
            "body": {
              "id": 13725,
              "nodeType": "Block",
              "src": "357:2:116",
              "statements": []
            },
            "id": 13726,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_authorizeUpgrade",
            "nameLocation": "304:17:116",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 13723,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "348:8:116"
            },
            "parameters": {
              "id": 13722,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13721,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13726,
                  "src": "322:7:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13720,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "322:7:116",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "321:9:116"
            },
            "returnParameters": {
              "id": 13724,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "357:0:116"
            },
            "scope": 13727,
            "src": "295:64:116",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 13785,
        "src": "137:224:116",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 13728,
              "name": "UUPSUpgradeableMock",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 13727,
              "src": "401:19:116"
            },
            "id": 13729,
            "nodeType": "InheritanceSpecifier",
            "src": "401:19:116"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 13765,
        "linearizedBaseContracts": [
          13765,
          13727,
          16070,
          15419,
          7121
        ],
        "name": "UUPSUpgradeableUnsafeMock",
        "nameLocation": "372:25:116",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              16042
            ],
            "body": {
              "id": 13746,
              "nodeType": "Block",
              "src": "499:86:116",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 13738,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13731,
                        "src": "542:17:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "hexValue": "",
                            "id": 13741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "567:2:116",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            },
                            "value": ""
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "typeString": "literal_string \"\""
                            }
                          ],
                          "id": 13740,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "561:5:116",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 13739,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "561:5:116",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 13742,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "561:9:116",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 13743,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "572:5:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 13735,
                        "name": "ERC1967Upgrade",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15419,
                        "src": "509:14:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC1967Upgrade_$15419_$",
                          "typeString": "type(contract ERC1967Upgrade)"
                        }
                      },
                      "id": 13737,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_upgradeToAndCall",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15170,
                      "src": "509:32:116",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 13744,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "509:69:116",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13745,
                  "nodeType": "ExpressionStatement",
                  "src": "509:69:116"
                }
              ]
            },
            "functionSelector": "3659cfe6",
            "id": 13747,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nameLocation": "436:9:116",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 13733,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "490:8:116"
            },
            "parameters": {
              "id": 13732,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13731,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "454:17:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 13747,
                  "src": "446:25:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13730,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "446:7:116",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "445:27:116"
            },
            "returnParameters": {
              "id": 13734,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "499:0:116"
            },
            "scope": 13765,
            "src": "427:158:116",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              16063
            ],
            "body": {
              "id": 13763,
              "nodeType": "Block",
              "src": "697:81:116",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 13758,
                        "name": "newImplementation",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13749,
                        "src": "740:17:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 13759,
                        "name": "data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13751,
                        "src": "759:4:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "hexValue": "66616c7365",
                        "id": 13760,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "765:5:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "expression": {
                        "id": 13755,
                        "name": "ERC1967Upgrade",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15419,
                        "src": "707:14:116",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ERC1967Upgrade_$15419_$",
                          "typeString": "type(contract ERC1967Upgrade)"
                        }
                      },
                      "id": 13757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_upgradeToAndCall",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 15170,
                      "src": "707:32:116",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$",
                        "typeString": "function (address,bytes memory,bool)"
                      }
                    },
                    "id": 13761,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "707:64:116",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13762,
                  "nodeType": "ExpressionStatement",
                  "src": "707:64:116"
                }
              ]
            },
            "functionSelector": "4f1ef286",
            "id": 13764,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeToAndCall",
            "nameLocation": "600:16:116",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 13753,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "688:8:116"
            },
            "parameters": {
              "id": 13752,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13749,
                  "mutability": "mutable",
                  "name": "newImplementation",
                  "nameLocation": "625:17:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 13764,
                  "src": "617:25:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13748,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "617:7:116",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13751,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "657:4:116",
                  "nodeType": "VariableDeclaration",
                  "scope": 13764,
                  "src": "644:17:116",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 13750,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "644:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "616:46:116"
            },
            "returnParameters": {
              "id": 13754,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "697:0:116"
            },
            "scope": 13765,
            "src": "591:187:116",
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 13785,
        "src": "363:417:116",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 13766,
              "name": "UUPSUpgradeableMock",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 13727,
              "src": "820:19:116"
            },
            "id": 13767,
            "nodeType": "InheritanceSpecifier",
            "src": "820:19:116"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 13784,
        "linearizedBaseContracts": [
          13784,
          13727,
          16070,
          15419,
          7121
        ],
        "name": "UUPSUpgradeableBrokenMock",
        "nameLocation": "791:25:116",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              16042
            ],
            "body": {
              "id": 13773,
              "nodeType": "Block",
              "src": "900:23:116",
              "statements": []
            },
            "functionSelector": "3659cfe6",
            "id": 13774,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeTo",
            "nameLocation": "855:9:116",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 13771,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "891:8:116"
            },
            "parameters": {
              "id": 13770,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13769,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13774,
                  "src": "865:7:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13768,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "865:7:116",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "864:9:116"
            },
            "returnParameters": {
              "id": 13772,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "900:0:116"
            },
            "scope": 13784,
            "src": "846:77:116",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              16063
            ],
            "body": {
              "id": 13782,
              "nodeType": "Block",
              "src": "1012:23:116",
              "statements": []
            },
            "functionSelector": "4f1ef286",
            "id": 13783,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "upgradeToAndCall",
            "nameLocation": "938:16:116",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 13780,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1003:8:116"
            },
            "parameters": {
              "id": 13779,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13776,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13783,
                  "src": "955:7:116",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13775,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "955:7:116",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13778,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13783,
                  "src": "964:12:116",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 13777,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "964:5:116",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "954:23:116"
            },
            "returnParameters": {
              "id": 13781,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1012:0:116"
            },
            "scope": 13784,
            "src": "929:106:116",
            "stateMutability": "payable",
            "virtual": true,
            "visibility": "external"
          }
        ],
        "scope": 13785,
        "src": "782:255:116",
        "usedErrors": []
      }
    ],
    "src": "33:1005:116"
  },
  "bytecode": "60a06040523060601b60805234801561001757600080fd5b5060805160601c6102b7610033600039600050506102b76000f3fe6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef2861461008f5780639fa6a6e3146100a1578063d09de08a146100c3578063d826f88f146100d8575b600080fd5b34801561006657600080fd5b5061006f6100ed565b005b34801561007d57600080fd5b5061006f61008c366004610187565b50565b61006f61009d3660046101a9565b5050565b3480156100ad57600080fd5b5060005460405190815260200160405180910390f35b3480156100cf57600080fd5b5061006f6100f9565b3480156100e457600080fd5b5061006f610107565b6100f76000610110565b565b6100f7600080546001019055565b6100f760008055565b8054806101635760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b600019019055565b80356001600160a01b038116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261016b565b9392505050565b600080604083850312156101bc57600080fd5b6101c58361016b565b9150602083013567ffffffffffffffff808211156101e257600080fd5b818501915085601f8301126101f657600080fd5b8135818111156102085761020861026b565b604051601f8201601f19908116603f011681019083821181831017156102305761023061026b565b8160405282815288602084870101111561024957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122059ae58b09a2a85b45e973b4272f731827374e0e4177b6de26285671931786b3564736f6c63430008060033",
  "bytecodeSha1": "5f9193b0d14893e710829bcbb81db1af363948e5",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.6+commit.11564f7e"
  },
  "contractName": "UUPSUpgradeableBrokenMock",
  "coverageMap": {
    "branches": {
      "116": {},
      "123": {},
      "131": {},
      "46": {}
    },
    "statements": {
      "116": {},
      "123": {},
      "131": {},
      "46": {
        "CountersImpl.decrement": {
          "0": [
            407,
            427
          ]
        },
        "CountersImpl.increment": {
          "1": [
            336,
            356
          ]
        },
        "CountersImpl.reset": {
          "2": [
            474,
            490
          ]
        }
      }
    }
  },
  "dependencies": [
    "CountersImpl",
    "ERC1967Upgrade",
    "UUPSUpgradeable",
    "UUPSUpgradeableMock"
  ],
  "deployedBytecode": "6080604052600436106100555760003560e01c80632baeceb71461005a5780633659cfe6146100715780634f1ef2861461008f5780639fa6a6e3146100a1578063d09de08a146100c3578063d826f88f146100d8575b600080fd5b34801561006657600080fd5b5061006f6100ed565b005b34801561007d57600080fd5b5061006f61008c366004610187565b50565b61006f61009d3660046101a9565b5050565b3480156100ad57600080fd5b5060005460405190815260200160405180910390f35b3480156100cf57600080fd5b5061006f6100f9565b3480156100e457600080fd5b5061006f610107565b6100f76000610110565b565b6100f7600080546001019055565b6100f760008055565b8054806101635760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000604482015260640160405180910390fd5b600019019055565b80356001600160a01b038116811461018257600080fd5b919050565b60006020828403121561019957600080fd5b6101a28261016b565b9392505050565b600080604083850312156101bc57600080fd5b6101c58361016b565b9150602083013567ffffffffffffffff808211156101e257600080fd5b818501915085601f8301126101f657600080fd5b8135818111156102085761020861026b565b604051601f8201601f19908116603f011681019083821181831017156102305761023061026b565b8160405282815288602084870101111561024957600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122059ae58b09a2a85b45e973b4272f731827374e0e4177b6de26285671931786b3564736f6c63430008060033",
  "deployedSourceMap": "782:255:116:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;369:65:46;;;;;;;;;;;;;:::i;:::-;;846:77:116;;;;;;;;;;-1:-1:-1;846:77:116;;;;;:::i;:::-;;;929:106;;;;;;:::i;:::-;;;;201:91:46;;;;;;;;;;-1:-1:-1;241:7:46;918:14:181;201:91:46;;1885:25:211;;;1873:2;1858:18;201:91:46;;;;;;;298:65;;;;;;;;;;;;;:::i;440:57::-;;;;;;;;;;;;;:::i;369:65::-;407:20;:8;:18;:20::i;:::-;369:65::o;298:::-;336:20;:8;1032:19:181;;1050:1;1032:19;;;945:123;440:57:46;474:16;:8;1385:1:181;1368:18;1309:84;1074:229;1153:14;;1185:9;1177:49;;;;-1:-1:-1;;;1177:49:181;;1585:2:211;1177:49:181;;;1567:21:211;1624:2;1604:18;;;1597:30;1663:29;1643:18;;;1636:57;1710:18;;1177:49:181;;;;;;;;-1:-1:-1;;1277:9:181;1260:26;;1074:229::o;14:173:211:-;82:20;;-1:-1:-1;;;;;131:31:211;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;320:1;317;310:12;272:2;343:29;362:9;343:29;:::i;:::-;333:39;262:116;-1:-1:-1;;;262:116:211:o;383:995::-;460:6;468;521:2;509:9;500:7;496:23;492:32;489:2;;;537:1;534;527:12;489:2;560:29;579:9;560:29;:::i;:::-;550:39;;640:2;629:9;625:18;612:32;663:18;704:2;696:6;693:14;690:2;;;720:1;717;710:12;690:2;758:6;747:9;743:22;733:32;;803:7;796:4;792:2;788:13;784:27;774:2;;825:1;822;815:12;774:2;861;848:16;883:2;879;876:10;873:2;;;889:18;;:::i;:::-;964:2;958:9;932:2;1018:13;;-1:-1:-1;;1014:22:211;;;1038:2;1010:31;1006:40;994:53;;;1062:18;;;1082:22;;;1059:46;1056:2;;;1108:18;;:::i;:::-;1148:10;1144:2;1137:22;1183:2;1175:6;1168:18;1223:7;1218:2;1213;1209;1205:11;1201:20;1198:33;1195:2;;;1244:1;1241;1234:12;1195:2;1300;1295;1291;1287:11;1282:2;1274:6;1270:15;1257:46;1345:1;1340:2;1335;1327:6;1323:15;1319:24;1312:35;1366:6;1356:16;;;;;;;479:899;;;;;:::o;1921:127::-;1982:10;1977:3;1973:20;1970:1;1963:31;2013:4;2010:1;2003:15;2037:4;2034:1;2027:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    782,
    1037
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2BAECEB7 EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x9FA6A6E3 EQ PUSH2 0xA1 JUMPI DUP1 PUSH4 0xD09DE08A EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0xD8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0xED JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x8C CALLDATASIZE PUSH1 0x4 PUSH2 0x187 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x6F PUSH2 0x9D CALLDATASIZE PUSH1 0x4 PUSH2 0x1A9 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0xF9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x107 JUMP JUMPDEST PUSH2 0xF7 PUSH1 0x0 PUSH2 0x110 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF7 PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF7 PUSH1 0x0 DUP1 SSTORE JUMP JUMPDEST DUP1 SLOAD DUP1 PUSH2 0x163 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A2 DUP3 PUSH2 0x16B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C5 DUP4 PUSH2 0x16B JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x208 JUMPI PUSH2 0x208 PUSH2 0x26B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x230 JUMPI PUSH2 0x230 PUSH2 0x26B JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSIZE 0xAE PC 0xB0 SWAP11 0x2A DUP6 0xB4 0x5E SWAP8 EXTCODESIZE TIMESTAMP PUSH19 0xF731827374E0E4177B6DE26285671931786B35 PUSH5 0x736F6C6343 STOP ADDMOD MOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "MSTORE",
      "path": "116"
    },
    "5": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "CALLDATASIZE",
      "path": "116"
    },
    "8": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "LT",
      "path": "116"
    },
    "9": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x55"
    },
    "12": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "13": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "CALLDATALOAD",
      "path": "116"
    },
    "16": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "SHR",
      "path": "116"
    },
    "19": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "20": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "116",
      "value": "0x2BAECEB7"
    },
    "25": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "116"
    },
    "26": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x5A"
    },
    "29": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "30": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "31": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "116",
      "value": "0x3659CFE6"
    },
    "36": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "116"
    },
    "37": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x71"
    },
    "40": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "41": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "42": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "116",
      "value": "0x4F1EF286"
    },
    "47": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "116"
    },
    "48": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x8F"
    },
    "51": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "52": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "53": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "116",
      "value": "0x9FA6A6E3"
    },
    "58": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "116"
    },
    "59": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0xA1"
    },
    "62": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "63": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "64": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "116",
      "value": "0xD09DE08A"
    },
    "69": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "116"
    },
    "70": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0xC3"
    },
    "73": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "74": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "75": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH4",
      "path": "116",
      "value": "0xD826F88F"
    },
    "80": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "EQ",
      "path": "116"
    },
    "81": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0xD8"
    },
    "84": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "85": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "JUMPDEST",
      "path": "116"
    },
    "86": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x0"
    },
    "88": {
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "DUP1",
      "path": "116"
    },
    "89": {
      "first_revert": true,
      "fn": null,
      "offset": [
        782,
        1037
      ],
      "op": "REVERT",
      "path": "116"
    },
    "90": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "91": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "CALLVALUE",
      "path": "46"
    },
    "92": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "DUP1",
      "path": "46"
    },
    "93": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "94": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x66"
    },
    "97": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "98": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "100": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "DUP1",
      "path": "46"
    },
    "101": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "REVERT",
      "path": "46"
    },
    "102": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "103": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "POP",
      "path": "46"
    },
    "104": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x6F"
    },
    "107": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xED"
    },
    "110": {
      "fn": "CountersImpl.decrement",
      "jump": "i",
      "offset": [
        369,
        434
      ],
      "op": "JUMP",
      "path": "46"
    },
    "111": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "112": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "STOP",
      "path": "46"
    },
    "113": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPDEST",
      "path": "116"
    },
    "114": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "CALLVALUE",
      "path": "116"
    },
    "115": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "DUP1",
      "path": "116"
    },
    "116": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "ISZERO",
      "path": "116"
    },
    "117": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x7D"
    },
    "120": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPI",
      "path": "116"
    },
    "121": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x0"
    },
    "123": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "DUP1",
      "path": "116"
    },
    "124": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "REVERT",
      "path": "116"
    },
    "125": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPDEST",
      "path": "116"
    },
    "126": {
      "op": "POP"
    },
    "127": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x6F"
    },
    "130": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x8C"
    },
    "133": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "CALLDATASIZE",
      "path": "116"
    },
    "134": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x4"
    },
    "136": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x187"
    },
    "139": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "jump": "i",
      "offset": [
        846,
        923
      ],
      "op": "JUMP",
      "path": "116"
    },
    "140": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMPDEST",
      "path": "116"
    },
    "141": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "POP",
      "path": "116"
    },
    "142": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeTo",
      "offset": [
        846,
        923
      ],
      "op": "JUMP",
      "path": "116"
    },
    "143": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "JUMPDEST",
      "path": "116"
    },
    "144": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x6F"
    },
    "147": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x9D"
    },
    "150": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "CALLDATASIZE",
      "path": "116"
    },
    "151": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH1",
      "path": "116",
      "value": "0x4"
    },
    "153": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "PUSH2",
      "path": "116",
      "value": "0x1A9"
    },
    "156": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "jump": "i",
      "offset": [
        929,
        1035
      ],
      "op": "JUMP",
      "path": "116"
    },
    "157": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "JUMPDEST",
      "path": "116"
    },
    "158": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "POP",
      "path": "116"
    },
    "159": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "POP",
      "path": "116"
    },
    "160": {
      "fn": "UUPSUpgradeableBrokenMock.upgradeToAndCall",
      "offset": [
        929,
        1035
      ],
      "op": "JUMP",
      "path": "116"
    },
    "161": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "162": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "CALLVALUE",
      "path": "46"
    },
    "163": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "46"
    },
    "164": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "165": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xAD"
    },
    "168": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "169": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "171": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "46"
    },
    "172": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "REVERT",
      "path": "46"
    },
    "173": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "174": {
      "op": "POP"
    },
    "175": {
      "fn": "CountersImpl.current",
      "offset": [
        241,
        248
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "177": {
      "op": "SLOAD"
    },
    "178": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "180": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "181": {
      "op": "SWAP1"
    },
    "182": {
      "op": "DUP2"
    },
    "183": {
      "op": "MSTORE"
    },
    "184": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "186": {
      "op": "ADD"
    },
    "187": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x40"
    },
    "189": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "MLOAD",
      "path": "46"
    },
    "190": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "DUP1",
      "path": "46"
    },
    "191": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "SWAP2",
      "path": "46"
    },
    "192": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "SUB",
      "path": "46"
    },
    "193": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "SWAP1",
      "path": "46"
    },
    "194": {
      "fn": "CountersImpl.current",
      "offset": [
        201,
        292
      ],
      "op": "RETURN",
      "path": "46"
    },
    "195": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "196": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "CALLVALUE",
      "path": "46"
    },
    "197": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "DUP1",
      "path": "46"
    },
    "198": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "199": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xCF"
    },
    "202": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "203": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "205": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "DUP1",
      "path": "46"
    },
    "206": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "REVERT",
      "path": "46"
    },
    "207": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "208": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "POP",
      "path": "46"
    },
    "209": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x6F"
    },
    "212": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xF9"
    },
    "215": {
      "fn": "CountersImpl.increment",
      "jump": "i",
      "offset": [
        298,
        363
      ],
      "op": "JUMP",
      "path": "46"
    },
    "216": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "217": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "CALLVALUE",
      "path": "46"
    },
    "218": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "DUP1",
      "path": "46"
    },
    "219": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "ISZERO",
      "path": "46"
    },
    "220": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0xE4"
    },
    "223": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPI",
      "path": "46"
    },
    "224": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "226": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "DUP1",
      "path": "46"
    },
    "227": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "REVERT",
      "path": "46"
    },
    "228": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "229": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "POP",
      "path": "46"
    },
    "230": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x6F"
    },
    "233": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x107"
    },
    "236": {
      "fn": "CountersImpl.reset",
      "jump": "i",
      "offset": [
        440,
        497
      ],
      "op": "JUMP",
      "path": "46"
    },
    "237": {
      "fn": "CountersImpl.decrement",
      "offset": [
        369,
        434
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "238": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        427
      ],
      "op": "PUSH2",
      "path": "46",
      "statement": 0,
      "value": "0xF7"
    },
    "241": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        415
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "243": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        425
      ],
      "op": "PUSH2",
      "path": "46",
      "value": "0x110"
    },
    "246": {
      "fn": "CountersImpl.decrement",
      "jump": "i",
      "offset": [
        407,
        427
      ],
      "op": "JUMP",
      "path": "46"
    },
    "247": {
      "fn": "CountersImpl.decrement",
      "offset": [
        407,
        427
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "248": {
      "fn": "CountersImpl.decrement",
      "jump": "o",
      "offset": [
        369,
        434
      ],
      "op": "JUMP",
      "path": "46"
    },
    "249": {
      "fn": "CountersImpl.increment",
      "offset": [
        298,
        363
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "250": {
      "fn": "CountersImpl.increment",
      "offset": [
        336,
        356
      ],
      "op": "PUSH2",
      "path": "46",
      "statement": 1,
      "value": "0xF7"
    },
    "253": {
      "fn": "CountersImpl.increment",
      "offset": [
        336,
        344
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "255": {
      "op": "DUP1"
    },
    "256": {
      "op": "SLOAD"
    },
    "257": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "259": {
      "op": "ADD"
    },
    "260": {
      "op": "SWAP1"
    },
    "261": {
      "op": "SSTORE"
    },
    "262": {
      "op": "JUMP"
    },
    "263": {
      "fn": "CountersImpl.reset",
      "offset": [
        440,
        497
      ],
      "op": "JUMPDEST",
      "path": "46"
    },
    "264": {
      "fn": "CountersImpl.reset",
      "offset": [
        474,
        490
      ],
      "op": "PUSH2",
      "path": "46",
      "statement": 2,
      "value": "0xF7"
    },
    "267": {
      "fn": "CountersImpl.reset",
      "offset": [
        474,
        482
      ],
      "op": "PUSH1",
      "path": "46",
      "value": "0x0"
    },
    "269": {
      "op": "DUP1"
    },
    "270": {
      "op": "SSTORE"
    },
    "271": {
      "op": "JUMP"
    },
    "272": {
      "op": "JUMPDEST"
    },
    "273": {
      "op": "DUP1"
    },
    "274": {
      "op": "SLOAD"
    },
    "275": {
      "op": "DUP1"
    },
    "276": {
      "op": "PUSH2",
      "value": "0x163"
    },
    "279": {
      "op": "JUMPI"
    },
    "280": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "282": {
      "op": "MLOAD"
    },
    "283": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "287": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "289": {
      "op": "SHL"
    },
    "290": {
      "op": "DUP2"
    },
    "291": {
      "op": "MSTORE"
    },
    "292": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "294": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "296": {
      "op": "DUP3"
    },
    "297": {
      "op": "ADD"
    },
    "298": {
      "op": "MSTORE"
    },
    "299": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "301": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "303": {
      "op": "DUP3"
    },
    "304": {
      "op": "ADD"
    },
    "305": {
      "op": "MSTORE"
    },
    "306": {
      "op": "PUSH32",
      "value": "0x436F756E7465723A2064656372656D656E74206F766572666C6F770000000000"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "341": {
      "op": "DUP3"
    },
    "342": {
      "op": "ADD"
    },
    "343": {
      "op": "MSTORE"
    },
    "344": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "346": {
      "op": "ADD"
    },
    "347": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "349": {
      "op": "MLOAD"
    },
    "350": {
      "op": "DUP1"
    },
    "351": {
      "op": "SWAP2"
    },
    "352": {
      "op": "SUB"
    },
    "353": {
      "op": "SWAP1"
    },
    "354": {
      "op": "REVERT"
    },
    "355": {
      "op": "JUMPDEST"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "358": {
      "op": "NOT"
    },
    "359": {
      "op": "ADD"
    },
    "360": {
      "op": "SWAP1"
    },
    "361": {
      "op": "SSTORE"
    },
    "362": {
      "jump": "o",
      "op": "JUMP"
    },
    "363": {
      "op": "JUMPDEST"
    },
    "364": {
      "op": "DUP1"
    },
    "365": {
      "op": "CALLDATALOAD"
    },
    "366": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "368": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "370": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "372": {
      "op": "SHL"
    },
    "373": {
      "op": "SUB"
    },
    "374": {
      "op": "DUP2"
    },
    "375": {
      "op": "AND"
    },
    "376": {
      "op": "DUP2"
    },
    "377": {
      "op": "EQ"
    },
    "378": {
      "op": "PUSH2",
      "value": "0x182"
    },
    "381": {
      "op": "JUMPI"
    },
    "382": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "384": {
      "op": "DUP1"
    },
    "385": {
      "op": "REVERT"
    },
    "386": {
      "op": "JUMPDEST"
    },
    "387": {
      "op": "SWAP2"
    },
    "388": {
      "op": "SWAP1"
    },
    "389": {
      "op": "POP"
    },
    "390": {
      "jump": "o",
      "op": "JUMP"
    },
    "391": {
      "op": "JUMPDEST"
    },
    "392": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "394": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "396": {
      "op": "DUP3"
    },
    "397": {
      "op": "DUP5"
    },
    "398": {
      "op": "SUB"
    },
    "399": {
      "op": "SLT"
    },
    "400": {
      "op": "ISZERO"
    },
    "401": {
      "op": "PUSH2",
      "value": "0x199"
    },
    "404": {
      "op": "JUMPI"
    },
    "405": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "407": {
      "op": "DUP1"
    },
    "408": {
      "op": "REVERT"
    },
    "409": {
      "op": "JUMPDEST"
    },
    "410": {
      "op": "PUSH2",
      "value": "0x1A2"
    },
    "413": {
      "op": "DUP3"
    },
    "414": {
      "op": "PUSH2",
      "value": "0x16B"
    },
    "417": {
      "jump": "i",
      "op": "JUMP"
    },
    "418": {
      "op": "JUMPDEST"
    },
    "419": {
      "op": "SWAP4"
    },
    "420": {
      "op": "SWAP3"
    },
    "421": {
      "op": "POP"
    },
    "422": {
      "op": "POP"
    },
    "423": {
      "op": "POP"
    },
    "424": {
      "jump": "o",
      "op": "JUMP"
    },
    "425": {
      "op": "JUMPDEST"
    },
    "426": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "428": {
      "op": "DUP1"
    },
    "429": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "431": {
      "op": "DUP4"
    },
    "432": {
      "op": "DUP6"
    },
    "433": {
      "op": "SUB"
    },
    "434": {
      "op": "SLT"
    },
    "435": {
      "op": "ISZERO"
    },
    "436": {
      "op": "PUSH2",
      "value": "0x1BC"
    },
    "439": {
      "op": "JUMPI"
    },
    "440": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "442": {
      "op": "DUP1"
    },
    "443": {
      "op": "REVERT"
    },
    "444": {
      "op": "JUMPDEST"
    },
    "445": {
      "op": "PUSH2",
      "value": "0x1C5"
    },
    "448": {
      "op": "DUP4"
    },
    "449": {
      "op": "PUSH2",
      "value": "0x16B"
    },
    "452": {
      "jump": "i",
      "op": "JUMP"
    },
    "453": {
      "op": "JUMPDEST"
    },
    "454": {
      "op": "SWAP2"
    },
    "455": {
      "op": "POP"
    },
    "456": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "458": {
      "op": "DUP4"
    },
    "459": {
      "op": "ADD"
    },
    "460": {
      "op": "CALLDATALOAD"
    },
    "461": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "470": {
      "op": "DUP1"
    },
    "471": {
      "op": "DUP3"
    },
    "472": {
      "op": "GT"
    },
    "473": {
      "op": "ISZERO"
    },
    "474": {
      "op": "PUSH2",
      "value": "0x1E2"
    },
    "477": {
      "op": "JUMPI"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "480": {
      "op": "DUP1"
    },
    "481": {
      "op": "REVERT"
    },
    "482": {
      "op": "JUMPDEST"
    },
    "483": {
      "op": "DUP2"
    },
    "484": {
      "op": "DUP6"
    },
    "485": {
      "op": "ADD"
    },
    "486": {
      "op": "SWAP2"
    },
    "487": {
      "op": "POP"
    },
    "488": {
      "op": "DUP6"
    },
    "489": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "491": {
      "op": "DUP4"
    },
    "492": {
      "op": "ADD"
    },
    "493": {
      "op": "SLT"
    },
    "494": {
      "op": "PUSH2",
      "value": "0x1F6"
    },
    "497": {
      "op": "JUMPI"
    },
    "498": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "500": {
      "op": "DUP1"
    },
    "501": {
      "op": "REVERT"
    },
    "502": {
      "op": "JUMPDEST"
    },
    "503": {
      "op": "DUP2"
    },
    "504": {
      "op": "CALLDATALOAD"
    },
    "505": {
      "op": "DUP2"
    },
    "506": {
      "op": "DUP2"
    },
    "507": {
      "op": "GT"
    },
    "508": {
      "op": "ISZERO"
    },
    "509": {
      "op": "PUSH2",
      "value": "0x208"
    },
    "512": {
      "op": "JUMPI"
    },
    "513": {
      "op": "PUSH2",
      "value": "0x208"
    },
    "516": {
      "op": "PUSH2",
      "value": "0x26B"
    },
    "519": {
      "jump": "i",
      "op": "JUMP"
    },
    "520": {
      "op": "JUMPDEST"
    },
    "521": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "523": {
      "op": "MLOAD"
    },
    "524": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "526": {
      "op": "DUP3"
    },
    "527": {
      "op": "ADD"
    },
    "528": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "530": {
      "op": "NOT"
    },
    "531": {
      "op": "SWAP1"
    },
    "532": {
      "op": "DUP2"
    },
    "533": {
      "op": "AND"
    },
    "534": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "536": {
      "op": "ADD"
    },
    "537": {
      "op": "AND"
    },
    "538": {
      "op": "DUP2"
    },
    "539": {
      "op": "ADD"
    },
    "540": {
      "op": "SWAP1"
    },
    "541": {
      "op": "DUP4"
    },
    "542": {
      "op": "DUP3"
    },
    "543": {
      "op": "GT"
    },
    "544": {
      "op": "DUP2"
    },
    "545": {
      "op": "DUP4"
    },
    "546": {
      "op": "LT"
    },
    "547": {
      "op": "OR"
    },
    "548": {
      "op": "ISZERO"
    },
    "549": {
      "op": "PUSH2",
      "value": "0x230"
    },
    "552": {
      "op": "JUMPI"
    },
    "553": {
      "op": "PUSH2",
      "value": "0x230"
    },
    "556": {
      "op": "PUSH2",
      "value": "0x26B"
    },
    "559": {
      "jump": "i",
      "op": "JUMP"
    },
    "560": {
      "op": "JUMPDEST"
    },
    "561": {
      "op": "DUP2"
    },
    "562": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "564": {
      "op": "MSTORE"
    },
    "565": {
      "op": "DUP3"
    },
    "566": {
      "op": "DUP2"
    },
    "567": {
      "op": "MSTORE"
    },
    "568": {
      "op": "DUP9"
    },
    "569": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "571": {
      "op": "DUP5"
    },
    "572": {
      "op": "DUP8"
    },
    "573": {
      "op": "ADD"
    },
    "574": {
      "op": "ADD"
    },
    "575": {
      "op": "GT"
    },
    "576": {
      "op": "ISZERO"
    },
    "577": {
      "op": "PUSH2",
      "value": "0x249"
    },
    "580": {
      "op": "JUMPI"
    },
    "581": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "583": {
      "op": "DUP1"
    },
    "584": {
      "op": "REVERT"
    },
    "585": {
      "op": "JUMPDEST"
    },
    "586": {
      "op": "DUP3"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "589": {
      "op": "DUP7"
    },
    "590": {
      "op": "ADD"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "593": {
      "op": "DUP4"
    },
    "594": {
      "op": "ADD"
    },
    "595": {
      "op": "CALLDATACOPY"
    },
    "596": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "598": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "600": {
      "op": "DUP5"
    },
    "601": {
      "op": "DUP4"
    },
    "602": {
      "op": "ADD"
    },
    "603": {
      "op": "ADD"
    },
    "604": {
      "op": "MSTORE"
    },
    "605": {
      "op": "DUP1"
    },
    "606": {
      "op": "SWAP6"
    },
    "607": {
      "op": "POP"
    },
    "608": {
      "op": "POP"
    },
    "609": {
      "op": "POP"
    },
    "610": {
      "op": "POP"
    },
    "611": {
      "op": "POP"
    },
    "612": {
      "op": "POP"
    },
    "613": {
      "op": "SWAP3"
    },
    "614": {
      "op": "POP"
    },
    "615": {
      "op": "SWAP3"
    },
    "616": {
      "op": "SWAP1"
    },
    "617": {
      "op": "POP"
    },
    "618": {
      "jump": "o",
      "op": "JUMP"
    },
    "619": {
      "op": "JUMPDEST"
    },
    "620": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "625": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "627": {
      "op": "SHL"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "630": {
      "op": "MSTORE"
    },
    "631": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "633": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "635": {
      "op": "MSTORE"
    },
    "636": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "638": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "640": {
      "op": "REVERT"
    }
  },
  "sha1": "c8a10b888a9c5a23274c596fd65f2208cf3de150",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../CountersImpl.sol\";\nimport \"../../proxy/utils/UUPSUpgradeable.sol\";\n\ncontract UUPSUpgradeableMock is CountersImpl, UUPSUpgradeable {\n    // Not having any checks in this function is dangerous! Do not do this outside tests!\n    function _authorizeUpgrade(address) internal virtual override {}\n}\n\ncontract UUPSUpgradeableUnsafeMock is UUPSUpgradeableMock {\n    function upgradeTo(address newImplementation) external virtual override {\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual override {\n        ERC1967Upgrade._upgradeToAndCall(newImplementation, data, false);\n    }\n}\n\ncontract UUPSUpgradeableBrokenMock is UUPSUpgradeableMock {\n    function upgradeTo(address) external virtual override {\n        // pass\n    }\n\n    function upgradeToAndCall(address, bytes memory) external payable virtual override {\n        // pass\n    }\n}\n",
  "sourceMap": "782:255:116:-:0;;;1008:4:131;965:48;;;;782:255:116;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/OpenZepellin/contracts/mocks/UUPS/TestInProd.sol",
  "type": "contract"
}