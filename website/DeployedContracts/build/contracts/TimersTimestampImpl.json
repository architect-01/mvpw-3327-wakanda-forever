{
  "abi": [
    {
      "inputs": [],
      "name": "getDeadline",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isUnset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "setDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "115": "contracts/OpenZepellin/contracts/mocks/TimersTimestampImpl.sol",
    "186": "contracts/OpenZepellin/contracts/utils/Timers.sol"
  },
  "ast": {
    "absolutePath": "contracts/OpenZepellin/contracts/mocks/TimersTimestampImpl.sol",
    "exportedSymbols": {
      "Timers": [
        25162
      ],
      "TimersTimestampImpl": [
        13711
      ]
    },
    "id": 13712,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 13631,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:115"
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/utils/Timers.sol",
        "file": "../utils/Timers.sol",
        "id": 13632,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 13712,
        "sourceUnit": 25163,
        "src": "58:29:115",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 13711,
        "linearizedBaseContracts": [
          13711
        ],
        "name": "TimersTimestampImpl",
        "nameLocation": "98:19:115",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 13636,
            "libraryName": {
              "id": 13633,
              "name": "Timers",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25162,
              "src": "130:6:115"
            },
            "nodeType": "UsingForDirective",
            "src": "124:34:115",
            "typeName": {
              "id": 13635,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 13634,
                "name": "Timers.Timestamp",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 24954,
                "src": "141:16:115"
              },
              "referencedDeclaration": 24954,
              "src": "141:16:115",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Timestamp_$24954_storage_ptr",
                "typeString": "struct Timers.Timestamp"
              }
            }
          },
          {
            "constant": false,
            "id": 13639,
            "mutability": "mutable",
            "name": "_timer",
            "nameLocation": "189:6:115",
            "nodeType": "VariableDeclaration",
            "scope": 13711,
            "src": "164:31:115",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
              "typeString": "struct Timers.Timestamp"
            },
            "typeName": {
              "id": 13638,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 13637,
                "name": "Timers.Timestamp",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 24954,
                "src": "164:16:115"
              },
              "referencedDeclaration": 24954,
              "src": "164:16:115",
              "typeDescriptions": {
                "typeIdentifier": "t_struct$_Timestamp_$24954_storage_ptr",
                "typeString": "struct Timers.Timestamp"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 13648,
              "nodeType": "Block",
              "src": "254:44:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 13644,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "271:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13645,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getDeadline",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24966,
                      "src": "271:18:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Timestamp_$24954_memory_ptr_$returns$_t_uint64_$bound_to$_t_struct$_Timestamp_$24954_memory_ptr_$",
                        "typeString": "function (struct Timers.Timestamp memory) pure returns (uint64)"
                      }
                    },
                    "id": 13646,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "271:20:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "functionReturnParameters": 13643,
                  "id": 13647,
                  "nodeType": "Return",
                  "src": "264:27:115"
                }
              ]
            },
            "functionSelector": "5f8d96de",
            "id": 13649,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDeadline",
            "nameLocation": "211:11:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13640,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "222:2:115"
            },
            "returnParameters": {
              "id": 13643,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13642,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13649,
                  "src": "246:6:115",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 13641,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "246:6:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "245:8:115"
            },
            "scope": 13711,
            "src": "202:96:115",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13660,
              "nodeType": "Block",
              "src": "350:46:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 13657,
                        "name": "timestamp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13651,
                        "src": "379:9:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "expression": {
                        "id": 13654,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "360:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13656,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "setDeadline",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24981,
                      "src": "360:18:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Timestamp_$24954_storage_ptr_$_t_uint64_$returns$__$bound_to$_t_struct$_Timestamp_$24954_storage_ptr_$",
                        "typeString": "function (struct Timers.Timestamp storage pointer,uint64)"
                      }
                    },
                    "id": 13658,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "360:29:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13659,
                  "nodeType": "ExpressionStatement",
                  "src": "360:29:115"
                }
              ]
            },
            "functionSelector": "aebc0483",
            "id": 13661,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setDeadline",
            "nameLocation": "313:11:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13651,
                  "mutability": "mutable",
                  "name": "timestamp",
                  "nameLocation": "332:9:115",
                  "nodeType": "VariableDeclaration",
                  "scope": 13661,
                  "src": "325:16:115",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 13650,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "325:6:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "324:18:115"
            },
            "returnParameters": {
              "id": 13653,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "350:0:115"
            },
            "scope": 13711,
            "src": "304:92:115",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13669,
              "nodeType": "Block",
              "src": "426:31:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 13664,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "436:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13666,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "reset",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24994,
                      "src": "436:12:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Timestamp_$24954_storage_ptr_$returns$__$bound_to$_t_struct$_Timestamp_$24954_storage_ptr_$",
                        "typeString": "function (struct Timers.Timestamp storage pointer)"
                      }
                    },
                    "id": 13667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "436:14:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13668,
                  "nodeType": "ExpressionStatement",
                  "src": "436:14:115"
                }
              ]
            },
            "functionSelector": "d826f88f",
            "id": 13670,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "reset",
            "nameLocation": "411:5:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13662,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "416:2:115"
            },
            "returnParameters": {
              "id": 13663,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "426:0:115"
            },
            "scope": 13711,
            "src": "402:55:115",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13679,
              "nodeType": "Block",
              "src": "509:40:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 13675,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "526:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13676,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isUnset",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25008,
                      "src": "526:14:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Timestamp_$24954_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_Timestamp_$24954_memory_ptr_$",
                        "typeString": "function (struct Timers.Timestamp memory) pure returns (bool)"
                      }
                    },
                    "id": 13677,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "526:16:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 13674,
                  "id": 13678,
                  "nodeType": "Return",
                  "src": "519:23:115"
                }
              ]
            },
            "functionSelector": "2260fe3a",
            "id": 13680,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isUnset",
            "nameLocation": "472:7:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13671,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "479:2:115"
            },
            "returnParameters": {
              "id": 13674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13673,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13680,
                  "src": "503:4:115",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13672,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "503:4:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "502:6:115"
            },
            "scope": 13711,
            "src": "463:86:115",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13689,
              "nodeType": "Block",
              "src": "603:42:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 13685,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "620:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13686,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isStarted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25022,
                      "src": "620:16:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_struct$_Timestamp_$24954_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_Timestamp_$24954_memory_ptr_$",
                        "typeString": "function (struct Timers.Timestamp memory) pure returns (bool)"
                      }
                    },
                    "id": 13687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "620:18:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 13684,
                  "id": 13688,
                  "nodeType": "Return",
                  "src": "613:25:115"
                }
              ]
            },
            "functionSelector": "544736e6",
            "id": 13690,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isStarted",
            "nameLocation": "564:9:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13681,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "573:2:115"
            },
            "returnParameters": {
              "id": 13684,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13683,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13690,
                  "src": "597:4:115",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13682,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "597:4:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "596:6:115"
            },
            "scope": 13711,
            "src": "555:90:115",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13699,
              "nodeType": "Block",
              "src": "699:42:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 13695,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "716:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13696,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isPending",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25037,
                      "src": "716:16:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Timestamp_$24954_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_Timestamp_$24954_memory_ptr_$",
                        "typeString": "function (struct Timers.Timestamp memory) view returns (bool)"
                      }
                    },
                    "id": 13697,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "716:18:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 13694,
                  "id": 13698,
                  "nodeType": "Return",
                  "src": "709:25:115"
                }
              ]
            },
            "functionSelector": "9c30ad7e",
            "id": 13700,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isPending",
            "nameLocation": "660:9:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13691,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "669:2:115"
            },
            "returnParameters": {
              "id": 13694,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13693,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13700,
                  "src": "693:4:115",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13692,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "693:4:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "692:6:115"
            },
            "scope": 13711,
            "src": "651:90:115",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13709,
              "nodeType": "Block",
              "src": "795:42:115",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 13705,
                        "name": "_timer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13639,
                        "src": "812:6:115",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Timestamp_$24954_storage",
                          "typeString": "struct Timers.Timestamp storage ref"
                        }
                      },
                      "id": 13706,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isExpired",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 25056,
                      "src": "812:16:115",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_struct$_Timestamp_$24954_memory_ptr_$returns$_t_bool_$bound_to$_t_struct$_Timestamp_$24954_memory_ptr_$",
                        "typeString": "function (struct Timers.Timestamp memory) view returns (bool)"
                      }
                    },
                    "id": 13707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "812:18:115",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 13704,
                  "id": 13708,
                  "nodeType": "Return",
                  "src": "805:25:115"
                }
              ]
            },
            "functionSelector": "2f13b60c",
            "id": 13710,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isExpired",
            "nameLocation": "756:9:115",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13701,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "765:2:115"
            },
            "returnParameters": {
              "id": 13704,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13703,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 13710,
                  "src": "789:4:115",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13702,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "789:4:115",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "788:6:115"
            },
            "scope": 13711,
            "src": "747:90:115",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 13712,
        "src": "89:750:115",
        "usedErrors": []
      }
    ],
    "src": "33:807:115"
  },
  "bytecode": "608060405234801561001057600080fd5b50610243806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f8d96de1161005b5780635f8d96de146100e05780639c30ad7e14610107578063aebc04831461012a578063d826f88f1461015c57600080fd5b80632260fe3a146100825780632f13b60c146100b5578063544736e6146100bd575b600080fd5b604080516020810190915260005467ffffffffffffffff1690819052155b60405190151581526020015b60405180910390f35b6100a0610169565b604080516020810190915260005467ffffffffffffffff169081905215156100a0565b604080516020808201835260005467ffffffffffffffff16918290529151908152016100ac565b604080516020810190915260005467ffffffffffffffff169081905242106100a0565b61015a6101383660046101dc565b6000805467ffffffffffffffff831667ffffffffffffffff1990911617905550565b005b61015a61018e565b905090565b60408051602081019091526000805467ffffffffffffffff16825290610164906101a6565b6101a46000805467ffffffffffffffff19169055565b565b60006101bc825167ffffffffffffffff16151590565b80156101d6575042826000015167ffffffffffffffff1611155b92915050565b6000602082840312156101ee57600080fd5b813567ffffffffffffffff8116811461020657600080fd5b939250505056fea2646970667358221220b90962036928d488393c7c5c9fc8e83dfd02843e13ea66a8a9dfc395539a32e864736f6c63430008060033",
  "bytecodeSha1": "dece59c7e1755db183dfef6ec2f434cf590bbfc8",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.6+commit.11564f7e"
  },
  "contractName": "TimersTimestampImpl",
  "coverageMap": {
    "branches": {
      "115": {},
      "186": {}
    },
    "statements": {
      "115": {
        "TimersTimestampImpl.getDeadline": {
          "4": [
            264,
            291
          ]
        },
        "TimersTimestampImpl.isExpired": {
          "9": [
            805,
            830
          ]
        },
        "TimersTimestampImpl.isPending": {
          "5": [
            709,
            734
          ]
        },
        "TimersTimestampImpl.isStarted": {
          "2": [
            613,
            638
          ]
        },
        "TimersTimestampImpl.isUnset": {
          "0": [
            519,
            542
          ]
        },
        "TimersTimestampImpl.reset": {
          "10": [
            436,
            450
          ]
        },
        "TimersTimestampImpl.setDeadline": {
          "7": [
            360,
            389
          ]
        }
      },
      "186": {
        "Timers.isExpired": {
          "12": [
            1038,
            1099
          ]
        },
        "Timers.isPending": {
          "6": [
            903,
            943
          ]
        },
        "Timers.isStarted": {
          "3": [
            782,
            808
          ]
        },
        "Timers.isUnset": {
          "1": [
            660,
            687
          ]
        },
        "Timers.reset": {
          "11": [
            548,
            567
          ]
        },
        "Timers.setDeadline": {
          "8": [
            449,
            476
          ]
        }
      }
    }
  },
  "dependencies": [
    "Timers"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061007d5760003560e01c80635f8d96de1161005b5780635f8d96de146100e05780639c30ad7e14610107578063aebc04831461012a578063d826f88f1461015c57600080fd5b80632260fe3a146100825780632f13b60c146100b5578063544736e6146100bd575b600080fd5b604080516020810190915260005467ffffffffffffffff1690819052155b60405190151581526020015b60405180910390f35b6100a0610169565b604080516020810190915260005467ffffffffffffffff169081905215156100a0565b604080516020808201835260005467ffffffffffffffff16918290529151908152016100ac565b604080516020810190915260005467ffffffffffffffff169081905242106100a0565b61015a6101383660046101dc565b6000805467ffffffffffffffff831667ffffffffffffffff1990911617905550565b005b61015a61018e565b905090565b60408051602081019091526000805467ffffffffffffffff16825290610164906101a6565b6101a46000805467ffffffffffffffff19169055565b565b60006101bc825167ffffffffffffffff16151590565b80156101d6575042826000015167ffffffffffffffff1611155b92915050565b6000602082840312156101ee57600080fd5b813567ffffffffffffffff8116811461020657600080fd5b939250505056fea2646970667358221220b90962036928d488393c7c5c9fc8e83dfd02843e13ea66a8a9dfc395539a32e864736f6c63430008060033",
  "deployedSourceMap": "89:750:115:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;463:86;526:14;;;;;;;;;-1:-1:-1;526:14:115;;;;;;;667:20:186;463:86:115;;;468:14:211;;461:22;443:41;;431:2;416:18;463:86:115;;;;;;;;747:90;;;:::i;555:::-;620:16;;;;;;;;;-1:-1:-1;620:16:115;;;;;;;789:19:186;;555:90:115;463:86;202:96;271:18;;;;;;;;;-1:-1:-1;271:18:115;;;;;;;202:96;;639:50:211;;;612:18;202:96:115;594:101:211;651:90:115;716:16;;;;;;;;;-1:-1:-1;716:16:115;;;;;;;928:15:186;-1:-1:-1;651:90:115;463:86;304:92;;;;;;:::i;:::-;360:6;449:27:186;;;;;-1:-1:-1;;449:27:186;;;;;;304:92:115;;;;402:55;;;:::i;526:16::-;519:23;;463:86;:::o;747:90::-;812:16;;;;;;;;;789:4;812:16;;;;;;789:4;812:18;;:16;:18::i;402:55::-;436:14;:6;548:19:186;;-1:-1:-1;;548:19:186;;;489:85;436:14:115;402:55::o;956:150:186:-;1022:4;1045:16;1055:5;789:15;:19;;;;;700:115;1045:16;:54;;;;;1084:15;1065:5;:15;;;:34;;;;1045:54;1038:61;956:150;-1:-1:-1;;956:150:186:o;14:284:211:-;72:6;125:2;113:9;104:7;100:23;96:32;93:2;;;141:1;138;131:12;93:2;180:9;167:23;230:18;223:5;219:30;212:5;209:41;199:2;;264:1;261;254:12;199:2;287:5;83:215;-1:-1:-1;;;83:215:211:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    89,
    839
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5F8D96DE GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x5F8D96DE EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x9C30AD7E EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xAEBC0483 EQ PUSH2 0x12A JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0x15C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2260FE3A EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x2F13B60C EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x544736E6 EQ PUSH2 0xBD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 DUP2 SWAP1 MSTORE ISZERO JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0x169 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 DUP2 SWAP1 MSTORE ISZERO ISZERO PUSH2 0xA0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP2 DUP3 SWAP1 MSTORE SWAP2 MLOAD SWAP1 DUP2 MSTORE ADD PUSH2 0xAC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 DUP2 SWAP1 MSTORE TIMESTAMP LT PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x138 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DC JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP4 AND PUSH8 0xFFFFFFFFFFFFFFFF NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15A PUSH2 0x18E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP3 MSTORE SWAP1 PUSH2 0x164 SWAP1 PUSH2 0x1A6 JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x0 DUP1 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BC DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND ISZERO ISZERO SWAP1 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1D6 JUMPI POP TIMESTAMP DUP3 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND GT ISZERO JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 MULMOD PUSH3 0x36928 0xD4 DUP9 CODECOPY EXTCODECOPY PUSH29 0x5C9FC8E83DFD02843E13EA66A8A9DFC395539A32E864736F6C63430008 MOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "5": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "CALLVALUE",
      "path": "115"
    },
    "6": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "7": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "ISZERO",
      "path": "115"
    },
    "8": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "12": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "REVERT",
      "path": "115"
    },
    "16": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "17": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "POP",
      "path": "115"
    },
    "18": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "CALLDATASIZE",
      "path": "115"
    },
    "21": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "LT",
      "path": "115"
    },
    "22": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x7D"
    },
    "25": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "26": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "CALLDATALOAD",
      "path": "115"
    },
    "29": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "SHR",
      "path": "115"
    },
    "32": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "33": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0x5F8D96DE"
    },
    "38": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "GT",
      "path": "115"
    },
    "39": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x5B"
    },
    "42": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "43": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "44": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0x5F8D96DE"
    },
    "49": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "50": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xE0"
    },
    "53": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "54": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "55": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0x9C30AD7E"
    },
    "60": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "61": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x107"
    },
    "64": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "65": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "66": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0xAEBC0483"
    },
    "71": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "72": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x12A"
    },
    "75": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "76": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "77": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0xD826F88F"
    },
    "82": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "83": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x15C"
    },
    "86": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "87": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x0"
    },
    "89": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "90": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "REVERT",
      "path": "115"
    },
    "91": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "92": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "93": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0x2260FE3A"
    },
    "98": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "99": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x82"
    },
    "102": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "103": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "104": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0x2F13B60C"
    },
    "109": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "110": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xB5"
    },
    "113": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "114": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "115": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH4",
      "path": "115",
      "value": "0x544736E6"
    },
    "120": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "EQ",
      "path": "115"
    },
    "121": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xBD"
    },
    "124": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPI",
      "path": "115"
    },
    "125": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "126": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x0"
    },
    "128": {
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "DUP1",
      "path": "115"
    },
    "129": {
      "first_revert": true,
      "fn": null,
      "offset": [
        89,
        839
      ],
      "op": "REVERT",
      "path": "115"
    },
    "130": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "131": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "PUSH1",
      "path": "115",
      "statement": 0,
      "value": "0x40"
    },
    "133": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "DUP1",
      "path": "115"
    },
    "134": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "135": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x20"
    },
    "137": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "DUP2",
      "path": "115"
    },
    "138": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "ADD",
      "path": "115"
    },
    "139": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "140": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "141": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "142": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "144": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "SLOAD",
      "path": "115"
    },
    "145": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "PUSH8",
      "path": "115",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "154": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "AND",
      "path": "115"
    },
    "155": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "156": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "DUP2",
      "path": "115"
    },
    "157": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "158": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        540
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "159": {
      "fn": "Timers.isUnset",
      "offset": [
        667,
        687
      ],
      "op": "ISZERO",
      "path": "186",
      "statement": 1
    },
    "160": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "161": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x40"
    },
    "163": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "164": {
      "op": "SWAP1"
    },
    "165": {
      "op": "ISZERO"
    },
    "166": {
      "op": "ISZERO"
    },
    "167": {
      "op": "DUP2"
    },
    "168": {
      "op": "MSTORE"
    },
    "169": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "171": {
      "op": "ADD"
    },
    "172": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "173": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x40"
    },
    "175": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "176": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "DUP1",
      "path": "115"
    },
    "177": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "178": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "SUB",
      "path": "115"
    },
    "179": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "180": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "RETURN",
      "path": "115"
    },
    "181": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        747,
        837
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "182": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        747,
        837
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xA0"
    },
    "185": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        747,
        837
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x169"
    },
    "188": {
      "fn": "TimersTimestampImpl.isExpired",
      "jump": "i",
      "offset": [
        747,
        837
      ],
      "op": "JUMP",
      "path": "115"
    },
    "189": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        555,
        645
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "190": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "PUSH1",
      "path": "115",
      "statement": 2,
      "value": "0x40"
    },
    "192": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "DUP1",
      "path": "115"
    },
    "193": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "194": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x20"
    },
    "196": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "DUP2",
      "path": "115"
    },
    "197": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "ADD",
      "path": "115"
    },
    "198": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "199": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "200": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "201": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "203": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "SLOAD",
      "path": "115"
    },
    "204": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "PUSH8",
      "path": "115",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "213": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "AND",
      "path": "115"
    },
    "214": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "215": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "DUP2",
      "path": "115"
    },
    "216": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "217": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        620,
        636
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "218": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "ISZERO",
      "path": "186",
      "statement": 3
    },
    "219": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "ISZERO",
      "path": "186"
    },
    "220": {
      "fn": "TimersTimestampImpl.isStarted",
      "offset": [
        555,
        645
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xA0"
    },
    "223": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "JUMP",
      "path": "115"
    },
    "224": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        202,
        298
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "225": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "PUSH1",
      "path": "115",
      "statement": 4,
      "value": "0x40"
    },
    "227": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "DUP1",
      "path": "115"
    },
    "228": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "229": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x20"
    },
    "231": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "DUP1",
      "path": "115"
    },
    "232": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "DUP3",
      "path": "115"
    },
    "233": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "ADD",
      "path": "115"
    },
    "234": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "DUP4",
      "path": "115"
    },
    "235": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "236": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "238": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "SLOAD",
      "path": "115"
    },
    "239": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "PUSH8",
      "path": "115",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "248": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "AND",
      "path": "115"
    },
    "249": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "250": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "DUP3",
      "path": "115"
    },
    "251": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "252": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        271,
        289
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "253": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        202,
        298
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "254": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        202,
        298
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "255": {
      "op": "SWAP1"
    },
    "256": {
      "op": "DUP2"
    },
    "257": {
      "op": "MSTORE"
    },
    "258": {
      "op": "ADD"
    },
    "259": {
      "fn": "TimersTimestampImpl.getDeadline",
      "offset": [
        202,
        298
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xAC"
    },
    "262": {
      "op": "JUMP"
    },
    "263": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        651,
        741
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "264": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "PUSH1",
      "path": "115",
      "statement": 5,
      "value": "0x40"
    },
    "266": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "DUP1",
      "path": "115"
    },
    "267": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "268": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x20"
    },
    "270": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "DUP2",
      "path": "115"
    },
    "271": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "ADD",
      "path": "115"
    },
    "272": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "273": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "274": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "275": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "277": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "SLOAD",
      "path": "115"
    },
    "278": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "PUSH8",
      "path": "115",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "287": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "AND",
      "path": "115"
    },
    "288": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "289": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "DUP2",
      "path": "115"
    },
    "290": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "291": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        716,
        732
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "292": {
      "fn": "Timers.isPending",
      "offset": [
        928,
        943
      ],
      "op": "TIMESTAMP",
      "path": "186",
      "statement": 6
    },
    "293": {
      "op": "LT"
    },
    "294": {
      "fn": "TimersTimestampImpl.isPending",
      "offset": [
        651,
        741
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0xA0"
    },
    "297": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "JUMP",
      "path": "115"
    },
    "298": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "299": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x15A"
    },
    "302": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x138"
    },
    "305": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "CALLDATASIZE",
      "path": "115"
    },
    "306": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x4"
    },
    "308": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x1DC"
    },
    "311": {
      "fn": "TimersTimestampImpl.setDeadline",
      "jump": "i",
      "offset": [
        304,
        396
      ],
      "op": "JUMP",
      "path": "115"
    },
    "312": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "313": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        360,
        366
      ],
      "op": "PUSH1",
      "path": "115",
      "statement": 7,
      "value": "0x0"
    },
    "315": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "DUP1",
      "path": "186",
      "statement": 8
    },
    "316": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "SLOAD",
      "path": "186"
    },
    "317": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "PUSH8",
      "path": "186",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "326": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "DUP4",
      "path": "186"
    },
    "327": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "AND",
      "path": "186"
    },
    "328": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "337": {
      "op": "NOT"
    },
    "338": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "SWAP1",
      "path": "186"
    },
    "339": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "SWAP2",
      "path": "186"
    },
    "340": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "AND",
      "path": "186"
    },
    "341": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "OR",
      "path": "186"
    },
    "342": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "SWAP1",
      "path": "186"
    },
    "343": {
      "fn": "Timers.setDeadline",
      "offset": [
        449,
        476
      ],
      "op": "SSTORE",
      "path": "186"
    },
    "344": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "POP",
      "path": "115"
    },
    "345": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "JUMP",
      "path": "115"
    },
    "346": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "347": {
      "fn": "TimersTimestampImpl.setDeadline",
      "offset": [
        304,
        396
      ],
      "op": "STOP",
      "path": "115"
    },
    "348": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        402,
        457
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "349": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        402,
        457
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x15A"
    },
    "352": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        402,
        457
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x18E"
    },
    "355": {
      "fn": "TimersTimestampImpl.reset",
      "jump": "i",
      "offset": [
        402,
        457
      ],
      "op": "JUMP",
      "path": "115"
    },
    "356": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        526,
        542
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "357": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        519,
        542
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "358": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        519,
        542
      ],
      "op": "POP",
      "path": "115"
    },
    "359": {
      "fn": "TimersTimestampImpl.isUnset",
      "offset": [
        463,
        549
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "360": {
      "fn": "TimersTimestampImpl.isUnset",
      "jump": "o",
      "offset": [
        463,
        549
      ],
      "op": "JUMP",
      "path": "115"
    },
    "361": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        747,
        837
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "362": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "PUSH1",
      "path": "115",
      "statement": 9,
      "value": "0x40"
    },
    "364": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "DUP1",
      "path": "115"
    },
    "365": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "MLOAD",
      "path": "115"
    },
    "366": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x20"
    },
    "368": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "DUP2",
      "path": "115"
    },
    "369": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "ADD",
      "path": "115"
    },
    "370": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "371": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "SWAP2",
      "path": "115"
    },
    "372": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "373": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        789,
        793
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x0"
    },
    "375": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "DUP1",
      "path": "115"
    },
    "376": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "SLOAD",
      "path": "115"
    },
    "377": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "PUSH8",
      "path": "115",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "386": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "AND",
      "path": "115"
    },
    "387": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "DUP3",
      "path": "115"
    },
    "388": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "MSTORE",
      "path": "115"
    },
    "389": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        789,
        793
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "390": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        830
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x164"
    },
    "393": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        830
      ],
      "op": "SWAP1",
      "path": "115"
    },
    "394": {
      "fn": "TimersTimestampImpl.isExpired",
      "offset": [
        812,
        828
      ],
      "op": "PUSH2",
      "path": "115",
      "value": "0x1A6"
    },
    "397": {
      "fn": "TimersTimestampImpl.isExpired",
      "jump": "i",
      "offset": [
        812,
        830
      ],
      "op": "JUMP",
      "path": "115"
    },
    "398": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        402,
        457
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "399": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        436,
        450
      ],
      "op": "PUSH2",
      "path": "115",
      "statement": 10,
      "value": "0x1A4"
    },
    "402": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        436,
        442
      ],
      "op": "PUSH1",
      "path": "115",
      "value": "0x0"
    },
    "404": {
      "fn": "Timers.reset",
      "offset": [
        548,
        567
      ],
      "op": "DUP1",
      "path": "186",
      "statement": 11
    },
    "405": {
      "fn": "Timers.reset",
      "offset": [
        548,
        567
      ],
      "op": "SLOAD",
      "path": "186"
    },
    "406": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "415": {
      "op": "NOT"
    },
    "416": {
      "fn": "Timers.reset",
      "offset": [
        548,
        567
      ],
      "op": "AND",
      "path": "186"
    },
    "417": {
      "fn": "Timers.reset",
      "offset": [
        548,
        567
      ],
      "op": "SWAP1",
      "path": "186"
    },
    "418": {
      "fn": "Timers.reset",
      "offset": [
        548,
        567
      ],
      "op": "SSTORE",
      "path": "186"
    },
    "419": {
      "fn": "Timers.reset",
      "offset": [
        489,
        574
      ],
      "op": "JUMP",
      "path": "186"
    },
    "420": {
      "fn": "TimersTimestampImpl.reset",
      "offset": [
        436,
        450
      ],
      "op": "JUMPDEST",
      "path": "115"
    },
    "421": {
      "fn": "TimersTimestampImpl.reset",
      "jump": "o",
      "offset": [
        402,
        457
      ],
      "op": "JUMP",
      "path": "115"
    },
    "422": {
      "fn": "Timers.isExpired",
      "offset": [
        956,
        1106
      ],
      "op": "JUMPDEST",
      "path": "186"
    },
    "423": {
      "fn": "Timers.isExpired",
      "offset": [
        1022,
        1026
      ],
      "op": "PUSH1",
      "path": "186",
      "value": "0x0"
    },
    "425": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1061
      ],
      "op": "PUSH2",
      "path": "186",
      "statement": 12,
      "value": "0x1BC"
    },
    "428": {
      "fn": "Timers.isExpired",
      "offset": [
        1055,
        1060
      ],
      "op": "DUP3",
      "path": "186"
    },
    "429": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        804
      ],
      "op": "MLOAD",
      "path": "186"
    },
    "430": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "PUSH8",
      "path": "186",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "439": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "AND",
      "path": "186"
    },
    "440": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "ISZERO",
      "path": "186"
    },
    "441": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "ISZERO",
      "path": "186"
    },
    "442": {
      "fn": "Timers.isStarted",
      "offset": [
        789,
        808
      ],
      "op": "SWAP1",
      "path": "186"
    },
    "443": {
      "fn": "Timers.isStarted",
      "offset": [
        700,
        815
      ],
      "op": "JUMP",
      "path": "186"
    },
    "444": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1061
      ],
      "op": "JUMPDEST",
      "path": "186"
    },
    "445": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1099
      ],
      "op": "DUP1",
      "path": "186"
    },
    "446": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1099
      ],
      "op": "ISZERO",
      "path": "186"
    },
    "447": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1099
      ],
      "op": "PUSH2",
      "path": "186",
      "value": "0x1D6"
    },
    "450": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1099
      ],
      "op": "JUMPI",
      "path": "186"
    },
    "451": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1099
      ],
      "op": "POP",
      "path": "186"
    },
    "452": {
      "fn": "Timers.isExpired",
      "offset": [
        1084,
        1099
      ],
      "op": "TIMESTAMP",
      "path": "186"
    },
    "453": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1070
      ],
      "op": "DUP3",
      "path": "186"
    },
    "454": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1080
      ],
      "op": "PUSH1",
      "path": "186",
      "value": "0x0"
    },
    "456": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1080
      ],
      "op": "ADD",
      "path": "186"
    },
    "457": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1080
      ],
      "op": "MLOAD",
      "path": "186"
    },
    "458": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1099
      ],
      "op": "PUSH8",
      "path": "186",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "467": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1099
      ],
      "op": "AND",
      "path": "186"
    },
    "468": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1099
      ],
      "op": "GT",
      "path": "186"
    },
    "469": {
      "fn": "Timers.isExpired",
      "offset": [
        1065,
        1099
      ],
      "op": "ISZERO",
      "path": "186"
    },
    "470": {
      "fn": "Timers.isExpired",
      "offset": [
        1045,
        1099
      ],
      "op": "JUMPDEST",
      "path": "186"
    },
    "471": {
      "fn": "Timers.isExpired",
      "offset": [
        1038,
        1099
      ],
      "op": "SWAP3",
      "path": "186"
    },
    "472": {
      "fn": "Timers.isExpired",
      "offset": [
        956,
        1106
      ],
      "op": "SWAP2",
      "path": "186"
    },
    "473": {
      "op": "POP"
    },
    "474": {
      "op": "POP"
    },
    "475": {
      "fn": "Timers.isExpired",
      "jump": "o",
      "offset": [
        956,
        1106
      ],
      "op": "JUMP",
      "path": "186"
    },
    "476": {
      "op": "JUMPDEST"
    },
    "477": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "479": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "481": {
      "op": "DUP3"
    },
    "482": {
      "op": "DUP5"
    },
    "483": {
      "op": "SUB"
    },
    "484": {
      "op": "SLT"
    },
    "485": {
      "op": "ISZERO"
    },
    "486": {
      "op": "PUSH2",
      "value": "0x1EE"
    },
    "489": {
      "op": "JUMPI"
    },
    "490": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "492": {
      "op": "DUP1"
    },
    "493": {
      "op": "REVERT"
    },
    "494": {
      "op": "JUMPDEST"
    },
    "495": {
      "op": "DUP2"
    },
    "496": {
      "op": "CALLDATALOAD"
    },
    "497": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "506": {
      "op": "DUP2"
    },
    "507": {
      "op": "AND"
    },
    "508": {
      "op": "DUP2"
    },
    "509": {
      "op": "EQ"
    },
    "510": {
      "op": "PUSH2",
      "value": "0x206"
    },
    "513": {
      "op": "JUMPI"
    },
    "514": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "516": {
      "op": "DUP1"
    },
    "517": {
      "op": "REVERT"
    },
    "518": {
      "op": "JUMPDEST"
    },
    "519": {
      "op": "SWAP4"
    },
    "520": {
      "op": "SWAP3"
    },
    "521": {
      "op": "POP"
    },
    "522": {
      "op": "POP"
    },
    "523": {
      "op": "POP"
    },
    "524": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "e4611dd88cf1614d3c836bfb524ceb3aa7b2ba22",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Timers.sol\";\n\ncontract TimersTimestampImpl {\n    using Timers for Timers.Timestamp;\n\n    Timers.Timestamp private _timer;\n\n    function getDeadline() public view returns (uint64) {\n        return _timer.getDeadline();\n    }\n\n    function setDeadline(uint64 timestamp) public {\n        _timer.setDeadline(timestamp);\n    }\n\n    function reset() public {\n        _timer.reset();\n    }\n\n    function isUnset() public view returns (bool) {\n        return _timer.isUnset();\n    }\n\n    function isStarted() public view returns (bool) {\n        return _timer.isStarted();\n    }\n\n    function isPending() public view returns (bool) {\n        return _timer.isPending();\n    }\n\n    function isExpired() public view returns (bool) {\n        return _timer.isExpired();\n    }\n}\n",
  "sourceMap": "89:750:115:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/OpenZepellin/contracts/mocks/TimersTimestampImpl.sol",
  "type": "contract"
}