{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_electionName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_wakandaTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_candidateNames",
          "type": "string[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_candidateAges",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "_candidateCults",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "age",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "cult",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Voting.Candidate",
          "name": "challenger",
          "type": "tuple"
        }
      ],
      "name": "NewChallenger",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizenAddress",
          "type": "address"
        }
      ],
      "name": "citizenHasVoted",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "candidateId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            }
          ],
          "internalType": "struct Voting.Vote",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizenAddress",
          "type": "address"
        }
      ],
      "name": "citizenIsRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "citizenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "delegatedVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endTheElection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "candidateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDigest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "citizenAddress",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_citizen",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seeAllCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "age",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "cult",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_candidateId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningCandidates",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "age",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "cult",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/OpenZepellin/contracts/utils/Strings.sol",
    "1": "contracts/OpenZepellin/contracts/utils/cryptography/ECDSA.sol",
    "2": "contracts/OpenZepellin/contracts/utils/cryptography/draft-EIP712.sol",
    "3": "contracts/OpenZepellin/contracts/utils/math/SafeMath.sol",
    "4": "contracts/Token.sol",
    "5": "contracts/Voting.sol"
  },
  "ast": {
    "absolutePath": "contracts/Voting.sol",
    "exportedSymbols": {
      "ECDSA": [
        1820
      ],
      "EIP712": [
        1974
      ],
      "SafeMath": [
        1430
      ],
      "Strings": [
        2177
      ],
      "Token": [
        371
      ],
      "Voting": [
        1118
      ]
    },
    "id": 1119,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 373,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:5"
      },
      {
        "id": 374,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "24:33:5"
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/utils/math/SafeMath.sol",
        "file": "./OpenZepellin/contracts/utils/math/SafeMath.sol",
        "id": 375,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1119,
        "sourceUnit": 1431,
        "src": "91:58:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/Token.sol",
        "file": "./Token.sol",
        "id": 376,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1119,
        "sourceUnit": 372,
        "src": "150:21:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/utils/cryptography/ECDSA.sol",
        "file": "./OpenZepellin/contracts/utils/cryptography/ECDSA.sol",
        "id": 377,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1119,
        "sourceUnit": 1821,
        "src": "173:63:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "contracts/OpenZepellin/contracts/utils/cryptography/draft-EIP712.sol",
        "file": "./OpenZepellin/contracts/utils/cryptography/draft-EIP712.sol",
        "id": 378,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1119,
        "sourceUnit": 1975,
        "src": "237:70:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 380,
              "name": "EIP712",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1974,
              "src": "466:6:5"
            },
            "id": 381,
            "nodeType": "InheritanceSpecifier",
            "src": "466:6:5"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 379,
          "nodeType": "StructuredDocumentation",
          "src": "309:137:5",
          "text": "@title Voting Contract\n@notice Voters Register (receive 1 WKND) token after which, they can particapate in the elections"
        },
        "fullyImplemented": true,
        "id": 1118,
        "linearizedBaseContracts": [
          1118,
          1974
        ],
        "name": "Voting",
        "nameLocation": "456:6:5",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 384,
            "mutability": "constant",
            "name": "ELECTION_WINNERS_LENGTH",
            "nameLocation": "496:23:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "479:44:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 382,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "479:7:5",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "33",
              "id": 383,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "522:1:5",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3_by_1",
                "typeString": "int_const 3"
              },
              "value": "3"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 387,
            "mutability": "constant",
            "name": "REGISTRATION_AMOUNT",
            "nameLocation": "546:19:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "529:40:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 385,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "529:7:5",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 386,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "568:1:5",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "id": 390,
            "libraryName": {
              "id": 388,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1430,
              "src": "582:8:5"
            },
            "nodeType": "UsingForDirective",
            "src": "576:27:5",
            "typeName": {
              "id": 389,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "595:7:5",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Voting.Candidate",
            "id": 399,
            "members": [
              {
                "constant": false,
                "id": 392,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "643:4:5",
                "nodeType": "VariableDeclaration",
                "scope": 399,
                "src": "636:11:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 391,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "636:6:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 394,
                "mutability": "mutable",
                "name": "age",
                "nameLocation": "663:3:5",
                "nodeType": "VariableDeclaration",
                "scope": 399,
                "src": "657:9:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                },
                "typeName": {
                  "id": 393,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "657:5:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 396,
                "mutability": "mutable",
                "name": "cult",
                "nameLocation": "683:4:5",
                "nodeType": "VariableDeclaration",
                "scope": 399,
                "src": "676:11:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 395,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "676:6:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 398,
                "mutability": "mutable",
                "name": "votes",
                "nameLocation": "705:5:5",
                "nodeType": "VariableDeclaration",
                "scope": 399,
                "src": "697:13:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 397,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "697:7:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "616:9:5",
            "nodeType": "StructDefinition",
            "scope": 1118,
            "src": "609:108:5",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Vote",
            "id": 406,
            "members": [
              {
                "constant": false,
                "id": 401,
                "mutability": "mutable",
                "name": "candidateId",
                "nameLocation": "753:11:5",
                "nodeType": "VariableDeclaration",
                "scope": 406,
                "src": "745:19:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 400,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "745:7:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 403,
                "mutability": "mutable",
                "name": "amount",
                "nameLocation": "782:6:5",
                "nodeType": "VariableDeclaration",
                "scope": 406,
                "src": "774:14:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 402,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "774:7:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 405,
                "mutability": "mutable",
                "name": "hasVoted",
                "nameLocation": "803:8:5",
                "nodeType": "VariableDeclaration",
                "scope": 406,
                "src": "798:13:5",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 404,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "798:4:5",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Vote",
            "nameLocation": "730:4:5",
            "nodeType": "StructDefinition",
            "scope": 1118,
            "src": "723:95:5",
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 408,
            "mutability": "mutable",
            "name": "king",
            "nameLocation": "832:4:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "824:12:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 407,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "824:7:5",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 411,
            "mutability": "mutable",
            "name": "wakandaToken",
            "nameLocation": "849:12:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "843:18:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Token_$371",
              "typeString": "contract Token"
            },
            "typeName": {
              "id": 410,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 409,
                "name": "Token",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 371,
                "src": "843:5:5"
              },
              "referencedDeclaration": 371,
              "src": "843:5:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Token_$371",
                "typeString": "contract Token"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 415,
            "mutability": "mutable",
            "name": "isRegistered",
            "nameLocation": "894:12:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "868:38:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 414,
              "keyType": {
                "id": 412,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "877:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "868:25:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 413,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "888:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 419,
            "mutability": "mutable",
            "name": "nonces",
            "nameLocation": "941:6:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "912:35:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 418,
              "keyType": {
                "id": 416,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "921:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "912:28:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 417,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "932:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 424,
            "mutability": "mutable",
            "name": "votes",
            "nameLocation": "979:5:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "953:31:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
              "typeString": "mapping(address => struct Voting.Vote)"
            },
            "typeName": {
              "id": 423,
              "keyType": {
                "id": 420,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "962:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "953:25:5",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
                "typeString": "mapping(address => struct Voting.Vote)"
              },
              "valueType": {
                "id": 422,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 421,
                  "name": "Vote",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 406,
                  "src": "973:4:5"
                },
                "referencedDeclaration": 406,
                "src": "973:4:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Vote_$406_storage_ptr",
                  "typeString": "struct Voting.Vote"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 428,
            "mutability": "mutable",
            "name": "candidates",
            "nameLocation": "1003:10:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "991:22:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
              "typeString": "struct Voting.Candidate[]"
            },
            "typeName": {
              "baseType": {
                "id": 426,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 425,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 399,
                  "src": "991:9:5"
                },
                "referencedDeclaration": 399,
                "src": "991:9:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$399_storage_ptr",
                  "typeString": "struct Voting.Candidate"
                }
              },
              "id": 427,
              "nodeType": "ArrayTypeName",
              "src": "991:11:5",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Candidate[]"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 431,
            "mutability": "mutable",
            "name": "electionWinners",
            "nameLocation": "1030:15:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "1020:25:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 429,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1020:7:5",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 430,
              "nodeType": "ArrayTypeName",
              "src": "1020:9:5",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "internal"
          },
          {
            "anonymous": false,
            "id": 436,
            "name": "NewChallenger",
            "nameLocation": "1057:13:5",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 435,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 434,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "challenger",
                  "nameLocation": "1081:10:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 436,
                  "src": "1071:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Candidate_$399_memory_ptr",
                    "typeString": "struct Voting.Candidate"
                  },
                  "typeName": {
                    "id": 433,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 432,
                      "name": "Candidate",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 399,
                      "src": "1071:9:5"
                    },
                    "referencedDeclaration": 399,
                    "src": "1071:9:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Candidate_$399_storage_ptr",
                      "typeString": "struct Voting.Candidate"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1070:22:5"
            },
            "src": "1051:42:5"
          },
          {
            "constant": false,
            "id": 438,
            "mutability": "mutable",
            "name": "hasEnded",
            "nameLocation": "1104:8:5",
            "nodeType": "VariableDeclaration",
            "scope": 1118,
            "src": "1099:13:5",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 437,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1099:4:5",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 475,
              "nodeType": "Block",
              "src": "1318:164:5",
              "statements": [
                {
                  "expression": {
                    "id": 461,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 458,
                      "name": "king",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 408,
                      "src": "1329:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 459,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1336:3:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 460,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1336:10:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1329:17:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 462,
                  "nodeType": "ExpressionStatement",
                  "src": "1329:17:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 464,
                        "name": "_candidateNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 445,
                        "src": "1372:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      },
                      {
                        "id": 465,
                        "name": "_candidateAges",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 448,
                        "src": "1389:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                          "typeString": "uint8[] memory"
                        }
                      },
                      {
                        "id": 466,
                        "name": "_candidateCults",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 451,
                        "src": "1405:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                          "typeString": "uint8[] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      ],
                      "id": 463,
                      "name": "_addCandidates",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 820,
                      "src": "1357:14:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$_t_array$_t_uint8_$dyn_memory_ptr_$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (string memory[] memory,uint8[] memory,string memory[] memory)"
                      }
                    },
                    "id": 467,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1357:64:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 468,
                  "nodeType": "ExpressionStatement",
                  "src": "1357:64:5"
                },
                {
                  "expression": {
                    "id": 473,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 469,
                      "name": "wakandaToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 411,
                      "src": "1432:12:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Token_$371",
                        "typeString": "contract Token"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 471,
                          "name": "_wakandaTokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 442,
                          "src": "1453:20:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 470,
                        "name": "Token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 371,
                        "src": "1447:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Token_$371_$",
                          "typeString": "type(contract Token)"
                        }
                      },
                      "id": 472,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1447:27:5",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Token_$371",
                        "typeString": "contract Token"
                      }
                    },
                    "src": "1432:42:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Token_$371",
                      "typeString": "contract Token"
                    }
                  },
                  "id": 474,
                  "nodeType": "ExpressionStatement",
                  "src": "1432:42:5"
                }
              ]
            },
            "id": 476,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 454,
                    "name": "_electionName",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 440,
                    "src": "1294:13:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "hexValue": "312e302e30",
                    "id": 455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1309:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c",
                      "typeString": "literal_string \"1.0.0\""
                    },
                    "value": "1.0.0"
                  }
                ],
                "id": 456,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 453,
                  "name": "EIP712",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1974,
                  "src": "1287:6:5"
                },
                "nodeType": "ModifierInvocation",
                "src": "1287:30:5"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 452,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 440,
                  "mutability": "mutable",
                  "name": "_electionName",
                  "nameLocation": "1145:13:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "1131:27:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 439,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1131:6:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 442,
                  "mutability": "mutable",
                  "name": "_wakandaTokenAddress",
                  "nameLocation": "1168:20:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "1160:28:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 441,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1160:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 445,
                  "mutability": "mutable",
                  "name": "_candidateNames",
                  "nameLocation": "1206:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "1190:31:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 443,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "1190:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 444,
                    "nodeType": "ArrayTypeName",
                    "src": "1190:8:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 448,
                  "mutability": "mutable",
                  "name": "_candidateAges",
                  "nameLocation": "1238:14:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "1223:29:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 446,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "1223:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 447,
                    "nodeType": "ArrayTypeName",
                    "src": "1223:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 451,
                  "mutability": "mutable",
                  "name": "_candidateCults",
                  "nameLocation": "1270:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 476,
                  "src": "1254:31:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 449,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "1254:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 450,
                    "nodeType": "ArrayTypeName",
                    "src": "1254:8:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1130:156:5"
            },
            "returnParameters": {
              "id": 457,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1318:0:5"
            },
            "scope": 1118,
            "src": "1119:363:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 496,
              "nodeType": "Block",
              "src": "1658:137:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 486,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 483,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1685:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 484,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1685:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 485,
                          "name": "king",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "1699:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1685:18:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79204b494e472063616e20656e642074686520656c656374696f6e2e",
                        "id": 487,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1705:33:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a1b605d168fe5784a734412dcb52e0d48f9d8632eac7605d6d7e8c88947b8561",
                          "typeString": "literal_string \"Only KING can end the election.\""
                        },
                        "value": "Only KING can end the election."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a1b605d168fe5784a734412dcb52e0d48f9d8632eac7605d6d7e8c88947b8561",
                          "typeString": "literal_string \"Only KING can end the election.\""
                        }
                      ],
                      "id": 482,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1677:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1677:62:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 489,
                  "nodeType": "ExpressionStatement",
                  "src": "1677:62:5"
                },
                {
                  "expression": {
                    "id": 492,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 490,
                      "name": "hasEnded",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 438,
                      "src": "1750:8:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 491,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1761:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1750:15:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 493,
                  "nodeType": "ExpressionStatement",
                  "src": "1750:15:5"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 494,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1783:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 481,
                  "id": 495,
                  "nodeType": "Return",
                  "src": "1776:11:5"
                }
              ]
            },
            "documentation": {
              "id": 477,
              "nodeType": "StructuredDocumentation",
              "src": "1488:117:5",
              "text": "@notice Ends the election - there is no voting after\n@return Boolean : True if successful"
            },
            "functionSelector": "7107852a",
            "id": 497,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "endTheElection",
            "nameLocation": "1619:14:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 478,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1633:2:5"
            },
            "returnParameters": {
              "id": 481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 480,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 497,
                  "src": "1652:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 479,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1652:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1651:6:5"
            },
            "scope": 1118,
            "src": "1610:185:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 529,
              "nodeType": "Block",
              "src": "2044:278:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 510,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 506,
                            "name": "isRegistered",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 415,
                            "src": "2071:12:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 508,
                          "indexExpression": {
                            "id": 507,
                            "name": "_citizen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 500,
                            "src": "2084:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2071:22:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2097:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "2071:30:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520636974697a656e20686173206265656e2072656769737465726564202d20746865726520617265206e6f206d756c7469706c6520726567697374726174696f6e732e",
                        "id": 511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2103:72:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_a70c582a78fbd2cd7b93c04f3d3b505e997d06391caf7e37fb55139c032d1a9d",
                          "typeString": "literal_string \"The citizen has been registered - there are no multiple registrations.\""
                        },
                        "value": "The citizen has been registered - there are no multiple registrations."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_a70c582a78fbd2cd7b93c04f3d3b505e997d06391caf7e37fb55139c032d1a9d",
                          "typeString": "literal_string \"The citizen has been registered - there are no multiple registrations.\""
                        }
                      ],
                      "id": 505,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "2063:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 512,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2063:113:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 513,
                  "nodeType": "ExpressionStatement",
                  "src": "2063:113:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 517,
                        "name": "_citizen",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 500,
                        "src": "2223:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 518,
                        "name": "REGISTRATION_AMOUNT",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 387,
                        "src": "2233:19:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 514,
                        "name": "wakandaToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 411,
                        "src": "2187:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Token_$371",
                          "typeString": "contract Token"
                        }
                      },
                      "id": 516,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "usingRegistrationRight",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 163,
                      "src": "2187:35:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2187:66:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 520,
                  "nodeType": "ExpressionStatement",
                  "src": "2187:66:5"
                },
                {
                  "expression": {
                    "id": 525,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 521,
                        "name": "isRegistered",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 415,
                        "src": "2263:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 523,
                      "indexExpression": {
                        "id": 522,
                        "name": "_citizen",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 500,
                        "src": "2276:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2263:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 524,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2288:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "2263:29:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 526,
                  "nodeType": "ExpressionStatement",
                  "src": "2263:29:5"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 527,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "2310:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 504,
                  "id": 528,
                  "nodeType": "Return",
                  "src": "2303:11:5"
                }
              ]
            },
            "documentation": {
              "id": 498,
              "nodeType": "StructuredDocumentation",
              "src": "1801:180:5",
              "text": "@notice Registers the _citizen to be able to participate in the elections\n@param _citizen Citizen's address\n@return Boolean : True if successful"
            },
            "functionSelector": "4420e486",
            "id": 530,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nameLocation": "1995:8:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 501,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 500,
                  "mutability": "mutable",
                  "name": "_citizen",
                  "nameLocation": "2012:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 530,
                  "src": "2004:16:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 499,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2004:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2003:18:5"
            },
            "returnParameters": {
              "id": 504,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 503,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 530,
                  "src": "2038:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 502,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2038:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2037:6:5"
            },
            "scope": 1118,
            "src": "1986:336:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 542,
              "nodeType": "Block",
              "src": "2597:55:5",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 538,
                      "name": "isRegistered",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 415,
                      "src": "2615:12:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 540,
                    "indexExpression": {
                      "id": 539,
                      "name": "_citizenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 533,
                      "src": "2628:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "2615:29:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 537,
                  "id": 541,
                  "nodeType": "Return",
                  "src": "2608:36:5"
                }
              ]
            },
            "documentation": {
              "id": 531,
              "nodeType": "StructuredDocumentation",
              "src": "2328:183:5",
              "text": "@notice Returns the registration status of _citizenAddress\n@param _citizenAddress Citizen's address\n@return Boolean : True if citizen is registered"
            },
            "functionSelector": "0cf2ee64",
            "id": 543,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "citizenIsRegistered",
            "nameLocation": "2525:19:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 533,
                  "mutability": "mutable",
                  "name": "_citizenAddress",
                  "nameLocation": "2553:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 543,
                  "src": "2545:23:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 532,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2545:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2544:25:5"
            },
            "returnParameters": {
              "id": 537,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 536,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 543,
                  "src": "2591:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 535,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "2591:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2590:6:5"
            },
            "scope": 1118,
            "src": "2516:136:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 558,
              "nodeType": "Block",
              "src": "2905:59:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 552,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "2922:3:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "2922:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 554,
                        "name": "_candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 546,
                        "src": "2934:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 555,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 548,
                        "src": "2948:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 551,
                      "name": "_vote",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 943,
                      "src": "2916:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 556,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2916:40:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 557,
                  "nodeType": "ExpressionStatement",
                  "src": "2916:40:5"
                }
              ]
            },
            "documentation": {
              "id": 544,
              "nodeType": "StructuredDocumentation",
              "src": "2658:182:5",
              "text": "@notice Voting function - casts a vote from msg.sender\n@param _candidateId Candidate ID\n@param _amount Amount of WKND tokens to be used for voting"
            },
            "functionSelector": "b384abef",
            "id": 559,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "vote",
            "nameLocation": "2854:4:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 549,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 546,
                  "mutability": "mutable",
                  "name": "_candidateId",
                  "nameLocation": "2867:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "2859:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 545,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2859:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 548,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "2889:7:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 559,
                  "src": "2881:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 547,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2881:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2858:39:5"
            },
            "returnParameters": {
              "id": 550,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2905:0:5"
            },
            "scope": 1118,
            "src": "2845:119:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 572,
              "nodeType": "Block",
              "src": "3212:56:5",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 568,
                      "name": "votes",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 424,
                      "src": "3230:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
                        "typeString": "mapping(address => struct Voting.Vote storage ref)"
                      }
                    },
                    "id": 570,
                    "indexExpression": {
                      "id": 569,
                      "name": "_citizenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 562,
                      "src": "3236:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "3230:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Vote_$406_storage",
                      "typeString": "struct Voting.Vote storage ref"
                    }
                  },
                  "functionReturnParameters": 567,
                  "id": 571,
                  "nodeType": "Return",
                  "src": "3223:29:5"
                }
              ]
            },
            "documentation": {
              "id": 560,
              "nodeType": "StructuredDocumentation",
              "src": "2970:153:5",
              "text": "@notice Returns the voting status of _citizenAddress\n@param _citizenAddress Citizen's address\n@return The Vote struct"
            },
            "functionSelector": "30226efe",
            "id": 573,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "citizenHasVoted",
            "nameLocation": "3137:15:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 563,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 562,
                  "mutability": "mutable",
                  "name": "_citizenAddress",
                  "nameLocation": "3161:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 573,
                  "src": "3153:23:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3153:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3152:25:5"
            },
            "returnParameters": {
              "id": 567,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 566,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 573,
                  "src": "3199:11:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Vote_$406_memory_ptr",
                    "typeString": "struct Voting.Vote"
                  },
                  "typeName": {
                    "id": 565,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 564,
                      "name": "Vote",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 406,
                      "src": "3199:4:5"
                    },
                    "referencedDeclaration": 406,
                    "src": "3199:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Vote_$406_storage_ptr",
                      "typeString": "struct Voting.Vote"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3198:13:5"
            },
            "scope": 1118,
            "src": "3128:140:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 618,
              "nodeType": "Block",
              "src": "3479:227:5",
              "statements": [
                {
                  "assignments": [
                    585
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 585,
                      "mutability": "mutable",
                      "name": "winners",
                      "nameLocation": "3513:7:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 618,
                      "src": "3494:26:5",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr",
                        "typeString": "struct Voting.Candidate[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 583,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 582,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 399,
                            "src": "3494:9:5"
                          },
                          "referencedDeclaration": 399,
                          "src": "3494:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$399_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 584,
                        "nodeType": "ArrayTypeName",
                        "src": "3494:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 593,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 590,
                          "name": "electionWinners",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "3539:15:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                            "typeString": "uint256[] storage ref"
                          }
                        },
                        "id": 591,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "3539:22:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 589,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "NewExpression",
                      "src": "3523:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (struct Voting.Candidate memory[] memory)"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 587,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 586,
                            "name": "Candidate",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 399,
                            "src": "3527:9:5"
                          },
                          "referencedDeclaration": 399,
                          "src": "3527:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Candidate_$399_storage_ptr",
                            "typeString": "struct Voting.Candidate"
                          }
                        },
                        "id": 588,
                        "nodeType": "ArrayTypeName",
                        "src": "3527:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr",
                          "typeString": "struct Voting.Candidate[]"
                        }
                      }
                    },
                    "id": 592,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3523:39:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3494:68:5"
                },
                {
                  "body": {
                    "expression": {
                      "id": 613,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftHandSide": {
                        "baseExpression": {
                          "id": 605,
                          "name": "winners",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 585,
                          "src": "3623:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr",
                            "typeString": "struct Voting.Candidate memory[] memory"
                          }
                        },
                        "id": 607,
                        "indexExpression": {
                          "id": 606,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 595,
                          "src": "3631:1:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": true,
                        "nodeType": "IndexAccess",
                        "src": "3623:10:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$399_memory_ptr",
                          "typeString": "struct Voting.Candidate memory"
                        }
                      },
                      "nodeType": "Assignment",
                      "operator": "=",
                      "rightHandSide": {
                        "baseExpression": {
                          "id": 608,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 428,
                          "src": "3636:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 612,
                        "indexExpression": {
                          "baseExpression": {
                            "id": 609,
                            "name": "electionWinners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "3647:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 611,
                          "indexExpression": {
                            "id": 610,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 595,
                            "src": "3663:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3647:18:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "3636:30:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$399_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "src": "3623:43:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$399_memory_ptr",
                        "typeString": "struct Voting.Candidate memory"
                      }
                    },
                    "id": 614,
                    "nodeType": "ExpressionStatement",
                    "src": "3623:43:5"
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 598,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 595,
                      "src": "3590:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 599,
                        "name": "electionWinners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "3594:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 600,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3594:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3590:26:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 615,
                  "initializationExpression": {
                    "assignments": [
                      595
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 595,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "3583:1:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 615,
                        "src": "3577:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 594,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "3577:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 597,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 596,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3587:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "3577:11:5"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 603,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "3618:3:5",
                      "subExpression": {
                        "id": 602,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 595,
                        "src": "3620:1:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 604,
                    "nodeType": "ExpressionStatement",
                    "src": "3618:3:5"
                  },
                  "nodeType": "ForStatement",
                  "src": "3572:94:5"
                },
                {
                  "expression": {
                    "id": 616,
                    "name": "winners",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 585,
                    "src": "3683:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr",
                      "typeString": "struct Voting.Candidate memory[] memory"
                    }
                  },
                  "functionReturnParameters": 580,
                  "id": 617,
                  "nodeType": "Return",
                  "src": "3676:14:5"
                }
              ]
            },
            "documentation": {
              "id": 574,
              "nodeType": "StructuredDocumentation",
              "src": "3274:131:5",
              "text": "@notice Returns the Election's top 3 candidates (winning candidates)\n@return An array of top candidates"
            },
            "functionSelector": "377968d4",
            "id": 619,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningCandidates",
            "nameLocation": "3419:17:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 575,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3436:2:5"
            },
            "returnParameters": {
              "id": 580,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 579,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 619,
                  "src": "3460:18:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Candidate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 577,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 576,
                        "name": "Candidate",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 399,
                        "src": "3460:9:5"
                      },
                      "referencedDeclaration": 399,
                      "src": "3460:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$399_storage_ptr",
                        "typeString": "struct Voting.Candidate"
                      }
                    },
                    "id": 578,
                    "nodeType": "ArrayTypeName",
                    "src": "3460:11:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Candidate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3459:20:5"
            },
            "scope": 1118,
            "src": "3410:296:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 629,
              "nodeType": "Block",
              "src": "3895:36:5",
              "statements": [
                {
                  "expression": {
                    "id": 627,
                    "name": "candidates",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 428,
                    "src": "3913:10:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                      "typeString": "struct Voting.Candidate storage ref[] storage ref"
                    }
                  },
                  "functionReturnParameters": 626,
                  "id": 628,
                  "nodeType": "Return",
                  "src": "3906:17:5"
                }
              ]
            },
            "documentation": {
              "id": 620,
              "nodeType": "StructuredDocumentation",
              "src": "3712:109:5",
              "text": "@notice Returns an array of all candidates involved in the election\n@return Array"
            },
            "functionSelector": "de90bb6f",
            "id": 630,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "seeAllCandidates",
            "nameLocation": "3835:16:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 621,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3851:2:5"
            },
            "returnParameters": {
              "id": 626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 625,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 630,
                  "src": "3875:18:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Candidate_$399_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Voting.Candidate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 623,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 622,
                        "name": "Candidate",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 399,
                        "src": "3875:9:5"
                      },
                      "referencedDeclaration": 399,
                      "src": "3875:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Candidate_$399_storage_ptr",
                        "typeString": "struct Voting.Candidate"
                      }
                    },
                    "id": 624,
                    "nodeType": "ArrayTypeName",
                    "src": "3875:11:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr",
                      "typeString": "struct Voting.Candidate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3874:20:5"
            },
            "scope": 1118,
            "src": "3826:105:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 642,
              "nodeType": "Block",
              "src": "4158:56:5",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 638,
                      "name": "nonces",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 419,
                      "src": "4176:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 640,
                    "indexExpression": {
                      "id": 639,
                      "name": "citizenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 633,
                      "src": "4183:14:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4176:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 637,
                  "id": 641,
                  "nodeType": "Return",
                  "src": "4169:29:5"
                }
              ]
            },
            "documentation": {
              "id": 631,
              "nodeType": "StructuredDocumentation",
              "src": "3937:145:5",
              "text": "@notice Returns a nonce fo the specified citizenAddress\n@param citizenAddress Citizen's address\n@return Nonce"
            },
            "functionSelector": "2d0335ab",
            "id": 643,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getNonce",
            "nameLocation": "4096:8:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 633,
                  "mutability": "mutable",
                  "name": "citizenAddress",
                  "nameLocation": "4113:14:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 643,
                  "src": "4105:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 632,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4105:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4104:24:5"
            },
            "returnParameters": {
              "id": 637,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 636,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 643,
                  "src": "4150:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 635,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4150:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4149:9:5"
            },
            "scope": 1118,
            "src": "4087:127:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 676,
              "nodeType": "Block",
              "src": "4605:423:5",
              "statements": [
                {
                  "assignments": [
                    656
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 656,
                      "mutability": "mutable",
                      "name": "nonce",
                      "nameLocation": "4624:5:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 676,
                      "src": "4616:13:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 655,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4616:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 660,
                  "initialValue": {
                    "baseExpression": {
                      "id": 657,
                      "name": "nonces",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 419,
                      "src": "4632:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 659,
                    "indexExpression": {
                      "id": 658,
                      "name": "citizenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 646,
                      "src": "4639:14:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "4632:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4616:38:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "hexValue": "766f7465286164647265737320636974697a656e416464726573732c75696e743235362063616e64696461746549642c75696e7432353620616d6f756e742c75696e74323536206e6f6e636529",
                                    "id": 666,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4775:79:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_a56f781f7251d29fca13933d69c34316ea277f967c4a968f77db62d983fe1120",
                                      "typeString": "literal_string \"vote(address citizenAddress,uint256 candidateId,uint256 amount,uint256 nonce)\""
                                    },
                                    "value": "vote(address citizenAddress,uint256 candidateId,uint256 amount,uint256 nonce)"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_a56f781f7251d29fca13933d69c34316ea277f967c4a968f77db62d983fe1120",
                                      "typeString": "literal_string \"vote(address citizenAddress,uint256 candidateId,uint256 amount,uint256 nonce)\""
                                    }
                                  ],
                                  "id": 665,
                                  "name": "keccak256",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -8,
                                  "src": "4765:9:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                    "typeString": "function (bytes memory) pure returns (bytes32)"
                                  }
                                },
                                "id": 667,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4765:90:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 668,
                                "name": "citizenAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 646,
                                "src": "4877:14:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "id": 669,
                                "name": "candidateId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 648,
                                "src": "4913:11:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 670,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 650,
                                "src": "4946:6:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "id": 671,
                                "name": "nonce",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 656,
                                "src": "4974:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 663,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "4729:3:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 664,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encode",
                              "nodeType": "MemberAccess",
                              "src": "4729:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 672,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "4729:268:5",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 662,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -8,
                          "src": "4702:9:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 673,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4702:309:5",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 661,
                      "name": "_hashTypedDataV4",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1973,
                      "src": "4672:16:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) view returns (bytes32)"
                      }
                    },
                    "id": 674,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4672:349:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 654,
                  "id": 675,
                  "nodeType": "Return",
                  "src": "4665:356:5"
                }
              ]
            },
            "documentation": {
              "id": 644,
              "nodeType": "StructuredDocumentation",
              "src": "4220:271:5",
              "text": "@notice Returns a digest that will be used in verification of a signature\n@param citizenAddress Citizen's address\n@param candidateId Candidate's ID\n@param amount Amount of WKND tokens to be used in voting\n@return Digest"
            },
            "functionSelector": "b8d06bc4",
            "id": 677,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getDigest",
            "nameLocation": "4505:9:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 651,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 646,
                  "mutability": "mutable",
                  "name": "citizenAddress",
                  "nameLocation": "4523:14:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 677,
                  "src": "4515:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 645,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4515:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 648,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "4547:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 677,
                  "src": "4539:19:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 647,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4539:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 650,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4568:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 677,
                  "src": "4560:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 649,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4560:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4514:61:5"
            },
            "returnParameters": {
              "id": 654,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 653,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 677,
                  "src": "4597:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 652,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4597:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4596:9:5"
            },
            "scope": 1118,
            "src": "4496:532:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 693,
              "nodeType": "Block",
              "src": "5301:57:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 689,
                        "name": "digest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 680,
                        "src": "5333:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 690,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 682,
                        "src": "5341:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 687,
                        "name": "ECDSA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1820,
                        "src": "5319:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_ECDSA_$1820_$",
                          "typeString": "type(library ECDSA)"
                        }
                      },
                      "id": 688,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "recover",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1586,
                      "src": "5319:13:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
                        "typeString": "function (bytes32,bytes memory) pure returns (address)"
                      }
                    },
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5319:32:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 686,
                  "id": 692,
                  "nodeType": "Return",
                  "src": "5311:40:5"
                }
              ]
            },
            "documentation": {
              "id": 678,
              "nodeType": "StructuredDocumentation",
              "src": "5038:168:5",
              "text": "@notice Return the signer of a message\n@param digest Digested message\n@param signature Singature\n@return Signer of a message"
            },
            "functionSelector": "f7b2ec0d",
            "id": 694,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getSigner",
            "nameLocation": "5220:9:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 683,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 680,
                  "mutability": "mutable",
                  "name": "digest",
                  "nameLocation": "5238:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "5230:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 679,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5230:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 682,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "5261:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "5246:24:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 681,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5246:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5229:42:5"
            },
            "returnParameters": {
              "id": 686,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 685,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "5293:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 684,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5293:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5292:9:5"
            },
            "scope": 1118,
            "src": "5211:147:5",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 749,
              "nodeType": "Block",
              "src": "5768:373:5",
              "statements": [
                {
                  "assignments": [
                    707
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 707,
                      "mutability": "mutable",
                      "name": "digest",
                      "nameLocation": "5787:6:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 749,
                      "src": "5779:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 706,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "5779:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 713,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 709,
                        "name": "citizenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 699,
                        "src": "5806:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 710,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 701,
                        "src": "5822:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 711,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 703,
                        "src": "5835:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 708,
                      "name": "getDigest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 677,
                      "src": "5796:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (address,uint256,uint256) view returns (bytes32)"
                      }
                    },
                    "id": 712,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5796:46:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5779:63:5"
                },
                {
                  "assignments": [
                    715
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 715,
                      "mutability": "mutable",
                      "name": "signer",
                      "nameLocation": "5860:6:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 749,
                      "src": "5852:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 714,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5852:7:5",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 720,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 717,
                        "name": "digest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 707,
                        "src": "5879:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 718,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "5887:9:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "id": 716,
                      "name": "getSigner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 694,
                      "src": "5869:9:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_calldata_ptr_$returns$_t_address_$",
                        "typeString": "function (bytes32,bytes calldata) pure returns (address)"
                      }
                    },
                    "id": 719,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5869:28:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "5852:45:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 724,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 722,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 715,
                          "src": "5915:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 723,
                          "name": "citizenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 699,
                          "src": "5925:14:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5915:24:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "46756e6374696f6e2060766f746560203a20696e76616c6964207369676e6174757265",
                        "id": 725,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5941:37:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_8711b25749807eaf13485e927437cc7a837800fd2aa545eb533bac6c8053c7f9",
                          "typeString": "literal_string \"Function `vote` : invalid signature\""
                        },
                        "value": "Function `vote` : invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_8711b25749807eaf13485e927437cc7a837800fd2aa545eb533bac6c8053c7f9",
                          "typeString": "literal_string \"Function `vote` : invalid signature\""
                        }
                      ],
                      "id": 721,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5907:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 726,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5907:72:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 727,
                  "nodeType": "ExpressionStatement",
                  "src": "5907:72:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 734,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 729,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 715,
                          "src": "5997:6:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 732,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6015:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 731,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6007:7:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 730,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "6007:7:5",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 733,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6007:10:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "5997:20:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                        "id": 735,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6019:26:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                          "typeString": "literal_string \"ECDSA: invalid signature\""
                        },
                        "value": "ECDSA: invalid signature"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                          "typeString": "literal_string \"ECDSA: invalid signature\""
                        }
                      ],
                      "id": 728,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "5989:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 736,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5989:57:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 737,
                  "nodeType": "ExpressionStatement",
                  "src": "5989:57:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 739,
                        "name": "citizenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 699,
                        "src": "6063:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 740,
                        "name": "candidateId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 701,
                        "src": "6079:11:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 741,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 703,
                        "src": "6092:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 738,
                      "name": "_vote",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 943,
                      "src": "6057:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256,uint256)"
                      }
                    },
                    "id": 742,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6057:42:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 743,
                  "nodeType": "ExpressionStatement",
                  "src": "6057:42:5"
                },
                {
                  "expression": {
                    "id": 747,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "6110:24:5",
                    "subExpression": {
                      "baseExpression": {
                        "id": 744,
                        "name": "nonces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 419,
                        "src": "6110:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 746,
                      "indexExpression": {
                        "id": 745,
                        "name": "citizenAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 699,
                        "src": "6117:14:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "6110:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 748,
                  "nodeType": "ExpressionStatement",
                  "src": "6110:24:5"
                }
              ]
            },
            "documentation": {
              "id": 695,
              "nodeType": "StructuredDocumentation",
              "src": "5364:282:5",
              "text": "@notice Used for delegating a vote - can be called by anyone having a signature and rest of the information\n@param citizenAddress Citizen's address\n@param candidateId Candidate's ID\n@param amount Amount of WKND tokens to be used in voting"
            },
            "functionSelector": "1565507e",
            "id": 750,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "delegatedVote",
            "nameLocation": "5660:13:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 704,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 697,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "5689:9:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 750,
                  "src": "5674:24:5",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 696,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "5674:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 699,
                  "mutability": "mutable",
                  "name": "citizenAddress",
                  "nameLocation": "5708:14:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 750,
                  "src": "5700:22:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 698,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5700:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 701,
                  "mutability": "mutable",
                  "name": "candidateId",
                  "nameLocation": "5732:11:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 750,
                  "src": "5724:19:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 700,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5724:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 703,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "5753:6:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 750,
                  "src": "5745:14:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 702,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5745:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5673:87:5"
            },
            "returnParameters": {
              "id": 705,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5768:0:5"
            },
            "scope": 1118,
            "src": "5651:490:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 819,
              "nodeType": "Block",
              "src": "6501:516:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 767,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 764,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6520:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 765,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6520:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 766,
                          "name": "king",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 408,
                          "src": "6534:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6520:18:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79204b494e472063616e2073746172742061206e657720656c656374696f6e2021",
                        "id": 768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6540:38:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e2bbc0c540e35d2566966c68bdc14f2b0ea7877499b24cb475aa9e7823d9776e",
                          "typeString": "literal_string \"Only KING can start a new election !\""
                        },
                        "value": "Only KING can start a new election !"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e2bbc0c540e35d2566966c68bdc14f2b0ea7877499b24cb475aa9e7823d9776e",
                          "typeString": "literal_string \"Only KING can start a new election !\""
                        }
                      ],
                      "id": 763,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6512:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 769,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6512:67:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 770,
                  "nodeType": "ExpressionStatement",
                  "src": "6512:67:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 772,
                            "name": "_candidateNames",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 754,
                            "src": "6597:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "6597:22:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 774,
                            "name": "_candidateAges",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 757,
                            "src": "6623:14:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                              "typeString": "uint8[] memory"
                            }
                          },
                          "id": 775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "6623:21:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6597:47:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c656e677468206d69736d61746368202d2063616e646964617465206e616d657320616e6420616765732021",
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6646:46:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0e57b89fae90a09a0f43ad601610a3813ba7fa907ec273104fc3cbb663bfc677",
                          "typeString": "literal_string \"Length mismatch - candidate names and ages !\""
                        },
                        "value": "Length mismatch - candidate names and ages !"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0e57b89fae90a09a0f43ad601610a3813ba7fa907ec273104fc3cbb663bfc677",
                          "typeString": "literal_string \"Length mismatch - candidate names and ages !\""
                        }
                      ],
                      "id": 771,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6589:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6589:104:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 779,
                  "nodeType": "ExpressionStatement",
                  "src": "6589:104:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 785,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 781,
                            "name": "_candidateNames",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 754,
                            "src": "6711:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "id": 782,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "6711:22:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 783,
                            "name": "_candidateCults",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 760,
                            "src": "6737:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "id": 784,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "6737:22:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6711:48:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4c656e677468206d69736d61746368202d2063616e646964617465206e616d657320616e6420616765732021",
                        "id": 786,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6761:46:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_0e57b89fae90a09a0f43ad601610a3813ba7fa907ec273104fc3cbb663bfc677",
                          "typeString": "literal_string \"Length mismatch - candidate names and ages !\""
                        },
                        "value": "Length mismatch - candidate names and ages !"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_0e57b89fae90a09a0f43ad601610a3813ba7fa907ec273104fc3cbb663bfc677",
                          "typeString": "literal_string \"Length mismatch - candidate names and ages !\""
                        }
                      ],
                      "id": 780,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6703:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 787,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6703:105:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 788,
                  "nodeType": "ExpressionStatement",
                  "src": "6703:105:5"
                },
                {
                  "body": {
                    "id": 817,
                    "nodeType": "Block",
                    "src": "6871:139:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 804,
                                    "name": "_candidateNames",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 754,
                                    "src": "6918:15:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 806,
                                  "indexExpression": {
                                    "id": 805,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 790,
                                    "src": "6934:1:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6918:18:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "id": 807,
                                    "name": "_candidateAges",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 757,
                                    "src": "6943:14:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                                      "typeString": "uint8[] memory"
                                    }
                                  },
                                  "id": 809,
                                  "indexExpression": {
                                    "id": 808,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 790,
                                    "src": "6958:1:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6943:17:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                {
                                  "baseExpression": {
                                    "id": 810,
                                    "name": "_candidateCults",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 760,
                                    "src": "6968:15:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 812,
                                  "indexExpression": {
                                    "id": 811,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 790,
                                    "src": "6984:1:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "6968:18:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 813,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6995:1:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 803,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 399,
                                "src": "6901:9:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$399_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 814,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "age",
                                "cult",
                                "votes"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "6901:97:5",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$399_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$399_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 800,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 428,
                              "src": "6885:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 802,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "6885:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$399_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$399_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6885:114:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 816,
                        "nodeType": "ExpressionStatement",
                        "src": "6885:114:5"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 796,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 793,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 790,
                      "src": "6838:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 794,
                        "name": "_candidateNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 754,
                        "src": "6842:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      },
                      "id": 795,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "6842:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6838:26:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 818,
                  "initializationExpression": {
                    "assignments": [
                      790
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 790,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "6831:1:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 818,
                        "src": "6823:9:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 789,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6823:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 792,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 791,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6835:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "6823:13:5"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 798,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "6866:3:5",
                      "subExpression": {
                        "id": 797,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 790,
                        "src": "6868:1:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 799,
                    "nodeType": "ExpressionStatement",
                    "src": "6866:3:5"
                  },
                  "nodeType": "ForStatement",
                  "src": "6819:191:5"
                }
              ]
            },
            "documentation": {
              "id": 751,
              "nodeType": "StructuredDocumentation",
              "src": "6146:220:5",
              "text": "@notice When deployed, instantiates the candidate array\n@param _candidateNames Candidate's Names\n@param _candidateAges Candidate's Ages\n@param _candidateCults Candidate's Cults"
            },
            "id": 820,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_addCandidates",
            "nameLocation": "6380:14:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 761,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 754,
                  "mutability": "mutable",
                  "name": "_candidateNames",
                  "nameLocation": "6411:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 820,
                  "src": "6395:31:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 752,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "6395:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 753,
                    "nodeType": "ArrayTypeName",
                    "src": "6395:8:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 757,
                  "mutability": "mutable",
                  "name": "_candidateAges",
                  "nameLocation": "6443:14:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 820,
                  "src": "6428:29:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint8_$dyn_memory_ptr",
                    "typeString": "uint8[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 755,
                      "name": "uint8",
                      "nodeType": "ElementaryTypeName",
                      "src": "6428:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 756,
                    "nodeType": "ArrayTypeName",
                    "src": "6428:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
                      "typeString": "uint8[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 760,
                  "mutability": "mutable",
                  "name": "_candidateCults",
                  "nameLocation": "6475:15:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 820,
                  "src": "6459:31:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 758,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "6459:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 759,
                    "nodeType": "ArrayTypeName",
                    "src": "6459:8:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6394:97:5"
            },
            "returnParameters": {
              "id": 762,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6501:0:5"
            },
            "scope": 1118,
            "src": "6371:646:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 942,
              "nodeType": "Block",
              "src": "7342:1377:5",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 833,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 831,
                          "name": "hasEnded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 438,
                          "src": "7361:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 832,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7373:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "7361:16:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "566f74696e6720666f72207468652063757272656e7420656c656374696f6e2068617320656e646564202e",
                        "id": 834,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7379:45:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3b38f2d0ee3b3c03b5783b19b51bc382b201ed592c6ecd1628f202d590f82324",
                          "typeString": "literal_string \"Voting for the current election has ended .\""
                        },
                        "value": "Voting for the current election has ended ."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3b38f2d0ee3b3c03b5783b19b51bc382b201ed592c6ecd1628f202d590f82324",
                          "typeString": "literal_string \"Voting for the current election has ended .\""
                        }
                      ],
                      "id": 830,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7353:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7353:72:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 836,
                  "nodeType": "ExpressionStatement",
                  "src": "7353:72:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 843,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 838,
                              "name": "votes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 424,
                              "src": "7443:5:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
                                "typeString": "mapping(address => struct Voting.Vote storage ref)"
                              }
                            },
                            "id": 840,
                            "indexExpression": {
                              "id": 839,
                              "name": "_citizen",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 823,
                              "src": "7449:8:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7443:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Vote_$406_storage",
                              "typeString": "struct Voting.Vote storage ref"
                            }
                          },
                          "id": 841,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "hasVoted",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 405,
                          "src": "7443:24:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 842,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7471:4:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "7443:32:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520636974697a656e20616c726561647920766f74656420696e2074686520656c656374696f6e202e",
                        "id": 844,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7477:45:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_10c8ad749e71a74f7e249efa3a99aa6c1544ab3da9d688f87f0b450ea1086bad",
                          "typeString": "literal_string \"The citizen already voted in the election .\""
                        },
                        "value": "The citizen already voted in the election ."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_10c8ad749e71a74f7e249efa3a99aa6c1544ab3da9d688f87f0b450ea1086bad",
                          "typeString": "literal_string \"The citizen already voted in the election .\""
                        }
                      ],
                      "id": 837,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7435:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 845,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7435:88:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 846,
                  "nodeType": "ExpressionStatement",
                  "src": "7435:88:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 850,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 848,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 827,
                          "src": "7541:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 849,
                          "name": "REGISTRATION_AMOUNT",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 387,
                          "src": "7552:19:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7541:30:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "54686520616d6f756e74206973206c6573736572207468616e2074686520524547495354524154494f4e20414d4f554e542e",
                        "id": 851,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7573:52:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_2e784848b4494ba2a850e33f095bc091633ac7bb6815ea49fbe7f24f7c206e6d",
                          "typeString": "literal_string \"The amount is lesser than the REGISTRATION AMOUNT.\""
                        },
                        "value": "The amount is lesser than the REGISTRATION AMOUNT."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_2e784848b4494ba2a850e33f095bc091633ac7bb6815ea49fbe7f24f7c206e6d",
                          "typeString": "literal_string \"The amount is lesser than the REGISTRATION AMOUNT.\""
                        }
                      ],
                      "id": 847,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7533:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 852,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7533:93:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 853,
                  "nodeType": "ExpressionStatement",
                  "src": "7533:93:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 858,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 855,
                          "name": "_candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 825,
                          "src": "7644:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "expression": {
                            "id": 856,
                            "name": "candidates",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 428,
                            "src": "7659:10:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                              "typeString": "struct Voting.Candidate storage ref[] storage ref"
                            }
                          },
                          "id": 857,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "7659:17:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7644:32:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5468652063616e6469646174652049442067726561746572207468616e20746865206e756d626572206f662063616e646964617465732021",
                        "id": 859,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7678:58:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_003775ffdd551a9a5f6186f98d7cfca364359cfe38f14aebaa8b741cdf00be38",
                          "typeString": "literal_string \"The candidate ID greater than the number of candidates !\""
                        },
                        "value": "The candidate ID greater than the number of candidates !"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_003775ffdd551a9a5f6186f98d7cfca364359cfe38f14aebaa8b741cdf00be38",
                          "typeString": "literal_string \"The candidate ID greater than the number of candidates !\""
                        }
                      ],
                      "id": 854,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "7636:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 860,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7636:101:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 861,
                  "nodeType": "ExpressionStatement",
                  "src": "7636:101:5"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 865,
                        "name": "_citizen",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 823,
                        "src": "7778:8:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 866,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 827,
                        "src": "7788:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 862,
                        "name": "wakandaToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 411,
                        "src": "7748:12:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Token_$371",
                          "typeString": "contract Token"
                        }
                      },
                      "id": 864,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "usingVotingRight",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 193,
                      "src": "7748:29:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 867,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7748:48:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 868,
                  "nodeType": "ExpressionStatement",
                  "src": "7748:48:5"
                },
                {
                  "expression": {
                    "id": 880,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 869,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 428,
                          "src": "7807:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 871,
                        "indexExpression": {
                          "id": 870,
                          "name": "_candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 825,
                          "src": "7818:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7807:24:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$399_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 872,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "votes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 398,
                      "src": "7807:30:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 878,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 827,
                          "src": "7875:7:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 873,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 428,
                              "src": "7840:10:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 875,
                            "indexExpression": {
                              "id": 874,
                              "name": "_candidateId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 825,
                              "src": "7851:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7840:24:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Candidate_$399_storage",
                              "typeString": "struct Voting.Candidate storage ref"
                            }
                          },
                          "id": 876,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "votes",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 398,
                          "src": "7840:30:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 877,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1294,
                        "src": "7840:34:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 879,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7840:43:5",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7807:76:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 881,
                  "nodeType": "ExpressionStatement",
                  "src": "7807:76:5"
                },
                {
                  "expression": {
                    "id": 887,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 882,
                          "name": "votes",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 424,
                          "src": "7893:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
                            "typeString": "mapping(address => struct Voting.Vote storage ref)"
                          }
                        },
                        "id": 884,
                        "indexExpression": {
                          "id": 883,
                          "name": "_citizen",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 823,
                          "src": "7899:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7893:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$406_storage",
                          "typeString": "struct Voting.Vote storage ref"
                        }
                      },
                      "id": 885,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "candidateId",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 401,
                      "src": "7893:27:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 886,
                      "name": "_candidateId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 825,
                      "src": "7923:12:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7893:42:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 888,
                  "nodeType": "ExpressionStatement",
                  "src": "7893:42:5"
                },
                {
                  "expression": {
                    "id": 894,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 889,
                          "name": "votes",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 424,
                          "src": "7945:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
                            "typeString": "mapping(address => struct Voting.Vote storage ref)"
                          }
                        },
                        "id": 891,
                        "indexExpression": {
                          "id": 890,
                          "name": "_citizen",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 823,
                          "src": "7951:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7945:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$406_storage",
                          "typeString": "struct Voting.Vote storage ref"
                        }
                      },
                      "id": 892,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "amount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 403,
                      "src": "7945:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 893,
                      "name": "_amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 827,
                      "src": "7970:7:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7945:32:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 895,
                  "nodeType": "ExpressionStatement",
                  "src": "7945:32:5"
                },
                {
                  "expression": {
                    "id": 901,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 896,
                          "name": "votes",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 424,
                          "src": "7987:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Vote_$406_storage_$",
                            "typeString": "mapping(address => struct Voting.Vote storage ref)"
                          }
                        },
                        "id": 898,
                        "indexExpression": {
                          "id": 897,
                          "name": "_citizen",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 823,
                          "src": "7993:8:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7987:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Vote_$406_storage",
                          "typeString": "struct Voting.Vote storage ref"
                        }
                      },
                      "id": 899,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "hasVoted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 405,
                      "src": "7987:24:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 900,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8014:4:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "7987:31:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 902,
                  "nodeType": "ExpressionStatement",
                  "src": "7987:31:5"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 907,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 904,
                          "name": "_candidateId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 825,
                          "src": "8053:12:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 903,
                        "name": "_isInElectionWinners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1059,
                        "src": "8032:20:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                          "typeString": "function (uint256) view returns (bool)"
                        }
                      },
                      "id": 905,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8032:34:5",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "66616c7365",
                      "id": 906,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8070:5:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "false"
                    },
                    "src": "8032:43:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 940,
                    "nodeType": "Block",
                    "src": "8592:121:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 937,
                            "name": "_sortElectionWinners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1027,
                            "src": "8645:20:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 938,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8645:22:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 939,
                        "nodeType": "ExpressionStatement",
                        "src": "8645:22:5"
                      }
                    ]
                  },
                  "id": 941,
                  "nodeType": "IfStatement",
                  "src": "8029:684:5",
                  "trueBody": {
                    "id": 936,
                    "nodeType": "Block",
                    "src": "8076:510:5",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 919,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 914,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 908,
                                  "name": "candidates",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 428,
                                  "src": "8137:10:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                                    "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                  }
                                },
                                "id": 910,
                                "indexExpression": {
                                  "id": 909,
                                  "name": "_candidateId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 825,
                                  "src": "8148:12:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8137:24:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Candidate_$399_storage",
                                  "typeString": "struct Voting.Candidate storage ref"
                                }
                              },
                              "id": 911,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "votes",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 398,
                              "src": "8137:30:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 912,
                                "name": "_getLastPlaceVotes",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1085,
                                "src": "8170:18:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view returns (uint256)"
                                }
                              },
                              "id": 913,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8170:20:5",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8137:53:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "||",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 918,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 915,
                                "name": "electionWinners",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 431,
                                "src": "8194:15:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                  "typeString": "uint256[] storage ref"
                                }
                              },
                              "id": 916,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "8194:22:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "id": 917,
                              "name": "ELECTION_WINNERS_LENGTH",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "8219:23:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "8194:48:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "8137:105:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 934,
                          "nodeType": "Block",
                          "src": "8461:102:5",
                          "statements": []
                        },
                        "id": 935,
                        "nodeType": "IfStatement",
                        "src": "8133:430:5",
                        "trueBody": {
                          "id": 933,
                          "nodeType": "Block",
                          "src": "8244:211:5",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 921,
                                    "name": "_candidateId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 825,
                                    "src": "8324:12:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 920,
                                  "name": "_insertIntoElectionWinners",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1117,
                                  "src": "8297:26:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                                    "typeString": "function (uint256)"
                                  }
                                },
                                "id": 922,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8297:40:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 923,
                              "nodeType": "ExpressionStatement",
                              "src": "8297:40:5"
                            },
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 924,
                                  "name": "_sortElectionWinners",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1027,
                                  "src": "8355:20:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                    "typeString": "function ()"
                                  }
                                },
                                "id": 925,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8355:22:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 926,
                              "nodeType": "ExpressionStatement",
                              "src": "8355:22:5"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 928,
                                      "name": "candidates",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 428,
                                      "src": "8414:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                      }
                                    },
                                    "id": 930,
                                    "indexExpression": {
                                      "id": 929,
                                      "name": "_candidateId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 825,
                                      "src": "8425:12:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "8414:24:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$399_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_struct$_Candidate_$399_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  ],
                                  "id": 927,
                                  "name": "NewChallenger",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 436,
                                  "src": "8400:13:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_struct$_Candidate_$399_memory_ptr_$returns$__$",
                                    "typeString": "function (struct Voting.Candidate memory)"
                                  }
                                },
                                "id": 931,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8400:39:5",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 932,
                              "nodeType": "EmitStatement",
                              "src": "8395:44:5"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 821,
              "nodeType": "StructuredDocumentation",
              "src": "7023:233:5",
              "text": "@notice Internal function which handles the voting\n@param _citizen Citizen's address\n@param _candidateId Candidate's ID\n@param _amount Amount of WKND tokens to be used in the voting process"
            },
            "id": 943,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_vote",
            "nameLocation": "7270:5:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 828,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 823,
                  "mutability": "mutable",
                  "name": "_citizen",
                  "nameLocation": "7284:8:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 943,
                  "src": "7276:16:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 822,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7276:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 825,
                  "mutability": "mutable",
                  "name": "_candidateId",
                  "nameLocation": "7302:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 943,
                  "src": "7294:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 824,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7294:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 827,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "7324:7:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 943,
                  "src": "7316:15:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 826,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "7316:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7275:57:5"
            },
            "returnParameters": {
              "id": 829,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7342:0:5"
            },
            "scope": 1118,
            "src": "7261:1458:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1026,
              "nodeType": "Block",
              "src": "8854:589:5",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 950,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 947,
                        "name": "electionWinners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "8868:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 948,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "8868:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 949,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8894:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "8868:27:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 952,
                  "nodeType": "IfStatement",
                  "src": "8865:39:5",
                  "trueBody": {
                    "functionReturnParameters": 946,
                    "id": 951,
                    "nodeType": "Return",
                    "src": "8897:7:5"
                  }
                },
                {
                  "body": {
                    "id": 1024,
                    "nodeType": "Block",
                    "src": "8967:470:5",
                    "statements": [
                      {
                        "body": {
                          "id": 1022,
                          "nodeType": "Block",
                          "src": "9032:395:5",
                          "statements": [
                            {
                              "assignments": [
                                980
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 980,
                                  "mutability": "mutable",
                                  "name": "currPlaceId",
                                  "nameLocation": "9058:11:5",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1022,
                                  "src": "9050:19:5",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 979,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9050:7:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 984,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 981,
                                  "name": "electionWinners",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 431,
                                  "src": "9072:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                    "typeString": "uint256[] storage ref"
                                  }
                                },
                                "id": 983,
                                "indexExpression": {
                                  "id": 982,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 954,
                                  "src": "9088:1:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "9072:18:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "9050:40:5"
                            },
                            {
                              "assignments": [
                                986
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 986,
                                  "mutability": "mutable",
                                  "name": "nextPlaceId",
                                  "nameLocation": "9116:11:5",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1022,
                                  "src": "9108:19:5",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 985,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "9108:7:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 990,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 987,
                                  "name": "electionWinners",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 431,
                                  "src": "9130:15:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                    "typeString": "uint256[] storage ref"
                                  }
                                },
                                "id": 989,
                                "indexExpression": {
                                  "id": 988,
                                  "name": "j",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 967,
                                  "src": "9146:1:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "9130:18:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "9108:40:5"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 999,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 991,
                                      "name": "candidates",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 428,
                                      "src": "9169:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                      }
                                    },
                                    "id": 993,
                                    "indexExpression": {
                                      "id": 992,
                                      "name": "currPlaceId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 980,
                                      "src": "9180:11:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "9169:23:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$399_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  },
                                  "id": 994,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "votes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 398,
                                  "src": "9169:29:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 995,
                                      "name": "candidates",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 428,
                                      "src": "9201:10:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                      }
                                    },
                                    "id": 997,
                                    "indexExpression": {
                                      "id": 996,
                                      "name": "nextPlaceId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 986,
                                      "src": "9212:11:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "9201:23:5",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$399_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  },
                                  "id": 998,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "votes",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 398,
                                  "src": "9201:29:5",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "9169:61:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1021,
                              "nodeType": "IfStatement",
                              "src": "9166:247:5",
                              "trueBody": {
                                "id": 1020,
                                "nodeType": "Block",
                                "src": "9231:182:5",
                                "statements": [
                                  {
                                    "assignments": [
                                      1001
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 1001,
                                        "mutability": "mutable",
                                        "name": "temp",
                                        "nameLocation": "9261:4:5",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 1020,
                                        "src": "9253:12:5",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 1000,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "9253:7:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 1005,
                                    "initialValue": {
                                      "baseExpression": {
                                        "id": 1002,
                                        "name": "electionWinners",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 431,
                                        "src": "9268:15:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                          "typeString": "uint256[] storage ref"
                                        }
                                      },
                                      "id": 1004,
                                      "indexExpression": {
                                        "id": 1003,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 954,
                                        "src": "9284:1:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint8",
                                          "typeString": "uint8"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "9268:18:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "9253:33:5"
                                  },
                                  {
                                    "expression": {
                                      "id": 1012,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1006,
                                          "name": "electionWinners",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 431,
                                          "src": "9308:15:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                            "typeString": "uint256[] storage ref"
                                          }
                                        },
                                        "id": 1008,
                                        "indexExpression": {
                                          "id": 1007,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 954,
                                          "src": "9324:1:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "9308:18:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "baseExpression": {
                                          "id": 1009,
                                          "name": "electionWinners",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 431,
                                          "src": "9329:15:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                            "typeString": "uint256[] storage ref"
                                          }
                                        },
                                        "id": 1011,
                                        "indexExpression": {
                                          "id": 1010,
                                          "name": "j",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 967,
                                          "src": "9345:1:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "9329:18:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "9308:39:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1013,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9308:39:5"
                                  },
                                  {
                                    "expression": {
                                      "id": 1018,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1014,
                                          "name": "electionWinners",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 431,
                                          "src": "9369:15:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                            "typeString": "uint256[] storage ref"
                                          }
                                        },
                                        "id": 1016,
                                        "indexExpression": {
                                          "id": 1015,
                                          "name": "j",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 967,
                                          "src": "9385:1:5",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint8",
                                            "typeString": "uint8"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "9369:18:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1017,
                                        "name": "temp",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1001,
                                        "src": "9390:4:5",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "9369:25:5",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1019,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9369:25:5"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 975,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 972,
                            "name": "j",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 967,
                            "src": "9000:1:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 973,
                              "name": "electionWinners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 431,
                              "src": "9004:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 974,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "9004:22:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9000:26:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1023,
                        "initializationExpression": {
                          "assignments": [
                            967
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 967,
                              "mutability": "mutable",
                              "name": "j",
                              "nameLocation": "8991:1:5",
                              "nodeType": "VariableDeclaration",
                              "scope": 1023,
                              "src": "8985:7:5",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              "typeName": {
                                "id": 966,
                                "name": "uint8",
                                "nodeType": "ElementaryTypeName",
                                "src": "8985:5:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint8",
                                  "typeString": "uint8"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 971,
                          "initialValue": {
                            "commonType": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "id": 970,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 968,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 954,
                              "src": "8995:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 969,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8997:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "8995:3:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "8985:13:5"
                        },
                        "loopExpression": {
                          "expression": {
                            "id": 977,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": true,
                            "src": "9028:3:5",
                            "subExpression": {
                              "id": 976,
                              "name": "j",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 967,
                              "src": "9030:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "id": 978,
                          "nodeType": "ExpressionStatement",
                          "src": "9028:3:5"
                        },
                        "nodeType": "ForStatement",
                        "src": "8981:446:5"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 962,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 957,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 954,
                      "src": "8931:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 961,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "id": 958,
                          "name": "electionWinners",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 431,
                          "src": "8935:15:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                            "typeString": "uint256[] storage ref"
                          }
                        },
                        "id": 959,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "8935:22:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "-",
                      "rightExpression": {
                        "hexValue": "31",
                        "id": 960,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8960:1:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "src": "8935:26:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "8931:30:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1025,
                  "initializationExpression": {
                    "assignments": [
                      954
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 954,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "8924:1:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1025,
                        "src": "8918:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 953,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "8918:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 956,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 955,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "8928:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "8918:11:5"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 964,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "8963:3:5",
                      "subExpression": {
                        "id": 963,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 954,
                        "src": "8965:1:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 965,
                    "nodeType": "ExpressionStatement",
                    "src": "8963:3:5"
                  },
                  "nodeType": "ForStatement",
                  "src": "8914:523:5"
                }
              ]
            },
            "documentation": {
              "id": 944,
              "nodeType": "StructuredDocumentation",
              "src": "8725:83:5",
              "text": "@notice Internal function which sorts the electionWinners Array"
            },
            "id": 1027,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_sortElectionWinners",
            "nameLocation": "8822:20:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 945,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8842:2:5"
            },
            "returnParameters": {
              "id": 946,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8854:0:5"
            },
            "scope": 1118,
            "src": "8813:630:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1058,
              "nodeType": "Block",
              "src": "9762:163:5",
              "statements": [
                {
                  "body": {
                    "id": 1054,
                    "nodeType": "Block",
                    "src": "9822:75:5",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1050,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1046,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1030,
                            "src": "9839:12:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "baseExpression": {
                              "id": 1047,
                              "name": "electionWinners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 431,
                              "src": "9855:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1049,
                            "indexExpression": {
                              "id": 1048,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1036,
                              "src": "9871:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9855:18:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9839:34:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1053,
                        "nodeType": "IfStatement",
                        "src": "9836:50:5",
                        "trueBody": {
                          "expression": {
                            "hexValue": "74727565",
                            "id": 1051,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9882:4:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "functionReturnParameters": 1034,
                          "id": 1052,
                          "nodeType": "Return",
                          "src": "9875:11:5"
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1042,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1039,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1036,
                      "src": "9790:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 1040,
                        "name": "electionWinners",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 431,
                        "src": "9794:15:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 1041,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "9794:22:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "9790:26:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1055,
                  "initializationExpression": {
                    "assignments": [
                      1036
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 1036,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "9783:1:5",
                        "nodeType": "VariableDeclaration",
                        "scope": 1055,
                        "src": "9777:7:5",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "typeName": {
                          "id": 1035,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "9777:5:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 1038,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 1037,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "9787:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "9777:11:5"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 1044,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "9818:3:5",
                      "subExpression": {
                        "id": 1043,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1036,
                        "src": "9820:1:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "id": 1045,
                    "nodeType": "ExpressionStatement",
                    "src": "9818:3:5"
                  },
                  "nodeType": "ForStatement",
                  "src": "9773:124:5"
                },
                {
                  "expression": {
                    "hexValue": "66616c7365",
                    "id": 1056,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "9913:5:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 1034,
                  "id": 1057,
                  "nodeType": "Return",
                  "src": "9906:12:5"
                }
              ]
            },
            "documentation": {
              "id": 1028,
              "nodeType": "StructuredDocumentation",
              "src": "9449:228:5",
              "text": "@notice Internal function which returns if the _candidateId is in the electionWinners Array\n@param _candidateId Candidate's ID to be checked\n@return Bool : True if found in the electionWinners"
            },
            "id": 1059,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isInElectionWinners",
            "nameLocation": "9691:20:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1031,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1030,
                  "mutability": "mutable",
                  "name": "_candidateId",
                  "nameLocation": "9720:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1059,
                  "src": "9712:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1029,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9712:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9711:22:5"
            },
            "returnParameters": {
              "id": 1034,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1033,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1059,
                  "src": "9757:4:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1032,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9757:4:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9756:6:5"
            },
            "scope": 1118,
            "src": "9682:243:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1084,
              "nodeType": "Block",
              "src": "10178:134:5",
              "statements": [
                {
                  "assignments": [
                    1066
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1066,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "10197:6:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1084,
                      "src": "10189:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1065,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10189:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1069,
                  "initialValue": {
                    "expression": {
                      "id": 1067,
                      "name": "electionWinners",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 431,
                      "src": "10206:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "id": 1068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "10206:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10189:39:5"
                },
                {
                  "expression": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 1072,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 1070,
                        "name": "length",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1066,
                        "src": "10245:6:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": ">",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 1071,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10254:1:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "10245:10:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "hexValue": "30",
                      "id": 1081,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "10304:1:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "id": 1082,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "10245:60:5",
                    "trueExpression": {
                      "expression": {
                        "baseExpression": {
                          "id": 1073,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 428,
                          "src": "10258:10:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$399_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 1079,
                        "indexExpression": {
                          "baseExpression": {
                            "id": 1074,
                            "name": "electionWinners",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 431,
                            "src": "10269:15:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                              "typeString": "uint256[] storage ref"
                            }
                          },
                          "id": 1078,
                          "indexExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1077,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 1075,
                              "name": "length",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1066,
                              "src": "10285:6:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "hexValue": "31",
                              "id": 1076,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "10292:1:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "10285:8:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10269:25:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "10258:37:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$399_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 1080,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "votes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 398,
                      "src": "10258:43:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 1064,
                  "id": 1083,
                  "nodeType": "Return",
                  "src": "10238:67:5"
                }
              ]
            },
            "documentation": {
              "id": 1060,
              "nodeType": "StructuredDocumentation",
              "src": "9931:181:5",
              "text": "@notice Internal function which returns the number of votes of the last candidate in the electionWinners\n@return Votes of candidate that is in last place"
            },
            "id": 1085,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_getLastPlaceVotes",
            "nameLocation": "10126:18:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1061,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10144:2:5"
            },
            "returnParameters": {
              "id": 1064,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1063,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1085,
                  "src": "10170:7:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1062,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10170:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10169:9:5"
            },
            "scope": 1118,
            "src": "10117:195:5",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1116,
              "nodeType": "Block",
              "src": "10547:250:5",
              "statements": [
                {
                  "assignments": [
                    1092
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1092,
                      "mutability": "mutable",
                      "name": "length",
                      "nameLocation": "10566:6:5",
                      "nodeType": "VariableDeclaration",
                      "scope": 1116,
                      "src": "10558:14:5",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1091,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10558:7:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 1095,
                  "initialValue": {
                    "expression": {
                      "id": 1093,
                      "name": "electionWinners",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 431,
                      "src": "10575:15:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "id": 1094,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "10575:22:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "10558:39:5"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1098,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1096,
                      "name": "length",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1092,
                      "src": "10610:6:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 1097,
                      "name": "ELECTION_WINNERS_LENGTH",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 384,
                      "src": "10619:23:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "10610:32:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 1114,
                    "nodeType": "Block",
                    "src": "10709:82:5",
                    "statements": [
                      {
                        "expression": {
                          "id": 1112,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 1106,
                              "name": "electionWinners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 431,
                              "src": "10723:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1110,
                            "indexExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1107,
                                "name": "ELECTION_WINNERS_LENGTH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 384,
                                "src": "10739:23:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 1108,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10763:1:5",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "10739:25:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "10723:42:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1111,
                            "name": "_candidateId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1088,
                            "src": "10768:12:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10723:57:5",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1113,
                        "nodeType": "ExpressionStatement",
                        "src": "10723:57:5"
                      }
                    ]
                  },
                  "id": 1115,
                  "nodeType": "IfStatement",
                  "src": "10607:184:5",
                  "trueBody": {
                    "id": 1105,
                    "nodeType": "Block",
                    "src": "10643:60:5",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1102,
                              "name": "_candidateId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1088,
                              "src": "10679:12:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 1099,
                              "name": "electionWinners",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 431,
                              "src": "10658:15:5",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 1101,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "10658:20:5",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                              "typeString": "function (uint256[] storage pointer,uint256)"
                            }
                          },
                          "id": 1103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10658:34:5",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1104,
                        "nodeType": "ExpressionStatement",
                        "src": "10658:34:5"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 1086,
              "nodeType": "StructuredDocumentation",
              "src": "10318:157:5",
              "text": "@notice Internal function which inserts a candidate in the electionWinners\n@param _candidateId ID of the Candidate to be inserted"
            },
            "id": 1117,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_insertIntoElectionWinners",
            "nameLocation": "10489:26:5",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1089,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1088,
                  "mutability": "mutable",
                  "name": "_candidateId",
                  "nameLocation": "10524:12:5",
                  "nodeType": "VariableDeclaration",
                  "scope": 1117,
                  "src": "10516:20:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1087,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "10516:7:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10515:22:5"
            },
            "returnParameters": {
              "id": 1090,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10547:0:5"
            },
            "scope": 1118,
            "src": "10480:317:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1119,
        "src": "447:10352:5",
        "usedErrors": []
      }
    ],
    "src": "0:10800:5"
  },
  "bytecode": "6101406040523480156200001257600080fd5b506040516200225f3803806200225f8339810160408190526200003591620005c2565b60408051808201825260058152640312e302e360dc1b60209182015286518782012060e08190527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c6101008190524660a081815285517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81870181905281880195909552606081810194909452608080820193909352308183018190528751808303909301835260c09182019097528151919095012090529290921b905261012052600080546001600160a01b031916331790556200011683838362000142565b5050600180546001600160a01b0319166001600160a01b03939093169290921790915550620007899050565b6000546001600160a01b03163314620001ae5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79204b494e472063616e2073746172742061206e657720656c656374696044820152636f6e202160e01b60648201526084015b60405180910390fd5b8151835114620002055760405162461bcd60e51b815260206004820152602c60248201526000805160206200223f83398151915260448201526b7320616e642061676573202160a01b6064820152608401620001a5565b80518351146200025c5760405162461bcd60e51b815260206004820152602c60248201526000805160206200223f83398151915260448201526b7320616e642061676573202160a01b6064820152608401620001a5565b60005b83518110156200036957600560405180608001604052808684815181106200028b576200028b6200075d565b60200260200101518152602001858481518110620002ad57620002ad6200075d565b602002602001015160ff168152602001848481518110620002d257620002d26200075d565b60209081029190910181015182526000918101829052835460018101855593825290819020825180519394600402909101926200031392849201906200036f565b5060208281015160018301805460ff191660ff909216919091179055604083015180516200034892600285019201906200036f565b5060608201518160030155505080620003619062000733565b90506200025f565b50505050565b8280546200037d90620006f6565b90600052602060002090601f016020900481019282620003a15760008555620003ec565b82601f10620003bc57805160ff1916838001178555620003ec565b82800160010185558215620003ec579182015b82811115620003ec578251825591602001919060010190620003cf565b50620003fa929150620003fe565b5090565b5b80821115620003fa5760008155600101620003ff565b600082601f8301126200042757600080fd5b81516020620004406200043a83620006d0565b6200069d565b80838252828201915082860187848660051b89010111156200046157600080fd5b6000805b86811015620004a85782516001600160401b0381111562000484578283fd5b620004948b88838d01016200052d565b865250938501939185019160010162000465565b509198975050505050505050565b600082601f830112620004c857600080fd5b81516020620004db6200043a83620006d0565b80838252828201915082860187848660051b8901011115620004fc57600080fd5b6000805b86811015620004a857825160ff811681146200051a578283fd5b8552938501939185019160010162000500565b600082601f8301126200053f57600080fd5b81516001600160401b038111156200055b576200055b62000773565b602062000571601f8301601f191682016200069d565b82815285828487010111156200058657600080fd5b60005b83811015620005a657858101830151828201840152820162000589565b83811115620005b85760008385840101525b5095945050505050565b600080600080600060a08688031215620005db57600080fd5b85516001600160401b0380821115620005f357600080fd5b6200060189838a016200052d565b602089015190975091506001600160a01b03821682146200062157600080fd5b6040880151919550808211156200063757600080fd5b6200064589838a0162000415565b945060608801519150808211156200065c57600080fd5b6200066a89838a01620004b6565b935060808801519150808211156200068157600080fd5b50620006908882890162000415565b9150509295509295909350565b604051601f8201601f191681016001600160401b0381118282101715620006c857620006c862000773565b604052919050565b60006001600160401b03821115620006ec57620006ec62000773565b5060051b60200190565b600181811c908216806200070b57607f821691505b602082108114156200072d57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200075657634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160601c60e0516101005161012051611a63620007dc60003960006111ae015260006111fd015260006111d8015260006111310152600061115b015260006111850152611a636000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80634420e486116100715780634420e486146101875780637107852a1461019a578063b384abef146101a2578063b8d06bc4146101b5578063de90bb6f146101c8578063f7b2ec0d146101d057600080fd5b80630cf2ee64146100ae5780631565507e146100ef5780632d0335ab1461010457806330226efe1461013b578063377968d414610172575b600080fd5b6100da6100bc3660046115eb565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6101026100fd3660046116a7565b6101fb565b005b61012d6101123660046115eb565b6001600160a01b031660009081526003602052604090205490565b6040519081526020016100e6565b61014e6101493660046115eb565b610319565b604080518251815260208084015190820152918101511515908201526060016100e6565b61017a610386565b6040516100e6919061181c565b6100da6101953660046115eb565b6105db565b6100da61072f565b6101026101b036600461170d565b61079e565b61012d6101c3366004611606565b6107ad565b61017a61083d565b6101e36101de36600461165b565b6109db565b6040516001600160a01b0390911681526020016100e6565b60006102088484846107ad565b905060006102178288886109db565b9050846001600160a01b0316816001600160a01b03161461028b5760405162461bcd60e51b815260206004820152602360248201527f46756e6374696f6e2060766f746560203a20696e76616c6964207369676e617460448201526275726560e81b60648201526084015b60405180910390fd5b6001600160a01b0381166102dc5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610282565b6102e7858585610a25565b6001600160a01b038516600090815260036020526040812080549161030b8361199a565b919050555050505050505050565b61033f604051806060016040528060008152602001600081526020016000151581525090565b506001600160a01b03166000908152600460209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b60065460609060009067ffffffffffffffff8111156103a7576103a7611a17565b60405190808252806020026020018201604052801561040657816020015b6103f3604051806080016040528060608152602001600060ff16815260200160608152602001600081525090565b8152602001906001900390816103c55790505b50905060005b60065460ff821610156105d557600560068260ff168154811061043157610431611a01565b90600052602060002001548154811061044c5761044c611a01565b906000526020600020906004020160405180608001604052908160008201805461047590611965565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190611965565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b5050509183525050600182015460ff16602082015260028201805460409092019161051890611965565b80601f016020809104026020016040519081016040528092919081815260200182805461054490611965565b80156105915780601f1061056657610100808354040283529160200191610591565b820191906000526020600020905b81548152906001019060200180831161057457829003601f168201915b50505050508152602001600382015481525050828260ff16815181106105b9576105b9611a01565b6020026020010181905250806105ce906119b5565b905061040c565b50919050565b6001600160a01b03811660009081526002602052604081205460ff1615156001141561067e5760405162461bcd60e51b815260206004820152604660248201527f54686520636974697a656e20686173206265656e20726567697374657265642060448201527f2d20746865726520617265206e6f206d756c7469706c652072656769737472616064820152653a34b7b7399760d11b608482015260a401610282565b6001805460405163bc0e60e160e01b81526001600160a01b038581166004830152602482019390935291169063bc0e60e190604401602060405180830381600087803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611639565b50506001600160a01b03166000908152600260205260409020805460ff1916600190811790915590565b600080546001600160a01b0316331461078a5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79204b494e472063616e20656e642074686520656c656374696f6e2e006044820152606401610282565b506007805460ff1916600190811790915590565b6107a9338383610a25565b5050565b6001600160a01b03831660008181526003602090815260408083205481517fa56f781f7251d29fca13933d69c34316ea277f967c4a968f77db62d983fe11209381019390935290820193909352606081018590526080810184905260a081018390529091906108349060c00160405160208183030381529060405280519060200120610dd6565b95945050505050565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156109d2578382906000526020600020906004020160405180608001604052908160008201805461089490611965565b80601f01602080910402602001604051908101604052809291908181526020018280546108c090611965565b801561090d5780601f106108e25761010080835404028352916020019161090d565b820191906000526020600020905b8154815290600101906020018083116108f057829003601f168201915b5050509183525050600182015460ff16602082015260028201805460409092019161093790611965565b80601f016020809104026020016040519081016040528092919081815260200182805461096390611965565b80156109b05780601f10610985576101008083540402835291602001916109b0565b820191906000526020600020905b81548152906001019060200180831161099357829003601f168201915b5050505050815260200160038201548152505081526020019060010190610861565b50505050905090565b6000610a1d8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e2a92505050565b949350505050565b60075460ff16151560011415610a915760405162461bcd60e51b815260206004820152602b60248201527f566f74696e6720666f72207468652063757272656e7420656c656374696f6e2060448201526a3430b99032b73232b2101760a91b6064820152608401610282565b6001600160a01b03831660009081526004602052604090206002015460ff16151560011415610b165760405162461bcd60e51b815260206004820152602b60248201527f54686520636974697a656e20616c726561647920766f74656420696e2074686560448201526a1032b632b1ba34b7b7101760a91b6064820152608401610282565b6001811015610b825760405162461bcd60e51b815260206004820152603260248201527f54686520616d6f756e74206973206c6573736572207468616e2074686520524560448201527123a4a9aa2920aa24a7a71020a6a7aaa72a1760711b6064820152608401610282565b6005548210610bf95760405162461bcd60e51b815260206004820152603860248201527f5468652063616e6469646174652049442067726561746572207468616e20746860448201527f65206e756d626572206f662063616e64696461746573202100000000000000006064820152608401610282565b600154604051631429461760e11b81526001600160a01b03858116600483015260248201849052909116906328528c2e90604401602060405180830381600087803b158015610c4757600080fd5b505af1158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190611639565b50610cb78160058481548110610c9757610c97611a01565b906000526020600020906004020160030154610e4e90919063ffffffff16565b60058381548110610cca57610cca611a01565b60009182526020808320600492830201600301939093556001600160a01b03861682529091526040902082815560018082018390556002909101805460ff19169091179055610d1882610e61565b610dce57610d24610ebc565b60058381548110610d3757610d37611a01565b9060005260206000209060040201600301541180610d5757506006546003115b15610dc957610d6582610f21565b610d6d610f92565b7f06feb6d2e3b854b96ff5a9f8e857f483fbff471f03c8f8451fdedffe83cc605b60058381548110610da157610da1611a01565b9060005260206000209060040201604051610dbc91906118bb565b60405180910390a1505050565b505050565b610dc9610f92565b6000610e24610de3611124565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610e39858561124b565b91509150610e46816112bb565b509392505050565b6000610e5a8284611911565b9392505050565b6000805b60065460ff82161015610eb35760068160ff1681548110610e8857610e88611a01565b9060005260206000200154831415610ea35750600192915050565b610eac816119b5565b9050610e65565b50600092915050565b60065460009080610ece576000610f1b565b60056006610edd60018461194e565b81548110610eed57610eed611a01565b906000526020600020015481548110610f0857610f08611a01565b9060005260206000209060040201600301545b91505090565b6006546003811015610f635750600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155565b816006610f726001600361194e565b81548110610f8257610f82611a01565b6000918252602090912001555050565b600654610f9b57565b60005b600654610fad9060019061194e565b8160ff161015611121576000610fc4826001611929565b90505b60065460ff8216101561111057600060068360ff1681548110610fec57610fec611a01565b90600052602060002001549050600060068360ff168154811061101157611011611a01565b906000526020600020015490506005818154811061103157611031611a01565b9060005260206000209060040201600301546005838154811061105657611056611a01565b90600052602060002090600402016003015410156110fd57600060068560ff168154811061108657611086611a01565b9060005260206000200154905060068460ff16815481106110a9576110a9611a01565b906000526020600020015460068660ff16815481106110ca576110ca611a01565b90600052602060002001819055508060068560ff16815481106110ef576110ef611a01565b600091825260209091200155505b505080611109906119b5565b9050610fc7565b5061111a816119b5565b9050610f9e565b50565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561117d57507f000000000000000000000000000000000000000000000000000000000000000046145b156111a757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156112825760208301516040840151606085015160001a61127687828585611471565b945094505050506112b4565b8251604014156112ac57602083015160408401516112a186838361155e565b9350935050506112b4565b506000905060025b9250929050565b60008160048111156112cf576112cf6119eb565b14156112d85750565b60018160048111156112ec576112ec6119eb565b14156113355760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610282565b6002816004811115611349576113496119eb565b14156113975760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610282565b60038160048111156113ab576113ab6119eb565b14156114045760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610282565b6004816004811115611418576114186119eb565b14156111215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610282565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156114a85750600090506003611555565b8460ff16601b141580156114c057508460ff16601c14155b156114d15750600090506004611555565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611525573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661154e57600060019250925050611555565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161157f87828885611471565b935093505050935093915050565b80356001600160a01b03811681146115a457600080fd5b919050565b60008083601f8401126115bb57600080fd5b50813567ffffffffffffffff8111156115d357600080fd5b6020830191508360208285010111156112b457600080fd5b6000602082840312156115fd57600080fd5b610e5a8261158d565b60008060006060848603121561161b57600080fd5b6116248461158d565b95602085013595506040909401359392505050565b60006020828403121561164b57600080fd5b81518015158114610e5a57600080fd5b60008060006040848603121561167057600080fd5b83359250602084013567ffffffffffffffff81111561168e57600080fd5b61169a868287016115a9565b9497909650939450505050565b6000806000806000608086880312156116bf57600080fd5b853567ffffffffffffffff8111156116d657600080fd5b6116e2888289016115a9565b90965094506116f590506020870161158d565b94979396509394604081013594506060013592915050565b6000806040838503121561172057600080fd5b50508035926020909101359150565b6000815180845260005b8181101561175557602081850181015186830182015201611739565b81811115611767576000602083870101525b50601f01601f19169290920160200192915050565b8054600090600181811c908083168061179657607f831692505b60208084108214156117b857634e487b7160e01b600052602260045260246000fd5b838852602088018280156117d357600181146117e45761180f565b60ff1987168252828201975061180f565b60008981526020902060005b87811015611809578154848201529086019084016117f0565b83019850505b5050505050505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118ad57603f198984030185528151608081518186526118698287018261172f565b91505060ff898301511689860152878201518582038987015261188c828261172f565b60609384015196909301959095525094870194925090860190600101611843565b509098975050505050505050565b602081526080602082015260006118d560a083018461177c565b600184015460ff166040840152828103601f190160608401526118fb816002860161177c565b9050600384015460808401528091505092915050565b60008219821115611924576119246119d5565b500190565b600060ff821660ff84168060ff03821115611946576119466119d5565b019392505050565b600082821015611960576119606119d5565b500390565b600181811c9082168061197957607f821691505b602082108114156105d557634e487b7160e01b600052602260045260246000fd5b60006000198214156119ae576119ae6119d5565b5060010190565b600060ff821660ff8114156119cc576119cc6119d5565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122012c76e96027e622e6adeccd518a7f3c9c5cd4ed4c0cd5bf0580569a669f92c4864736f6c634300080600334c656e677468206d69736d61746368202d2063616e646964617465206e616d65",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.6+commit.11564f7e"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {},
      "1": {
        "ECDSA._throwError": {
          "77": [
            601,
            630,
            false
          ],
          "78": [
            697,
            735,
            false
          ],
          "79": [
            806,
            850,
            false
          ],
          "80": [
            928,
            967,
            false
          ],
          "81": [
            1048,
            1087,
            false
          ]
        },
        "ECDSA.tryRecover": {
          "75": [
            2539,
            2561,
            false
          ],
          "76": [
            3021,
            3043,
            false
          ],
          "82": [
            6781,
            6860,
            false
          ],
          "83": [
            6951,
            6958,
            false
          ],
          "84": [
            6962,
            6969,
            false
          ],
          "85": [
            7196,
            7216,
            false
          ]
        }
      },
      "2": {
        "EIP712._domainSeparatorV4": {
          "86": [
            3219,
            3248,
            false
          ],
          "87": [
            3252,
            3285,
            false
          ]
        }
      },
      "3": {},
      "4": {},
      "5": {
        "Voting._getLastPlaceVotes": {
          "72": [
            10245,
            10255,
            true
          ]
        },
        "Voting._insertIntoElectionWinners": {
          "73": [
            10610,
            10642,
            false
          ]
        },
        "Voting._isInElectionWinners": {
          "71": [
            9839,
            9873,
            false
          ]
        },
        "Voting._sortElectionWinners": {
          "74": [
            9169,
            9230,
            false
          ]
        },
        "Voting._vote": {
          "66": [
            7361,
            7377,
            true
          ],
          "67": [
            7443,
            7475,
            true
          ],
          "68": [
            7541,
            7571,
            true
          ],
          "69": [
            7644,
            7676,
            true
          ],
          "70": [
            8137,
            8190,
            true
          ]
        },
        "Voting.delegatedVote": {
          "62": [
            5915,
            5939,
            true
          ],
          "63": [
            5997,
            6017,
            true
          ]
        },
        "Voting.endTheElection": {
          "65": [
            1685,
            1703,
            true
          ]
        },
        "Voting.register": {
          "64": [
            2071,
            2101,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {},
      "1": {
        "ECDSA._throwError": {
          "53": [
            751,
            785
          ],
          "54": [
            866,
            907
          ],
          "55": [
            983,
            1027
          ],
          "56": [
            1103,
            1147
          ]
        },
        "ECDSA.recover": {
          "34": [
            4469,
            4487
          ],
          "35": [
            4497,
            4513
          ]
        },
        "ECDSA.toTypedDataHash": {
          "33": [
            9237,
            9312
          ]
        },
        "ECDSA.tryRecover": {
          "50": [
            2968,
            3000
          ],
          "51": [
            3373,
            3403
          ],
          "52": [
            3434,
            3490
          ],
          "57": [
            6876,
            6927
          ],
          "58": [
            6985,
            7036
          ],
          "59": [
            7232,
            7282
          ],
          "60": [
            7303,
            7340
          ],
          "61": [
            5114,
            5146
          ]
        }
      },
      "2": {
        "EIP712._buildDomainSeparator": {
          "48": [
            3616,
            3707
          ]
        },
        "EIP712._domainSeparatorV4": {
          "47": [
            3301,
            3332
          ],
          "49": [
            3363,
            3434
          ]
        },
        "EIP712._hashTypedDataV4": {
          "32": [
            4435,
            4497
          ]
        }
      },
      "3": {
        "SafeMath.add": {
          "36": [
            2818,
            2830
          ]
        }
      },
      "4": {},
      "5": {
        "Voting._getLastPlaceVotes": {
          "40": [
            10238,
            10305
          ]
        },
        "Voting._insertIntoElectionWinners": {
          "41": [
            10658,
            10692
          ],
          "42": [
            10723,
            10780
          ]
        },
        "Voting._isInElectionWinners": {
          "37": [
            9875,
            9886
          ],
          "38": [
            9818,
            9821
          ],
          "39": [
            9906,
            9918
          ]
        },
        "Voting._sortElectionWinners": {
          "43": [
            9308,
            9347
          ],
          "44": [
            9369,
            9394
          ],
          "45": [
            9028,
            9031
          ],
          "46": [
            8963,
            8966
          ]
        },
        "Voting._vote": {
          "19": [
            7353,
            7425
          ],
          "20": [
            7435,
            7523
          ],
          "21": [
            7533,
            7626
          ],
          "22": [
            7636,
            7737
          ],
          "23": [
            7748,
            7796
          ],
          "24": [
            7807,
            7883
          ],
          "25": [
            7893,
            7935
          ],
          "26": [
            7945,
            7977
          ],
          "27": [
            7987,
            8018
          ],
          "28": [
            8297,
            8337
          ],
          "29": [
            8355,
            8377
          ],
          "30": [
            8395,
            8439
          ],
          "31": [
            8645,
            8667
          ]
        },
        "Voting.citizenHasVoted": {
          "6": [
            3223,
            3252
          ]
        },
        "Voting.citizenIsRegistered": {
          "0": [
            2608,
            2644
          ]
        },
        "Voting.delegatedVote": {
          "2": [
            5907,
            5979
          ],
          "3": [
            5989,
            6046
          ],
          "4": [
            6057,
            6099
          ],
          "5": [
            6110,
            6134
          ]
        },
        "Voting.endTheElection": {
          "13": [
            1677,
            1739
          ],
          "14": [
            1750,
            1765
          ]
        },
        "Voting.getDigest": {
          "16": [
            4665,
            5021
          ]
        },
        "Voting.getNonce": {
          "1": [
            4169,
            4198
          ]
        },
        "Voting.getSigner": {
          "18": [
            5311,
            5351
          ]
        },
        "Voting.register": {
          "10": [
            2063,
            2176
          ],
          "11": [
            2187,
            2253
          ],
          "12": [
            2263,
            2292
          ]
        },
        "Voting.seeAllCandidates": {
          "17": [
            3906,
            3923
          ]
        },
        "Voting.vote": {
          "15": [
            2916,
            2956
          ]
        },
        "Voting.winningCandidates": {
          "7": [
            3623,
            3666
          ],
          "8": [
            3618,
            3621
          ],
          "9": [
            3676,
            3690
          ]
        }
      }
    }
  },
  "dependencies": [
    "ECDSA",
    "EIP712",
    "SafeMath",
    "Strings",
    "Token"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80634420e486116100715780634420e486146101875780637107852a1461019a578063b384abef146101a2578063b8d06bc4146101b5578063de90bb6f146101c8578063f7b2ec0d146101d057600080fd5b80630cf2ee64146100ae5780631565507e146100ef5780632d0335ab1461010457806330226efe1461013b578063377968d414610172575b600080fd5b6100da6100bc3660046115eb565b6001600160a01b031660009081526002602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6101026100fd3660046116a7565b6101fb565b005b61012d6101123660046115eb565b6001600160a01b031660009081526003602052604090205490565b6040519081526020016100e6565b61014e6101493660046115eb565b610319565b604080518251815260208084015190820152918101511515908201526060016100e6565b61017a610386565b6040516100e6919061181c565b6100da6101953660046115eb565b6105db565b6100da61072f565b6101026101b036600461170d565b61079e565b61012d6101c3366004611606565b6107ad565b61017a61083d565b6101e36101de36600461165b565b6109db565b6040516001600160a01b0390911681526020016100e6565b60006102088484846107ad565b905060006102178288886109db565b9050846001600160a01b0316816001600160a01b03161461028b5760405162461bcd60e51b815260206004820152602360248201527f46756e6374696f6e2060766f746560203a20696e76616c6964207369676e617460448201526275726560e81b60648201526084015b60405180910390fd5b6001600160a01b0381166102dc5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610282565b6102e7858585610a25565b6001600160a01b038516600090815260036020526040812080549161030b8361199a565b919050555050505050505050565b61033f604051806060016040528060008152602001600081526020016000151581525090565b506001600160a01b03166000908152600460209081526040918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b60065460609060009067ffffffffffffffff8111156103a7576103a7611a17565b60405190808252806020026020018201604052801561040657816020015b6103f3604051806080016040528060608152602001600060ff16815260200160608152602001600081525090565b8152602001906001900390816103c55790505b50905060005b60065460ff821610156105d557600560068260ff168154811061043157610431611a01565b90600052602060002001548154811061044c5761044c611a01565b906000526020600020906004020160405180608001604052908160008201805461047590611965565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190611965565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b5050509183525050600182015460ff16602082015260028201805460409092019161051890611965565b80601f016020809104026020016040519081016040528092919081815260200182805461054490611965565b80156105915780601f1061056657610100808354040283529160200191610591565b820191906000526020600020905b81548152906001019060200180831161057457829003601f168201915b50505050508152602001600382015481525050828260ff16815181106105b9576105b9611a01565b6020026020010181905250806105ce906119b5565b905061040c565b50919050565b6001600160a01b03811660009081526002602052604081205460ff1615156001141561067e5760405162461bcd60e51b815260206004820152604660248201527f54686520636974697a656e20686173206265656e20726567697374657265642060448201527f2d20746865726520617265206e6f206d756c7469706c652072656769737472616064820152653a34b7b7399760d11b608482015260a401610282565b6001805460405163bc0e60e160e01b81526001600160a01b038581166004830152602482019390935291169063bc0e60e190604401602060405180830381600087803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611639565b50506001600160a01b03166000908152600260205260409020805460ff1916600190811790915590565b600080546001600160a01b0316331461078a5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79204b494e472063616e20656e642074686520656c656374696f6e2e006044820152606401610282565b506007805460ff1916600190811790915590565b6107a9338383610a25565b5050565b6001600160a01b03831660008181526003602090815260408083205481517fa56f781f7251d29fca13933d69c34316ea277f967c4a968f77db62d983fe11209381019390935290820193909352606081018590526080810184905260a081018390529091906108349060c00160405160208183030381529060405280519060200120610dd6565b95945050505050565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156109d2578382906000526020600020906004020160405180608001604052908160008201805461089490611965565b80601f01602080910402602001604051908101604052809291908181526020018280546108c090611965565b801561090d5780601f106108e25761010080835404028352916020019161090d565b820191906000526020600020905b8154815290600101906020018083116108f057829003601f168201915b5050509183525050600182015460ff16602082015260028201805460409092019161093790611965565b80601f016020809104026020016040519081016040528092919081815260200182805461096390611965565b80156109b05780601f10610985576101008083540402835291602001916109b0565b820191906000526020600020905b81548152906001019060200180831161099357829003601f168201915b5050505050815260200160038201548152505081526020019060010190610861565b50505050905090565b6000610a1d8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e2a92505050565b949350505050565b60075460ff16151560011415610a915760405162461bcd60e51b815260206004820152602b60248201527f566f74696e6720666f72207468652063757272656e7420656c656374696f6e2060448201526a3430b99032b73232b2101760a91b6064820152608401610282565b6001600160a01b03831660009081526004602052604090206002015460ff16151560011415610b165760405162461bcd60e51b815260206004820152602b60248201527f54686520636974697a656e20616c726561647920766f74656420696e2074686560448201526a1032b632b1ba34b7b7101760a91b6064820152608401610282565b6001811015610b825760405162461bcd60e51b815260206004820152603260248201527f54686520616d6f756e74206973206c6573736572207468616e2074686520524560448201527123a4a9aa2920aa24a7a71020a6a7aaa72a1760711b6064820152608401610282565b6005548210610bf95760405162461bcd60e51b815260206004820152603860248201527f5468652063616e6469646174652049442067726561746572207468616e20746860448201527f65206e756d626572206f662063616e64696461746573202100000000000000006064820152608401610282565b600154604051631429461760e11b81526001600160a01b03858116600483015260248201849052909116906328528c2e90604401602060405180830381600087803b158015610c4757600080fd5b505af1158015610c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7f9190611639565b50610cb78160058481548110610c9757610c97611a01565b906000526020600020906004020160030154610e4e90919063ffffffff16565b60058381548110610cca57610cca611a01565b60009182526020808320600492830201600301939093556001600160a01b03861682529091526040902082815560018082018390556002909101805460ff19169091179055610d1882610e61565b610dce57610d24610ebc565b60058381548110610d3757610d37611a01565b9060005260206000209060040201600301541180610d5757506006546003115b15610dc957610d6582610f21565b610d6d610f92565b7f06feb6d2e3b854b96ff5a9f8e857f483fbff471f03c8f8451fdedffe83cc605b60058381548110610da157610da1611a01565b9060005260206000209060040201604051610dbc91906118bb565b60405180910390a1505050565b505050565b610dc9610f92565b6000610e24610de3611124565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610e39858561124b565b91509150610e46816112bb565b509392505050565b6000610e5a8284611911565b9392505050565b6000805b60065460ff82161015610eb35760068160ff1681548110610e8857610e88611a01565b9060005260206000200154831415610ea35750600192915050565b610eac816119b5565b9050610e65565b50600092915050565b60065460009080610ece576000610f1b565b60056006610edd60018461194e565b81548110610eed57610eed611a01565b906000526020600020015481548110610f0857610f08611a01565b9060005260206000209060040201600301545b91505090565b6006546003811015610f635750600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155565b816006610f726001600361194e565b81548110610f8257610f82611a01565b6000918252602090912001555050565b600654610f9b57565b60005b600654610fad9060019061194e565b8160ff161015611121576000610fc4826001611929565b90505b60065460ff8216101561111057600060068360ff1681548110610fec57610fec611a01565b90600052602060002001549050600060068360ff168154811061101157611011611a01565b906000526020600020015490506005818154811061103157611031611a01565b9060005260206000209060040201600301546005838154811061105657611056611a01565b90600052602060002090600402016003015410156110fd57600060068560ff168154811061108657611086611a01565b9060005260206000200154905060068460ff16815481106110a9576110a9611a01565b906000526020600020015460068660ff16815481106110ca576110ca611a01565b90600052602060002001819055508060068560ff16815481106110ef576110ef611a01565b600091825260209091200155505b505080611109906119b5565b9050610fc7565b5061111a816119b5565b9050610f9e565b50565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561117d57507f000000000000000000000000000000000000000000000000000000000000000046145b156111a757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156112825760208301516040840151606085015160001a61127687828585611471565b945094505050506112b4565b8251604014156112ac57602083015160408401516112a186838361155e565b9350935050506112b4565b506000905060025b9250929050565b60008160048111156112cf576112cf6119eb565b14156112d85750565b60018160048111156112ec576112ec6119eb565b14156113355760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610282565b6002816004811115611349576113496119eb565b14156113975760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610282565b60038160048111156113ab576113ab6119eb565b14156114045760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610282565b6004816004811115611418576114186119eb565b14156111215760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610282565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156114a85750600090506003611555565b8460ff16601b141580156114c057508460ff16601c14155b156114d15750600090506004611555565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611525573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661154e57600060019250925050611555565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161157f87828885611471565b935093505050935093915050565b80356001600160a01b03811681146115a457600080fd5b919050565b60008083601f8401126115bb57600080fd5b50813567ffffffffffffffff8111156115d357600080fd5b6020830191508360208285010111156112b457600080fd5b6000602082840312156115fd57600080fd5b610e5a8261158d565b60008060006060848603121561161b57600080fd5b6116248461158d565b95602085013595506040909401359392505050565b60006020828403121561164b57600080fd5b81518015158114610e5a57600080fd5b60008060006040848603121561167057600080fd5b83359250602084013567ffffffffffffffff81111561168e57600080fd5b61169a868287016115a9565b9497909650939450505050565b6000806000806000608086880312156116bf57600080fd5b853567ffffffffffffffff8111156116d657600080fd5b6116e2888289016115a9565b90965094506116f590506020870161158d565b94979396509394604081013594506060013592915050565b6000806040838503121561172057600080fd5b50508035926020909101359150565b6000815180845260005b8181101561175557602081850181015186830182015201611739565b81811115611767576000602083870101525b50601f01601f19169290920160200192915050565b8054600090600181811c908083168061179657607f831692505b60208084108214156117b857634e487b7160e01b600052602260045260246000fd5b838852602088018280156117d357600181146117e45761180f565b60ff1987168252828201975061180f565b60008981526020902060005b87811015611809578154848201529086019084016117f0565b83019850505b5050505050505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118ad57603f198984030185528151608081518186526118698287018261172f565b91505060ff898301511689860152878201518582038987015261188c828261172f565b60609384015196909301959095525094870194925090860190600101611843565b509098975050505050505050565b602081526080602082015260006118d560a083018461177c565b600184015460ff166040840152828103601f190160608401526118fb816002860161177c565b9050600384015460808401528091505092915050565b60008219821115611924576119246119d5565b500190565b600060ff821660ff84168060ff03821115611946576119466119d5565b019392505050565b600082821015611960576119606119d5565b500390565b600181811c9082168061197957607f821691505b602082108114156105d557634e487b7160e01b600052602260045260246000fd5b60006000198214156119ae576119ae6119d5565b5060010190565b600060ff821660ff8114156119cc576119cc6119d5565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122012c76e96027e622e6adeccd518a7f3c9c5cd4ed4c0cd5bf0580569a669f92c4864736f6c63430008060033",
  "deployedSourceMap": "447:10352:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2516:136;;;;;;:::i;:::-;-1:-1:-1;;;;;2615:29:5;2591:4;2615:29;;;:12;:29;;;;;;;;;2516:136;;;;6663:14:6;;6656:22;6638:41;;6626:2;6611:18;2516:136:5;;;;;;;;5651:490;;;;;;:::i;:::-;;:::i;:::-;;4087:127;;;;;;:::i;:::-;-1:-1:-1;;;;;4176:22:5;4150:7;4176:22;;;:6;:22;;;;;;;4087:127;;;;6836:25:6;;;6824:2;6809:18;4087:127:5;6791:76:6;3128:140:5;;;;;;:::i;:::-;;:::i;:::-;;;;13515:13:6;;13497:32;;13585:4;13573:17;;;13567:24;13545:20;;;13538:54;13650:17;;;13644:24;13637:32;13630:40;13608:20;;;13601:70;13485:2;13470:18;3128:140:5;13452:225:6;3410:296:5;;;:::i;:::-;;;;;;;:::i;1986:336::-;;;;;;:::i;:::-;;:::i;1610:185::-;;;:::i;2845:119::-;;;;;;:::i;:::-;;:::i;4496:532::-;;;;;;:::i;:::-;;:::i;3826:105::-;;;:::i;5211:147::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;4809:32:6;;;4791:51;;4779:2;4764:18;5211:147:5;4746:102:6;5651:490:5;5779:14;5796:46;5806:14;5822:11;5835:6;5796:9;:46::i;:::-;5779:63;;5852:14;5869:28;5879:6;5887:9;;5869;:28::i;:::-;5852:45;;5925:14;-1:-1:-1;;;;;5915:24:5;:6;-1:-1:-1;;;;;5915:24:5;;5907:72;;;;-1:-1:-1;;;5907:72:5;;11652:2:6;5907:72:5;;;11634:21:6;11691:2;11671:18;;;11664:30;11730:34;11710:18;;;11703:62;-1:-1:-1;;;11781:18:6;;;11774:33;11824:19;;5907:72:5;;;;;;;;;-1:-1:-1;;;;;5997:20:5;;5989:57;;;;-1:-1:-1;;;5989:57:5;;8465:2:6;5989:57:5;;;8447:21:6;8504:2;8484:18;;;8477:30;-1:-1:-1;;;8523:18:6;;;8516:54;8587:18;;5989:57:5;8437:174:6;5989:57:5;6057:42;6063:14;6079:11;6092:6;6057:5;:42::i;:::-;-1:-1:-1;;;;;6110:22:5;;;;;;:6;:22;;;;;:24;;;;;;:::i;:::-;;;;;;5768:373;;5651:490;;;;;:::o;3128:140::-;3199:11;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;3199:11:5;-1:-1:-1;;;;;;3230:22:5;;;;;:5;:22;;;;;;;;;3223:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3128:140::o;3410:296::-;3539:15;:22;3460:18;;3494:26;;3523:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3523:39:5;;;;;;;;;;;;;;;;;3494:68;;3577:7;3572:94;3594:15;:22;3590:26;;;;3572:94;;;3636:10;3647:15;3663:1;3647:18;;;;;;;;;;:::i;:::-;;;;;;;;;3636:30;;;;;;;;:::i;:::-;;;;;;;;;;;3623:43;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3623:43:5;;;-1:-1:-1;;3623:43:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:7;3631:1;3623:10;;;;;;;;;;:::i;:::-;;;;;;:43;;;;3618:3;;;;:::i;:::-;;;3572:94;;;-1:-1:-1;3683:7:5;3410:296;-1:-1:-1;3410:296:5:o;1986:336::-;-1:-1:-1;;;;;2071:22:5;;2038:4;2071:22;;;:12;:22;;;;;;;;:30;;:22;:30;;2063:113;;;;-1:-1:-1;;;2063:113:5;;12416:2:6;2063:113:5;;;12398:21:6;12455:2;12435:18;;;12428:30;12494:34;12474:18;;;12467:62;12565:34;12545:18;;;12538:62;-1:-1:-1;;;12616:19:6;;;12609:37;12663:19;;2063:113:5;12388:300:6;2063:113:5;2187:12;;;:66;;-1:-1:-1;;;2187:66:5;;-1:-1:-1;;;;;5045:32:6;;;2187:66:5;;;5027:51:6;5094:18;;;5087:34;;;;2187:12:5;;;:35;;5000:18:6;;2187:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;2263:22:5;;;;;:12;:22;;;;;:29;;-1:-1:-1;;2263:29:5;2288:4;2263:29;;;;;;2288:4;1986:336::o;1610:185::-;1652:4;1699;;-1:-1:-1;;;;;1699:4:5;1685:10;:18;1677:62;;;;-1:-1:-1;;;1677:62:5;;12056:2:6;1677:62:5;;;12038:21:6;12095:2;12075:18;;;12068:30;12134:33;12114:18;;;12107:61;12185:18;;1677:62:5;12028:181:6;1677:62:5;-1:-1:-1;1750:8:5;:15;;-1:-1:-1;;1750:15:5;1761:4;1750:15;;;;;;1761:4;1610:185::o;2845:119::-;2916:40;2922:10;2934:12;2948:7;2916:5;:40::i;:::-;2845:119;;:::o;4496:532::-;-1:-1:-1;;;;;4632:22:5;;4597:7;4632:22;;;:6;:22;;;;;;;;;4729:268;;4765:90;4729:268;;;7131:25:6;;;;7172:18;;;7165:60;;;;7241:18;;;7234:34;;;7284:18;;;7277:34;;;7327:19;;;7320:35;;;4597:7:5;;4632:22;4672:349;;7103:19:6;;4729:268:5;;;;;;;;;;;;4702:309;;;;;;4672:16;:349::i;:::-;4665:356;4496:532;-1:-1:-1;;;;;4496:532:5:o;3826:105::-;3875:18;3913:10;3906:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3906:17:5;;;-1:-1:-1;;3906:17:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3826:105;:::o;5211:147::-;5293:7;5319:32;5333:6;5341:9;;5319:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5319:13:5;;-1:-1:-1;;;5319:32:5:i;:::-;5311:40;5211:147;-1:-1:-1;;;;5211:147:5:o;7261:1458::-;7361:8;;;;:16;;:8;:16;;7353:72;;;;-1:-1:-1;;;7353:72:5;;10434:2:6;7353:72:5;;;10416:21:6;10473:2;10453:18;;;10446:30;10512:34;10492:18;;;10485:62;-1:-1:-1;;;10563:18:6;;;10556:41;10614:19;;7353:72:5;10406:233:6;7353:72:5;-1:-1:-1;;;;;7443:15:5;;;;;;:5;:15;;;;;:24;;;;;:32;;:24;:32;;7435:88;;;;-1:-1:-1;;;7435:88:5;;9243:2:6;7435:88:5;;;9225:21:6;9282:2;9262:18;;;9255:30;9321:34;9301:18;;;9294:62;-1:-1:-1;;;9372:18:6;;;9365:41;9423:19;;7435:88:5;9215:233:6;7435:88:5;568:1;7541:7;:30;;7533:93;;;;-1:-1:-1;;;7533:93:5;;10015:2:6;7533:93:5;;;9997:21:6;10054:2;10034:18;;;10027:30;10093:34;10073:18;;;10066:62;-1:-1:-1;;;10144:18:6;;;10137:48;10202:19;;7533:93:5;9987:240:6;7533:93:5;7659:10;:17;7644:32;;7636:101;;;;-1:-1:-1;;;7636:101:5;;8818:2:6;7636:101:5;;;8800:21:6;8857:2;8837:18;;;8830:30;8896:34;8876:18;;;8869:62;8967:26;8947:18;;;8940:54;9011:19;;7636:101:5;8790:246:6;7636:101:5;7748:12;;:48;;-1:-1:-1;;;7748:48:5;;-1:-1:-1;;;;;5045:32:6;;;7748:48:5;;;5027:51:6;5094:18;;;5087:34;;;7748:12:5;;;;:29;;5000:18:6;;7748:48:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7840:43;7875:7;7840:10;7851:12;7840:24;;;;;;;;:::i;:::-;;;;;;;;;;;:30;;;:34;;:43;;;;:::i;:::-;7807:10;7818:12;7807:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:30;;:76;;;;-1:-1:-1;;;;;7893:15:5;;;;;;;;;;:42;;;7945:22;;;;:32;;;7987:24;;;;:31;;-1:-1:-1;;7987:31:5;;;;;;8032:34;7893:42;8032:20;:34::i;:::-;8029:684;;8170:20;:18;:20::i;:::-;8137:10;8148:12;8137:24;;;;;;;;:::i;:::-;;;;;;;;;;;:30;;;:53;:105;;;-1:-1:-1;8194:15:5;:22;522:1;-1:-1:-1;8137:105:5;8133:430;;;8297:40;8324:12;8297:26;:40::i;:::-;8355:22;:20;:22::i;:::-;8400:39;8414:10;8425:12;8414:24;;;;;;;;:::i;:::-;;;;;;;;;;;8400:39;;;;;;:::i;:::-;;;;;;;;7261:1458;;;:::o;8133:430::-;7261:1458;;;:::o;8029:684::-;8645:22;:20;:22::i;4339:165:2:-;4416:7;4442:55;4464:20;:18;:20::i;:::-;4486:10;9254:57:1;;-1:-1:-1;;;9254:57:1;;;4506:27:6;4549:11;;;4542:27;;;4585:12;;;4578:28;;;9218:7:1;;4622:12:6;;9254:57:1;;;;;;;;;;;;9244:68;;;;;;9237:75;;9125:194;;;;;4442:55:2;4435:62;4339:165;-1:-1:-1;;4339:165:2:o;4293:227:1:-;4371:7;4391:17;4410:18;4432:27;4443:4;4449:9;4432:10;:27::i;:::-;4390:69;;;;4469:18;4481:5;4469:11;:18::i;:::-;-1:-1:-1;4504:9:1;4293:227;-1:-1:-1;;;4293:227:1:o;2741:96:3:-;2799:7;2825:5;2829:1;2825;:5;:::i;:::-;2818:12;2741:96;-1:-1:-1;;;2741:96:3:o;9682:243:5:-;9757:4;;9773:124;9794:15;:22;9790:26;;;;9773:124;;;9855:15;9871:1;9855:18;;;;;;;;;;:::i;:::-;;;;;;;;;9839:12;:34;9836:50;;;-1:-1:-1;9882:4:5;;9682:243;-1:-1:-1;;9682:243:5:o;9836:50::-;9818:3;;;:::i;:::-;;;9773:124;;;-1:-1:-1;9913:5:5;;9682:243;-1:-1:-1;;9682:243:5:o;10117:195::-;10206:15;:22;10170:7;;10245:10;:60;;10304:1;10245:60;;;10258:10;10269:15;10285:8;10292:1;10285:6;:8;:::i;:::-;10269:25;;;;;;;;:::i;:::-;;;;;;;;;10258:37;;;;;;;;:::i;:::-;;;;;;;;;;;:43;;;10245:60;10238:67;;;10117:195;:::o;10480:317::-;10575:15;:22;522:1;10610:32;;10607:184;;;-1:-1:-1;10658:15:5;:34;;;;;;;-1:-1:-1;10658:34:5;;;;;;;2845:119::o;10607:184::-;10768:12;10723:15;10739:25;10763:1;522;10739:25;:::i;:::-;10723:42;;;;;;;;:::i;:::-;;;;;;;;;;:57;10547:250;10480:317;:::o;8813:630::-;8868:15;:22;8865:39;;8813:630::o;8865:39::-;8918:7;8914:523;8935:15;:22;:26;;8960:1;;8935:26;:::i;:::-;8931:1;:30;;;8914:523;;;8985:7;8995:3;:1;8997;8995:3;:::i;:::-;8985:13;;8981:446;9004:15;:22;9000:26;;;;8981:446;;;9050:19;9072:15;9088:1;9072:18;;;;;;;;;;:::i;:::-;;;;;;;;;9050:40;;9108:19;9130:15;9146:1;9130:18;;;;;;;;;;:::i;:::-;;;;;;;;;9108:40;;9201:10;9212:11;9201:23;;;;;;;;:::i;:::-;;;;;;;;;;;:29;;;9169:10;9180:11;9169:23;;;;;;;;:::i;:::-;;;;;;;;;;;:29;;;:61;9166:247;;;9253:12;9268:15;9284:1;9268:18;;;;;;;;;;:::i;:::-;;;;;;;;;9253:33;;9329:15;9345:1;9329:18;;;;;;;;;;:::i;:::-;;;;;;;;;9308:15;9324:1;9308:18;;;;;;;;;;:::i;:::-;;;;;;;;:39;;;;9390:4;9369:15;9385:1;9369:18;;;;;;;;;;:::i;:::-;;;;;;;;;;:25;-1:-1:-1;9166:247:5;9032:395;;9028:3;;;;:::i;:::-;;;8981:446;;;-1:-1:-1;8963:3:5;;;:::i;:::-;;;8914:523;;;;8813:630::o;3143:308:2:-;3196:7;3227:4;-1:-1:-1;;;;;3236:12:2;3219:29;;:66;;;;;3269:16;3252:13;:33;3219:66;3215:230;;;-1:-1:-1;3308:24:2;;3143:308::o;3215:230::-;-1:-1:-1;3633:73:2;;;3392:10;3633:73;;;;7625:25:6;;;;3404:12:2;7666:18:6;;;7659:34;3418:15:2;7709:18:6;;;7702:34;3677:13:2;7752:18:6;;;7745:34;3700:4:2;7795:19:6;;;;7788:61;;;;3633:73:2;;;;;;;;;;7597:19:6;;;;3633:73:2;;;3623:84;;;;;;3143:308::o;2228:1279:1:-;2309:7;2318:12;2539:9;:16;2559:2;2539:22;2535:966;;;2828:4;2813:20;;2807:27;2877:4;2862:20;;2856:27;2934:4;2919:20;;2913:27;2577:9;2905:36;2975:25;2986:4;2905:36;2807:27;2856;2975:10;:25::i;:::-;2968:32;;;;;;;;;2535:966;3021:9;:16;3041:2;3021:22;3017:484;;;3290:4;3275:20;;3269:27;3340:4;3325:20;;3319:27;3380:23;3391:4;3269:27;3319;3380:10;:23::i;:::-;3373:30;;;;;;;;3017:484;-1:-1:-1;3450:1:1;;-1:-1:-1;3454:35:1;3017:484;2228:1279;;;;;:::o;533:631::-;610:20;601:5;:29;;;;;;;;:::i;:::-;;597:561;;;533:631;:::o;597:561::-;706:29;697:5;:38;;;;;;;;:::i;:::-;;693:465;;;751:34;;-1:-1:-1;;;751:34:1;;8465:2:6;751:34:1;;;8447:21:6;8504:2;8484:18;;;8477:30;-1:-1:-1;;;8523:18:6;;;8516:54;8587:18;;751:34:1;8437:174:6;693:465:1;815:35;806:5;:44;;;;;;;;:::i;:::-;;802:356;;;866:41;;-1:-1:-1;;;866:41:1;;9655:2:6;866:41:1;;;9637:21:6;9694:2;9674:18;;;9667:30;9733:33;9713:18;;;9706:61;9784:18;;866:41:1;9627:181:6;802:356:1;937:30;928:5;:39;;;;;;;;:::i;:::-;;924:234;;;983:44;;-1:-1:-1;;;983:44:1;;10846:2:6;983:44:1;;;10828:21:6;10885:2;10865:18;;;10858:30;10924:34;10904:18;;;10897:62;-1:-1:-1;;;10975:18:6;;;10968:32;11017:19;;983:44:1;10818:224:6;924:234:1;1057:30;1048:5;:39;;;;;;;;:::i;:::-;;1044:114;;;1103:44;;-1:-1:-1;;;1103:44:1;;11249:2:6;1103:44:1;;;11231:21:6;11288:2;11268:18;;;11261:30;11327:34;11307:18;;;11300:62;-1:-1:-1;;;11378:18:6;;;11371:32;11420:19;;1103:44:1;11221:224:6;5744:1603:1;5870:7;;6794:66;6781:79;;6777:161;;;-1:-1:-1;6892:1:1;;-1:-1:-1;6896:30:1;6876:51;;6777:161;6951:1;:7;;6956:2;6951:7;;:18;;;;;6962:1;:7;;6967:2;6962:7;;6951:18;6947:100;;;-1:-1:-1;7001:1:1;;-1:-1:-1;7005:30:1;6985:51;;6947:100;7158:24;;;7141:14;7158:24;;;;;;;;;8087:25:6;;;8160:4;8148:17;;8128:18;;;8121:45;;;;8182:18;;;8175:34;;;8225:18;;;8218:34;;;7158:24:1;;8059:19:6;;7158:24:1;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7158:24:1;;-1:-1:-1;;7158:24:1;;;-1:-1:-1;;;;;;;7196:20:1;;7192:101;;7248:1;7252:29;7232:50;;;;;;;7192:101;7311:6;-1:-1:-1;7319:20:1;;-1:-1:-1;5744:1603:1;;;;;;;;:::o;4774:379::-;4884:7;;-1:-1:-1;;;;;4981:75:1;;5082:3;5078:12;;;5092:2;5074:21;5121:25;5132:4;5074:21;5141:1;4981:75;5121:10;:25::i;:::-;5114:32;;;;;;4774:379;;;;;;:::o;14:173:6:-;82:20;;-1:-1:-1;;;;;131:31:6;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:347::-;243:8;253:6;307:3;300:4;292:6;288:17;284:27;274:2;;325:1;322;315:12;274:2;-1:-1:-1;348:20:6;;391:18;380:30;;377:2;;;423:1;420;413:12;377:2;460:4;452:6;448:17;436:29;;512:3;505:4;496:6;488;484:19;480:30;477:39;474:2;;;529:1;526;519:12;544:186;603:6;656:2;644:9;635:7;631:23;627:32;624:2;;;672:1;669;662:12;624:2;695:29;714:9;695:29;:::i;735:322::-;812:6;820;828;881:2;869:9;860:7;856:23;852:32;849:2;;;897:1;894;887:12;849:2;920:29;939:9;920:29;:::i;:::-;910:39;996:2;981:18;;968:32;;-1:-1:-1;1047:2:6;1032:18;;;1019:32;;839:218;-1:-1:-1;;;839:218:6:o;1062:277::-;1129:6;1182:2;1170:9;1161:7;1157:23;1153:32;1150:2;;;1198:1;1195;1188:12;1150:2;1230:9;1224:16;1283:5;1276:13;1269:21;1262:5;1259:32;1249:2;;1305:1;1302;1295:12;1344:477;1423:6;1431;1439;1492:2;1480:9;1471:7;1467:23;1463:32;1460:2;;;1508:1;1505;1498:12;1460:2;1544:9;1531:23;1521:33;;1605:2;1594:9;1590:18;1577:32;1632:18;1624:6;1621:30;1618:2;;;1664:1;1661;1654:12;1618:2;1703:58;1753:7;1744:6;1733:9;1729:22;1703:58;:::i;:::-;1450:371;;1780:8;;-1:-1:-1;1677:84:6;;-1:-1:-1;;;;1450:371:6:o;1826:620::-;1923:6;1931;1939;1947;1955;2008:3;1996:9;1987:7;1983:23;1979:33;1976:2;;;2025:1;2022;2015:12;1976:2;2065:9;2052:23;2098:18;2090:6;2087:30;2084:2;;;2130:1;2127;2120:12;2084:2;2169:58;2219:7;2210:6;2199:9;2195:22;2169:58;:::i;:::-;2246:8;;-1:-1:-1;2143:84:6;-1:-1:-1;2300:38:6;;-1:-1:-1;2334:2:6;2319:18;;2300:38;:::i;:::-;1966:480;;;;-1:-1:-1;2290:48:6;;2385:2;2370:18;;2357:32;;-1:-1:-1;2436:2:6;2421:18;2408:32;;1966:480;-1:-1:-1;;1966:480:6:o;2451:248::-;2519:6;2527;2580:2;2568:9;2559:7;2555:23;2551:32;2548:2;;;2596:1;2593;2586:12;2548:2;-1:-1:-1;;2619:23:6;;;2689:2;2674:18;;;2661:32;;-1:-1:-1;2538:161:6:o;2704:472::-;2746:3;2784:5;2778:12;2811:6;2806:3;2799:19;2836:1;2846:162;2860:6;2857:1;2854:13;2846:162;;;2922:4;2978:13;;;2974:22;;2968:29;2950:11;;;2946:20;;2939:59;2875:12;2846:162;;;3026:6;3023:1;3020:13;3017:2;;;3092:1;3085:4;3076:6;3071:3;3067:16;3063:27;3056:38;3017:2;-1:-1:-1;3158:2:6;3137:15;-1:-1:-1;;3133:29:6;3124:39;;;;3165:4;3120:50;;2754:422;-1:-1:-1;;2754:422:6:o;3181:1062::-;3266:12;;3231:3;;3321:1;3341:18;;;;3394;;;;3421:2;;3475:4;3467:6;3463:17;3453:27;;3421:2;3501;3549;3541:6;3538:14;3518:18;3515:38;3512:2;;;3595:10;3590:3;3586:20;3583:1;3576:31;3630:4;3627:1;3620:15;3658:4;3655:1;3648:15;3512:2;14097:19;;;14149:4;14140:14;;3779:18;3806:104;;;;3924:1;3919:318;;;;3772:465;;3806:104;-1:-1:-1;;3841:24:6;;3827:39;;3886:14;;;;-1:-1:-1;3806:104:6;;3919:318;13937:1;13930:14;;;13974:4;13961:18;;4013:1;4027:167;4041:6;4038:1;4035:13;4027:167;;;4121:14;;4106:13;;;4099:37;4164:16;;;;4056:10;;4027:167;;;4214:13;;;-1:-1:-1;;3772:465:6;;;;;;;;3239:1004;;;;:::o;5132:1361::-;5326:4;5355:2;5395;5384:9;5380:18;5425:2;5414:9;5407:21;5448:6;5483;5477:13;5514:6;5506;5499:22;5540:2;5530:12;;5573:2;5562:9;5558:18;5551:25;;5635:2;5625:6;5622:1;5618:14;5607:9;5603:30;5599:39;5673:2;5665:6;5661:15;5694:1;5704:760;5718:6;5715:1;5712:13;5704:760;;;5811:2;5807:7;5795:9;5787:6;5783:22;5779:36;5774:3;5767:49;5845:6;5839:13;5875:4;5918:2;5912:9;5949:2;5941:6;5934:18;5979:48;6023:2;6015:6;6011:15;5997:12;5979:48;:::i;:::-;5965:62;;;6088:4;6082:2;6078;6074:11;6068:18;6064:29;6059:2;6051:6;6047:15;6040:54;6143:2;6139;6135:11;6129:18;6196:6;6188;6184:19;6179:2;6171:6;6167:15;6160:44;6231:41;6265:6;6249:14;6231:41;:::i;:::-;6295:4;6342:11;;;6336:18;6319:15;;;;6312:43;;;;-1:-1:-1;6442:12:6;;;;6217:55;-1:-1:-1;6407:15:6;;;;5740:1;5733:9;5704:760;;;-1:-1:-1;6481:6:6;;5335:1158;-1:-1:-1;;;;;;;;5335:1158:6:o;12693:611::-;12871:2;12860:9;12853:21;12910:4;12905:2;12894:9;12890:18;12883:32;12834:4;12938:54;12987:3;12976:9;12972:19;12964:6;12938:54;:::i;:::-;13050:4;13038:17;;13032:24;13058:4;13028:35;13023:2;13008:18;;13001:63;13104:22;;;-1:-1:-1;;13100:36:6;13095:2;13080:18;;13073:64;13160:52;13108:6;13198:4;13186:17;;13160:52;:::i;:::-;13146:66;;13268:4;13260:6;13256:17;13250:24;13243:4;13232:9;13228:20;13221:54;13292:6;13284:14;;;12843:461;;;;:::o;14165:128::-;14205:3;14236:1;14232:6;14229:1;14226:13;14223:2;;;14242:18;;:::i;:::-;-1:-1:-1;14278:9:6;;14213:80::o;14298:204::-;14336:3;14372:4;14369:1;14365:12;14404:4;14401:1;14397:12;14439:3;14433:4;14429:14;14424:3;14421:23;14418:2;;;14447:18;;:::i;:::-;14483:13;;14344:158;-1:-1:-1;;;14344:158:6:o;14507:125::-;14547:4;14575:1;14572;14569:8;14566:2;;;14580:18;;:::i;:::-;-1:-1:-1;14617:9:6;;14556:76::o;14637:380::-;14716:1;14712:12;;;;14759;;;14780:2;;14834:4;14826:6;14822:17;14812:27;;14780:2;14887;14879:6;14876:14;14856:18;14853:38;14850:2;;;14933:10;14928:3;14924:20;14921:1;14914:31;14968:4;14965:1;14958:15;14996:4;14993:1;14986:15;15022:135;15061:3;-1:-1:-1;;15082:17:6;;15079:2;;;15102:18;;:::i;:::-;-1:-1:-1;15149:1:6;15138:13;;15069:88::o;15162:175::-;15199:3;15243:4;15236:5;15232:16;15272:4;15263:7;15260:17;15257:2;;;15280:18;;:::i;:::-;15329:1;15316:15;;15207:130;-1:-1:-1;;15207:130:6:o;15342:127::-;15403:10;15398:3;15394:20;15391:1;15384:31;15434:4;15431:1;15424:15;15458:4;15455:1;15448:15;15474:127;15535:10;15530:3;15526:20;15523:1;15516:31;15566:4;15563:1;15556:15;15590:4;15587:1;15580:15;15606:127;15667:10;15662:3;15658:20;15655:1;15648:31;15698:4;15695:1;15688:15;15722:4;15719:1;15712:15;15738:127;15799:10;15794:3;15790:20;15787:1;15780:31;15830:4;15827:1;15820:15;15854:4;15851:1;15844:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "citizenHasVoted(address)": {
        "notice": "Returns the voting status of _citizenAddress",
        "params": {
          "_citizenAddress": "Citizen's address"
        },
        "returns": {
          "_0": "The Vote struct"
        }
      },
      "citizenIsRegistered(address)": {
        "notice": "Returns the registration status of _citizenAddress",
        "params": {
          "_citizenAddress": "Citizen's address"
        },
        "returns": {
          "_0": "Boolean : True if citizen is registered"
        }
      },
      "delegatedVote(bytes,address,uint256,uint256)": {
        "notice": "Used for delegating a vote - can be called by anyone having a signature and rest of the information",
        "params": {
          "amount": "Amount of WKND tokens to be used in voting",
          "candidateId": "Candidate's ID",
          "citizenAddress": "Citizen's address"
        }
      },
      "endTheElection()": {
        "notice": "Ends the election - there is no voting after",
        "returns": {
          "_0": "Boolean : True if successful"
        }
      },
      "getDigest(address,uint256,uint256)": {
        "notice": "Returns a digest that will be used in verification of a signature",
        "params": {
          "amount": "Amount of WKND tokens to be used in voting",
          "candidateId": "Candidate's ID",
          "citizenAddress": "Citizen's address"
        },
        "returns": {
          "_0": "Digest"
        }
      },
      "getNonce(address)": {
        "notice": "Returns a nonce fo the specified citizenAddress",
        "params": {
          "citizenAddress": "Citizen's address"
        },
        "returns": {
          "_0": "Nonce"
        }
      },
      "getSigner(bytes32,bytes)": {
        "notice": "Return the signer of a message",
        "params": {
          "digest": "Digested message",
          "signature": "Singature"
        },
        "returns": {
          "_0": "Signer of a message"
        }
      },
      "register(address)": {
        "notice": "Registers the _citizen to be able to participate in the elections",
        "params": {
          "_citizen": "Citizen's address"
        },
        "returns": {
          "_0": "Boolean : True if successful"
        }
      },
      "seeAllCandidates()": {
        "notice": "Returns an array of all candidates involved in the election",
        "returns": {
          "_0": "Array"
        }
      },
      "vote(uint256,uint256)": {
        "notice": "Voting function - casts a vote from msg.sender",
        "params": {
          "_amount": "Amount of WKND tokens to be used for voting",
          "_candidateId": "Candidate ID"
        }
      },
      "winningCandidates()": {
        "notice": "Returns the Election's top 3 candidates (winning candidates)",
        "returns": {
          "_0": "An array of top candidates"
        }
      }
    },
    "notice": "Voters Register (receive 1 WKND) token after which, they can particapate in the elections",
    "title": "Voting Contract",
    "version": 1
  },
  "offset": [
    447,
    10799
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4420E486 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x4420E486 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x7107852A EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xB384ABEF EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xB8D06BC4 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0xDE90BB6F EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xF7B2EC0D EQ PUSH2 0x1D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCF2EE64 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x1565507E EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x2D0335AB EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x30226EFE EQ PUSH2 0x13B JUMPI DUP1 PUSH4 0x377968D4 EQ PUSH2 0x172 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDA PUSH2 0xBC CALLDATASIZE PUSH1 0x4 PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x16A7 JUMP JUMPDEST PUSH2 0x1FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x12D PUSH2 0x112 CALLDATASIZE PUSH1 0x4 PUSH2 0x15EB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x149 CALLDATASIZE PUSH1 0x4 PUSH2 0x15EB JUMP JUMPDEST PUSH2 0x319 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP1 DUP3 ADD MSTORE SWAP2 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH2 0x17A PUSH2 0x386 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE6 SWAP2 SWAP1 PUSH2 0x181C JUMP JUMPDEST PUSH2 0xDA PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x15EB JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST PUSH2 0xDA PUSH2 0x72F JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x170D JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST PUSH2 0x12D PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1606 JUMP JUMPDEST PUSH2 0x7AD JUMP JUMPDEST PUSH2 0x17A PUSH2 0x83D JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1DE CALLDATASIZE PUSH1 0x4 PUSH2 0x165B JUMP JUMPDEST PUSH2 0x9DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208 DUP5 DUP5 DUP5 PUSH2 0x7AD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x217 DUP3 DUP9 DUP9 PUSH2 0x9DB JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x28B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x46756E6374696F6E2060766F746560203A20696E76616C6964207369676E6174 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x757265 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x45434453413A20696E76616C6964207369676E6174757265 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x282 JUMP JUMPDEST PUSH2 0x2E7 DUP6 DUP6 DUP6 PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x30B DUP4 PUSH2 0x199A JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x33F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x60 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x0 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3A7 JUMPI PUSH2 0x3A7 PUSH2 0x1A17 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x406 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x3F3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3C5 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x5 PUSH1 0x6 DUP3 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x431 JUMPI PUSH2 0x431 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP2 SLOAD DUP2 LT PUSH2 0x44C JUMPI PUSH2 0x44C PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x475 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A1 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x40 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x518 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x544 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x591 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x566 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x591 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x574 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x5B9 JUMPI PUSH2 0x5B9 PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 PUSH2 0x5CE SWAP1 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 POP PUSH2 0x40C JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0x67E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x46 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520636974697A656E20686173206265656E207265676973746572656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2D20746865726520617265206E6F206D756C7469706C65207265676973747261 PUSH1 0x64 DUP3 ADD MSTORE PUSH6 0x3A34B7B73997 PUSH1 0xD1 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBC0E60E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 AND SWAP1 PUSH4 0xBC0E60E1 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6E1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x705 SWAP2 SWAP1 PUSH2 0x1639 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x78A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79204B494E472063616E20656E642074686520656C656374696F6E2E00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x282 JUMP JUMPDEST POP PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH2 0x7A9 CALLER DUP4 DUP4 PUSH2 0xA25 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH32 0xA56F781F7251D29FCA13933D69C34316EA277F967C4A968F77DB62D983FE1120 SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 SWAP2 SWAP1 PUSH2 0x834 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xDD6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x9D2 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x894 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8C0 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x90D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8E2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x90D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8F0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0xFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x2 DUP3 ADD DUP1 SLOAD PUSH1 0x40 SWAP1 SWAP3 ADD SWAP2 PUSH2 0x937 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x963 SWAP1 PUSH2 0x1965 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x985 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x993 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x861 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA1D DUP5 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xE2A SWAP3 POP POP POP JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xA91 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x566F74696E6720666F72207468652063757272656E7420656C656374696F6E20 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x3430B99032B73232B21017 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ ISZERO PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520636974697A656E20616C726561647920766F74656420696E20746865 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1032B632B1BA34B7B71017 PUSH1 0xA9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x1 DUP2 LT ISZERO PUSH2 0xB82 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E74206973206C6573736572207468616E20746865205245 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x23A4A9AA2920AA24A7A71020A6A7AAA72A17 PUSH1 0x71 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP3 LT PUSH2 0xBF9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x38 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5468652063616E6469646174652049442067726561746572207468616E207468 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x65206E756D626572206F662063616E6469646174657320210000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x14294617 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x28528C2E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC5B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC7F SWAP2 SWAP1 PUSH2 0x1639 JUMP JUMPDEST POP PUSH2 0xCB7 DUP2 PUSH1 0x5 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0xC97 JUMPI PUSH2 0xC97 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD PUSH2 0xE4E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xCCA JUMPI PUSH2 0xCCA PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x4 SWAP3 DUP4 MUL ADD PUSH1 0x3 ADD SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xD18 DUP3 PUSH2 0xE61 JUMP JUMPDEST PUSH2 0xDCE JUMPI PUSH2 0xD24 PUSH2 0xEBC JUMP JUMPDEST PUSH1 0x5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xD37 JUMPI PUSH2 0xD37 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD GT DUP1 PUSH2 0xD57 JUMPI POP PUSH1 0x6 SLOAD PUSH1 0x3 GT JUMPDEST ISZERO PUSH2 0xDC9 JUMPI PUSH2 0xD65 DUP3 PUSH2 0xF21 JUMP JUMPDEST PUSH2 0xD6D PUSH2 0xF92 JUMP JUMPDEST PUSH32 0x6FEB6D2E3B854B96FF5A9F8E857F483FBFF471F03C8F8451FDEDFFE83CC605B PUSH1 0x5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xDA1 JUMPI PUSH2 0xDA1 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD PUSH2 0xDBC SWAP2 SWAP1 PUSH2 0x18BB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xDC9 PUSH2 0xF92 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE24 PUSH2 0xDE3 PUSH2 0x1124 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xE39 DUP6 DUP6 PUSH2 0x124B JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xE46 DUP2 PUSH2 0x12BB JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE5A DUP3 DUP5 PUSH2 0x1911 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0xEB3 JUMPI PUSH1 0x6 DUP2 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0xE88 JUMPI PUSH2 0xE88 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP4 EQ ISZERO PUSH2 0xEA3 JUMPI POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEAC DUP2 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 POP PUSH2 0xE65 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x0 SWAP1 DUP1 PUSH2 0xECE JUMPI PUSH1 0x0 PUSH2 0xF1B JUMP JUMPDEST PUSH1 0x5 PUSH1 0x6 PUSH2 0xEDD PUSH1 0x1 DUP5 PUSH2 0x194E JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xEED JUMPI PUSH2 0xEED PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP2 SLOAD DUP2 LT PUSH2 0xF08 JUMPI PUSH2 0xF08 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF63 JUMPI POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SSTORE JUMP JUMPDEST DUP2 PUSH1 0x6 PUSH2 0xF72 PUSH1 0x1 PUSH1 0x3 PUSH2 0x194E JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0xF82 JUMPI PUSH2 0xF82 PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH2 0xF9B JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD PUSH2 0xFAD SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x194E JUMP JUMPDEST DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x1121 JUMPI PUSH1 0x0 PUSH2 0xFC4 DUP3 PUSH1 0x1 PUSH2 0x1929 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0x1110 JUMPI PUSH1 0x0 PUSH1 0x6 DUP4 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0xFEC JUMPI PUSH2 0xFEC PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x6 DUP4 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1011 JUMPI PUSH2 0x1011 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x5 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1031 JUMPI PUSH2 0x1031 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD PUSH1 0x5 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1056 JUMPI PUSH2 0x1056 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x3 ADD SLOAD LT ISZERO PUSH2 0x10FD JUMPI PUSH1 0x0 PUSH1 0x6 DUP6 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1086 JUMPI PUSH2 0x1086 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP PUSH1 0x6 DUP5 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x10A9 JUMPI PUSH2 0x10A9 PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x6 DUP7 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x10CA JUMPI PUSH2 0x10CA PUSH2 0x1A01 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x6 DUP6 PUSH1 0xFF AND DUP2 SLOAD DUP2 LT PUSH2 0x10EF JUMPI PUSH2 0x10EF PUSH2 0x1A01 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE POP JUMPDEST POP POP DUP1 PUSH2 0x1109 SWAP1 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 POP PUSH2 0xFC7 JUMP JUMPDEST POP PUSH2 0x111A DUP2 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 POP PUSH2 0xF9E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x117D JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x11A7 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 EQ ISZERO PUSH2 0x1282 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x1276 DUP8 DUP3 DUP6 DUP6 PUSH2 0x1471 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x12B4 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x40 EQ ISZERO PUSH2 0x12AC JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x12A1 DUP7 DUP4 DUP4 PUSH2 0x155E JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x12B4 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x12CF JUMPI PUSH2 0x12CF PUSH2 0x19EB JUMP JUMPDEST EQ ISZERO PUSH2 0x12D8 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x12EC JUMPI PUSH2 0x12EC PUSH2 0x19EB JUMP JUMPDEST EQ ISZERO PUSH2 0x1335 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x45434453413A20696E76616C6964207369676E6174757265 PUSH1 0x40 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1349 JUMPI PUSH2 0x1349 PUSH2 0x19EB JUMP JUMPDEST EQ ISZERO PUSH2 0x1397 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x13AB JUMPI PUSH2 0x13AB PUSH2 0x19EB JUMP JUMPDEST EQ ISZERO PUSH2 0x1404 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1418 JUMPI PUSH2 0x1418 PUSH2 0x19EB JUMP JUMPDEST EQ ISZERO PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x282 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x14A8 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1555 JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x14C0 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x14D1 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x1555 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1525 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x154E JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1555 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 AND PUSH1 0xFF DUP5 SWAP1 SHR PUSH1 0x1B ADD PUSH2 0x157F DUP8 DUP3 DUP9 DUP6 PUSH2 0x1471 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x15A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x15BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE5A DUP3 PUSH2 0x158D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1624 DUP5 PUSH2 0x158D JUMP JUMPDEST SWAP6 PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 SWAP1 SWAP5 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x168E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x169A DUP7 DUP3 DUP8 ADD PUSH2 0x15A9 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x16BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x16E2 DUP9 DUP3 DUP10 ADD PUSH2 0x15A9 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH2 0x16F5 SWAP1 POP PUSH1 0x20 DUP8 ADD PUSH2 0x158D JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1720 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1755 JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x1739 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1767 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND DUP1 PUSH2 0x1796 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST PUSH1 0x20 DUP1 DUP5 LT DUP3 EQ ISZERO PUSH2 0x17B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 DUP1 ISZERO PUSH2 0x17D3 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x17E4 JUMPI PUSH2 0x180F JUMP JUMPDEST PUSH1 0xFF NOT DUP8 AND DUP3 MSTORE DUP3 DUP3 ADD SWAP8 POP PUSH2 0x180F JUMP JUMPDEST PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP8 DUP2 LT ISZERO PUSH2 0x1809 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE SWAP1 DUP7 ADD SWAP1 DUP5 ADD PUSH2 0x17F0 JUMP JUMPDEST DUP4 ADD SWAP9 POP POP JUMPDEST POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x18AD JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 MLOAD DUP2 DUP7 MSTORE PUSH2 0x1869 DUP3 DUP8 ADD DUP3 PUSH2 0x172F JUMP JUMPDEST SWAP2 POP POP PUSH1 0xFF DUP10 DUP4 ADD MLOAD AND DUP10 DUP7 ADD MSTORE DUP8 DUP3 ADD MLOAD DUP6 DUP3 SUB DUP10 DUP8 ADD MSTORE PUSH2 0x188C DUP3 DUP3 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x60 SWAP4 DUP5 ADD MLOAD SWAP7 SWAP1 SWAP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1843 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x18D5 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x177C JUMP JUMPDEST PUSH1 0x1 DUP5 ADD SLOAD PUSH1 0xFF AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x1F NOT ADD PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x18FB DUP2 PUSH1 0x2 DUP7 ADD PUSH2 0x177C JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x80 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1924 JUMPI PUSH2 0x1924 PUSH2 0x19D5 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x1946 JUMPI PUSH2 0x1946 PUSH2 0x19D5 JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1960 JUMPI PUSH2 0x1960 PUSH2 0x19D5 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1979 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x5D5 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x19AE JUMPI PUSH2 0x19AE PUSH2 0x19D5 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 EQ ISZERO PUSH2 0x19CC JUMPI PUSH2 0x19CC PUSH2 0x19D5 JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xC7 PUSH15 0x96027E622E6ADECCD518A7F3C9C5CD 0x4E 0xD4 0xC0 0xCD JUMPDEST CREATE PC SDIV PUSH10 0xA669F92C4864736F6C63 NUMBER STOP ADDMOD MOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "5": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "CALLVALUE",
      "path": "5"
    },
    "6": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "7": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "8": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "12": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "REVERT",
      "path": "5"
    },
    "16": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "17": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "POP",
      "path": "5"
    },
    "18": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "21": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "LT",
      "path": "5"
    },
    "22": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA9"
    },
    "25": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "26": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "CALLDATALOAD",
      "path": "5"
    },
    "29": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "SHR",
      "path": "5"
    },
    "32": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "33": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x4420E486"
    },
    "38": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "GT",
      "path": "5"
    },
    "39": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x71"
    },
    "42": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "43": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "44": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x4420E486"
    },
    "49": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "50": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x187"
    },
    "53": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "54": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "55": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x7107852A"
    },
    "60": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "61": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x19A"
    },
    "64": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "65": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "66": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xB384ABEF"
    },
    "71": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "72": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A2"
    },
    "75": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "76": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "77": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xB8D06BC4"
    },
    "82": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "83": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1B5"
    },
    "86": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "87": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "88": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xDE90BB6F"
    },
    "93": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "94": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1C8"
    },
    "97": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "98": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "99": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xF7B2EC0D"
    },
    "104": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "105": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1D0"
    },
    "108": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "109": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "111": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "112": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "REVERT",
      "path": "5"
    },
    "113": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "114": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "115": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xCF2EE64"
    },
    "120": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "121": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xAE"
    },
    "124": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "125": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "126": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x1565507E"
    },
    "131": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "132": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEF"
    },
    "135": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "136": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "137": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x2D0335AB"
    },
    "142": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "143": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x104"
    },
    "146": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "147": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "148": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x30226EFE"
    },
    "153": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "154": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x13B"
    },
    "157": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "158": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "159": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x377968D4"
    },
    "164": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "EQ",
      "path": "5"
    },
    "165": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x172"
    },
    "168": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "169": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "170": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "172": {
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "DUP1",
      "path": "5"
    },
    "173": {
      "first_revert": true,
      "fn": null,
      "offset": [
        447,
        10799
      ],
      "op": "REVERT",
      "path": "5"
    },
    "174": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "175": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDA"
    },
    "178": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xBC"
    },
    "181": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "182": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "184": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x15EB"
    },
    "187": {
      "fn": "Voting.citizenIsRegistered",
      "jump": "i",
      "offset": [
        2516,
        2652
      ],
      "op": "JUMP",
      "path": "5"
    },
    "188": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "193": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "195": {
      "op": "SHL"
    },
    "196": {
      "op": "SUB"
    },
    "197": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "AND",
      "path": "5",
      "statement": 0
    },
    "198": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2591,
        2595
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "200": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "201": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "DUP2",
      "path": "5"
    },
    "202": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "203": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2627
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "205": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "207": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "208": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "210": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "211": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "212": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "213": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "215": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "AND",
      "path": "5"
    },
    "216": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2615,
        2644
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "217": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "JUMP",
      "path": "5"
    },
    "218": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "219": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "221": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "222": {
      "op": "SWAP1"
    },
    "223": {
      "op": "ISZERO"
    },
    "224": {
      "op": "ISZERO"
    },
    "225": {
      "op": "DUP2"
    },
    "226": {
      "op": "MSTORE"
    },
    "227": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "229": {
      "op": "ADD"
    },
    "230": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "231": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "233": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "234": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "DUP1",
      "path": "5"
    },
    "235": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "236": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "SUB",
      "path": "5"
    },
    "237": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "238": {
      "fn": "Voting.citizenIsRegistered",
      "offset": [
        2516,
        2652
      ],
      "op": "RETURN",
      "path": "5"
    },
    "239": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "240": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x102"
    },
    "243": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFD"
    },
    "246": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "247": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "249": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x16A7"
    },
    "252": {
      "fn": "Voting.delegatedVote",
      "jump": "i",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMP",
      "path": "5"
    },
    "253": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "254": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1FB"
    },
    "257": {
      "fn": "Voting.delegatedVote",
      "jump": "i",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMP",
      "path": "5"
    },
    "258": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "259": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "STOP",
      "path": "5"
    },
    "260": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "261": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x12D"
    },
    "264": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x112"
    },
    "267": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "268": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "270": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x15EB"
    },
    "273": {
      "fn": "Voting.getNonce",
      "jump": "i",
      "offset": [
        4087,
        4214
      ],
      "op": "JUMP",
      "path": "5"
    },
    "274": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "277": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "279": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "281": {
      "op": "SHL"
    },
    "282": {
      "op": "SUB"
    },
    "283": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "AND",
      "path": "5",
      "statement": 1
    },
    "284": {
      "fn": "Voting.getNonce",
      "offset": [
        4150,
        4157
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "286": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "287": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "DUP2",
      "path": "5"
    },
    "288": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "289": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4182
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "291": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "293": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "294": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "296": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "297": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "298": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "299": {
      "fn": "Voting.getNonce",
      "offset": [
        4176,
        4198
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "300": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "JUMP",
      "path": "5"
    },
    "301": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "302": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "304": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "305": {
      "op": "SWAP1"
    },
    "306": {
      "op": "DUP2"
    },
    "307": {
      "op": "MSTORE"
    },
    "308": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "310": {
      "op": "ADD"
    },
    "311": {
      "fn": "Voting.getNonce",
      "offset": [
        4087,
        4214
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE6"
    },
    "314": {
      "op": "JUMP"
    },
    "315": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "316": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x14E"
    },
    "319": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x149"
    },
    "322": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "323": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "325": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x15EB"
    },
    "328": {
      "fn": "Voting.citizenHasVoted",
      "jump": "i",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMP",
      "path": "5"
    },
    "329": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "330": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x319"
    },
    "333": {
      "fn": "Voting.citizenHasVoted",
      "jump": "i",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMP",
      "path": "5"
    },
    "334": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "335": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "337": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "DUP1",
      "path": "5"
    },
    "338": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "339": {
      "op": "DUP3"
    },
    "340": {
      "op": "MLOAD"
    },
    "341": {
      "op": "DUP2"
    },
    "342": {
      "op": "MSTORE"
    },
    "343": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "345": {
      "op": "DUP1"
    },
    "346": {
      "op": "DUP5"
    },
    "347": {
      "op": "ADD"
    },
    "348": {
      "op": "MLOAD"
    },
    "349": {
      "op": "SWAP1"
    },
    "350": {
      "op": "DUP3"
    },
    "351": {
      "op": "ADD"
    },
    "352": {
      "op": "MSTORE"
    },
    "353": {
      "op": "SWAP2"
    },
    "354": {
      "op": "DUP2"
    },
    "355": {
      "op": "ADD"
    },
    "356": {
      "op": "MLOAD"
    },
    "357": {
      "op": "ISZERO"
    },
    "358": {
      "op": "ISZERO"
    },
    "359": {
      "op": "SWAP1"
    },
    "360": {
      "op": "DUP3"
    },
    "361": {
      "op": "ADD"
    },
    "362": {
      "op": "MSTORE"
    },
    "363": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "365": {
      "op": "ADD"
    },
    "366": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE6"
    },
    "369": {
      "op": "JUMP"
    },
    "370": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "371": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x17A"
    },
    "374": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x386"
    },
    "377": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3410,
        3706
      ],
      "op": "JUMP",
      "path": "5"
    },
    "378": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "379": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "381": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "382": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE6"
    },
    "385": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "386": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "387": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x181C"
    },
    "390": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3410,
        3706
      ],
      "op": "JUMP",
      "path": "5"
    },
    "391": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "392": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDA"
    },
    "395": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x195"
    },
    "398": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "399": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "401": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x15EB"
    },
    "404": {
      "fn": "Voting.register",
      "jump": "i",
      "offset": [
        1986,
        2322
      ],
      "op": "JUMP",
      "path": "5"
    },
    "405": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "406": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5DB"
    },
    "409": {
      "fn": "Voting.register",
      "jump": "i",
      "offset": [
        1986,
        2322
      ],
      "op": "JUMP",
      "path": "5"
    },
    "410": {
      "fn": "Voting.endTheElection",
      "offset": [
        1610,
        1795
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "411": {
      "fn": "Voting.endTheElection",
      "offset": [
        1610,
        1795
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDA"
    },
    "414": {
      "fn": "Voting.endTheElection",
      "offset": [
        1610,
        1795
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x72F"
    },
    "417": {
      "fn": "Voting.endTheElection",
      "jump": "i",
      "offset": [
        1610,
        1795
      ],
      "op": "JUMP",
      "path": "5"
    },
    "418": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "419": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x102"
    },
    "422": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1B0"
    },
    "425": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "426": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "428": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x170D"
    },
    "431": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMP",
      "path": "5"
    },
    "432": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "433": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x79E"
    },
    "436": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMP",
      "path": "5"
    },
    "437": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "438": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x12D"
    },
    "441": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1C3"
    },
    "444": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "445": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "447": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1606"
    },
    "450": {
      "fn": "Voting.getDigest",
      "jump": "i",
      "offset": [
        4496,
        5028
      ],
      "op": "JUMP",
      "path": "5"
    },
    "451": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "452": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x7AD"
    },
    "455": {
      "fn": "Voting.getDigest",
      "jump": "i",
      "offset": [
        4496,
        5028
      ],
      "op": "JUMP",
      "path": "5"
    },
    "456": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3826,
        3931
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "457": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3826,
        3931
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x17A"
    },
    "460": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3826,
        3931
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x83D"
    },
    "463": {
      "fn": "Voting.seeAllCandidates",
      "jump": "i",
      "offset": [
        3826,
        3931
      ],
      "op": "JUMP",
      "path": "5"
    },
    "464": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "465": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1E3"
    },
    "468": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1DE"
    },
    "471": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "CALLDATASIZE",
      "path": "5"
    },
    "472": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "474": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x165B"
    },
    "477": {
      "fn": "Voting.getSigner",
      "jump": "i",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMP",
      "path": "5"
    },
    "478": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "479": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9DB"
    },
    "482": {
      "fn": "Voting.getSigner",
      "jump": "i",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMP",
      "path": "5"
    },
    "483": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "484": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "486": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "487": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "489": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "491": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "493": {
      "op": "SHL"
    },
    "494": {
      "op": "SUB"
    },
    "495": {
      "op": "SWAP1"
    },
    "496": {
      "op": "SWAP2"
    },
    "497": {
      "op": "AND"
    },
    "498": {
      "op": "DUP2"
    },
    "499": {
      "op": "MSTORE"
    },
    "500": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "502": {
      "op": "ADD"
    },
    "503": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE6"
    },
    "506": {
      "op": "JUMP"
    },
    "507": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "508": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5779,
        5793
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "510": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5796,
        5842
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x208"
    },
    "513": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5806,
        5820
      ],
      "op": "DUP5",
      "path": "5"
    },
    "514": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5822,
        5833
      ],
      "op": "DUP5",
      "path": "5"
    },
    "515": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5835,
        5841
      ],
      "op": "DUP5",
      "path": "5"
    },
    "516": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5796,
        5805
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x7AD"
    },
    "519": {
      "fn": "Voting.delegatedVote",
      "jump": "i",
      "offset": [
        5796,
        5842
      ],
      "op": "JUMP",
      "path": "5"
    },
    "520": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5796,
        5842
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "521": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5779,
        5842
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "522": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5779,
        5842
      ],
      "op": "POP",
      "path": "5"
    },
    "523": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5852,
        5866
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "525": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5869,
        5897
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x217"
    },
    "528": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5879,
        5885
      ],
      "op": "DUP3",
      "path": "5"
    },
    "529": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5887,
        5896
      ],
      "op": "DUP9",
      "path": "5"
    },
    "530": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5887,
        5896
      ],
      "op": "DUP9",
      "path": "5"
    },
    "531": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5869,
        5878
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9DB"
    },
    "534": {
      "fn": "Voting.delegatedVote",
      "jump": "i",
      "offset": [
        5869,
        5897
      ],
      "op": "JUMP",
      "path": "5"
    },
    "535": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5869,
        5897
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "536": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5852,
        5897
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "537": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5852,
        5897
      ],
      "op": "POP",
      "path": "5"
    },
    "538": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5925,
        5939
      ],
      "op": "DUP5",
      "path": "5",
      "statement": 2
    },
    "539": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "541": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "543": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "545": {
      "op": "SHL"
    },
    "546": {
      "op": "SUB"
    },
    "547": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5915,
        5939
      ],
      "op": "AND",
      "path": "5"
    },
    "548": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5915,
        5921
      ],
      "op": "DUP2",
      "path": "5"
    },
    "549": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "553": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "555": {
      "op": "SHL"
    },
    "556": {
      "op": "SUB"
    },
    "557": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5915,
        5939
      ],
      "op": "AND",
      "path": "5"
    },
    "558": {
      "branch": 62,
      "fn": "Voting.delegatedVote",
      "offset": [
        5915,
        5939
      ],
      "op": "EQ",
      "path": "5"
    },
    "559": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x28B"
    },
    "562": {
      "branch": 62,
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "563": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "565": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "566": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "570": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "572": {
      "op": "SHL"
    },
    "573": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "DUP2",
      "path": "5"
    },
    "574": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "575": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "577": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "579": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "DUP3",
      "path": "5"
    },
    "580": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "ADD",
      "path": "5"
    },
    "581": {
      "op": "MSTORE"
    },
    "582": {
      "op": "PUSH1",
      "value": "0x23"
    },
    "584": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "586": {
      "op": "DUP3"
    },
    "587": {
      "op": "ADD"
    },
    "588": {
      "op": "MSTORE"
    },
    "589": {
      "op": "PUSH32",
      "value": "0x46756E6374696F6E2060766F746560203A20696E76616C6964207369676E6174"
    },
    "622": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "624": {
      "op": "DUP3"
    },
    "625": {
      "op": "ADD"
    },
    "626": {
      "op": "MSTORE"
    },
    "627": {
      "op": "PUSH3",
      "value": "0x757265"
    },
    "631": {
      "op": "PUSH1",
      "value": "0xE8"
    },
    "633": {
      "op": "SHL"
    },
    "634": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "636": {
      "op": "DUP3"
    },
    "637": {
      "op": "ADD"
    },
    "638": {
      "op": "MSTORE"
    },
    "639": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "641": {
      "op": "ADD"
    },
    "642": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "643": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "645": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "646": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "DUP1",
      "path": "5"
    },
    "647": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "648": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "SUB",
      "path": "5"
    },
    "649": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "650": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "5"
    },
    "651": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5907,
        5979
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "652": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "654": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "656": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "658": {
      "op": "SHL"
    },
    "659": {
      "op": "SUB"
    },
    "660": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5997,
        6017
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 3
    },
    "661": {
      "branch": 63,
      "fn": "Voting.delegatedVote",
      "offset": [
        5997,
        6017
      ],
      "op": "AND",
      "path": "5"
    },
    "662": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x2DC"
    },
    "665": {
      "branch": 63,
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "666": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "668": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "669": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "673": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "675": {
      "op": "SHL"
    },
    "676": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "DUP2",
      "path": "5"
    },
    "677": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "678": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "680": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "682": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "DUP3",
      "path": "5"
    },
    "683": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "ADD",
      "path": "5"
    },
    "684": {
      "op": "MSTORE"
    },
    "685": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "687": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "689": {
      "op": "DUP3"
    },
    "690": {
      "op": "ADD"
    },
    "691": {
      "op": "MSTORE"
    },
    "692": {
      "op": "PUSH24",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265"
    },
    "717": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "719": {
      "op": "SHL"
    },
    "720": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "722": {
      "op": "DUP3"
    },
    "723": {
      "op": "ADD"
    },
    "724": {
      "op": "MSTORE"
    },
    "725": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "727": {
      "op": "ADD"
    },
    "728": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "731": {
      "op": "JUMP"
    },
    "732": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5989,
        6046
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "733": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6057,
        6099
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 4,
      "value": "0x2E7"
    },
    "736": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6063,
        6077
      ],
      "op": "DUP6",
      "path": "5"
    },
    "737": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6079,
        6090
      ],
      "op": "DUP6",
      "path": "5"
    },
    "738": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6092,
        6098
      ],
      "op": "DUP6",
      "path": "5"
    },
    "739": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6057,
        6062
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA25"
    },
    "742": {
      "fn": "Voting.delegatedVote",
      "jump": "i",
      "offset": [
        6057,
        6099
      ],
      "op": "JUMP",
      "path": "5"
    },
    "743": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6057,
        6099
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "744": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "746": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "748": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "750": {
      "op": "SHL"
    },
    "751": {
      "op": "SUB"
    },
    "752": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "DUP6",
      "path": "5",
      "statement": 5
    },
    "753": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "AND",
      "path": "5"
    },
    "754": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "756": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "757": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "DUP2",
      "path": "5"
    },
    "758": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "759": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6116
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "761": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "763": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "764": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "766": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "DUP2",
      "path": "5"
    },
    "767": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6132
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "768": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "DUP1",
      "path": "5"
    },
    "769": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "770": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "771": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x30B"
    },
    "774": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "DUP4",
      "path": "5"
    },
    "775": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x199A"
    },
    "778": {
      "fn": "Voting.delegatedVote",
      "jump": "i",
      "offset": [
        6110,
        6134
      ],
      "op": "JUMP",
      "path": "5"
    },
    "779": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "780": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "781": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "782": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "POP",
      "path": "5"
    },
    "783": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "784": {
      "fn": "Voting.delegatedVote",
      "offset": [
        6110,
        6134
      ],
      "op": "POP",
      "path": "5"
    },
    "785": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5768,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "786": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5768,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "787": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "788": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "789": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "790": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "791": {
      "fn": "Voting.delegatedVote",
      "offset": [
        5651,
        6141
      ],
      "op": "POP",
      "path": "5"
    },
    "792": {
      "fn": "Voting.delegatedVote",
      "jump": "o",
      "offset": [
        5651,
        6141
      ],
      "op": "JUMP",
      "path": "5"
    },
    "793": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "794": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3199,
        3210
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x33F"
    },
    "797": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "799": {
      "op": "MLOAD"
    },
    "800": {
      "op": "DUP1"
    },
    "801": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "803": {
      "op": "ADD"
    },
    "804": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "806": {
      "op": "MSTORE"
    },
    "807": {
      "op": "DUP1"
    },
    "808": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "810": {
      "op": "DUP2"
    },
    "811": {
      "op": "MSTORE"
    },
    "812": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "814": {
      "op": "ADD"
    },
    "815": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "817": {
      "op": "DUP2"
    },
    "818": {
      "op": "MSTORE"
    },
    "819": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "821": {
      "op": "ADD"
    },
    "822": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "824": {
      "op": "ISZERO"
    },
    "825": {
      "op": "ISZERO"
    },
    "826": {
      "op": "DUP2"
    },
    "827": {
      "op": "MSTORE"
    },
    "828": {
      "op": "POP"
    },
    "829": {
      "op": "SWAP1"
    },
    "830": {
      "op": "JUMP"
    },
    "831": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3199,
        3210
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "832": {
      "op": "POP"
    },
    "833": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "835": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "837": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "839": {
      "op": "SHL"
    },
    "840": {
      "op": "SUB"
    },
    "841": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "AND",
      "path": "5",
      "statement": 6
    },
    "842": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "844": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "845": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "846": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "847": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3235
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "849": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "851": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "852": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "853": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "854": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "856": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "857": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "DUP3",
      "path": "5"
    },
    "858": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "859": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3230,
        3252
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "860": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP3",
      "path": "5"
    },
    "861": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "862": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "864": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "865": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ADD",
      "path": "5"
    },
    "866": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP5",
      "path": "5"
    },
    "867": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "868": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "869": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "870": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "871": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "872": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "874": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP3",
      "path": "5"
    },
    "875": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ADD",
      "path": "5"
    },
    "876": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "877": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "878": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "879": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ADD",
      "path": "5"
    },
    "880": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "881": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "882": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "883": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "884": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "886": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ADD",
      "path": "5"
    },
    "887": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "888": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "890": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "AND",
      "path": "5"
    },
    "891": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "892": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "893": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "894": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "DUP2",
      "path": "5"
    },
    "895": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "ADD",
      "path": "5"
    },
    "896": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "897": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "898": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "899": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "900": {
      "fn": "Voting.citizenHasVoted",
      "offset": [
        3223,
        3252
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "901": {
      "fn": "Voting.citizenHasVoted",
      "jump": "o",
      "offset": [
        3128,
        3268
      ],
      "op": "JUMP",
      "path": "5"
    },
    "902": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "903": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3539,
        3554
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "905": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3539,
        3561
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "906": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3460,
        3478
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "908": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3460,
        3478
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "909": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3494,
        3520
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "911": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3494,
        3520
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "912": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH8",
      "path": "5",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "921": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP2",
      "path": "5"
    },
    "922": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "GT",
      "path": "5"
    },
    "923": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "924": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3A7"
    },
    "927": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "928": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3A7"
    },
    "931": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A17"
    },
    "934": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMP",
      "path": "5"
    },
    "935": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "936": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "938": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "939": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "940": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP1",
      "path": "5"
    },
    "941": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP3",
      "path": "5"
    },
    "942": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "943": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP1",
      "path": "5"
    },
    "944": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "946": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "MUL",
      "path": "5"
    },
    "947": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "949": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "ADD",
      "path": "5"
    },
    "950": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP3",
      "path": "5"
    },
    "951": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "ADD",
      "path": "5"
    },
    "952": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "954": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "955": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP1",
      "path": "5"
    },
    "956": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "957": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x406"
    },
    "960": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "961": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP2",
      "path": "5"
    },
    "962": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "964": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "ADD",
      "path": "5"
    },
    "965": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "966": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3F3"
    },
    "969": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "971": {
      "op": "MLOAD"
    },
    "972": {
      "op": "DUP1"
    },
    "973": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "975": {
      "op": "ADD"
    },
    "976": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "978": {
      "op": "MSTORE"
    },
    "979": {
      "op": "DUP1"
    },
    "980": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "982": {
      "op": "DUP2"
    },
    "983": {
      "op": "MSTORE"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "986": {
      "op": "ADD"
    },
    "987": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "989": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "991": {
      "op": "AND"
    },
    "992": {
      "op": "DUP2"
    },
    "993": {
      "op": "MSTORE"
    },
    "994": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "996": {
      "op": "ADD"
    },
    "997": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "999": {
      "op": "DUP2"
    },
    "1000": {
      "op": "MSTORE"
    },
    "1001": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1003": {
      "op": "ADD"
    },
    "1004": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1006": {
      "op": "DUP2"
    },
    "1007": {
      "op": "MSTORE"
    },
    "1008": {
      "op": "POP"
    },
    "1009": {
      "op": "SWAP1"
    },
    "1010": {
      "op": "JUMP"
    },
    "1011": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1012": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1013": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1014": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1016": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "ADD",
      "path": "5"
    },
    "1017": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1018": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1020": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1021": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "SUB",
      "path": "5"
    },
    "1022": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1023": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1024": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x3C5"
    },
    "1027": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1028": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1029": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "POP",
      "path": "5"
    },
    "1030": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1031": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3523,
        3562
      ],
      "op": "POP",
      "path": "5"
    },
    "1032": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3494,
        3562
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1033": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3494,
        3562
      ],
      "op": "POP",
      "path": "5"
    },
    "1034": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3577,
        3584
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1036": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1037": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3594,
        3609
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "1039": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3594,
        3616
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1040": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3590,
        3616
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "1042": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3590,
        3616
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1043": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3590,
        3616
      ],
      "op": "AND",
      "path": "5"
    },
    "1044": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3590,
        3616
      ],
      "op": "LT",
      "path": "5"
    },
    "1045": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1046": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5D5"
    },
    "1049": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1050": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3646
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 7,
      "value": "0x5"
    },
    "1052": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3662
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "1054": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3663,
        3664
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1055": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "1057": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "AND",
      "path": "5"
    },
    "1058": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1059": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1060": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1061": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "LT",
      "path": "5"
    },
    "1062": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x431"
    },
    "1065": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1066": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x431"
    },
    "1069": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "1072": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3647,
        3665
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1073": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1074": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1075": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1077": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1078": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1080": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1082": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1083": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "ADD",
      "path": "5"
    },
    "1084": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3647,
        3665
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1085": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1086": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1087": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1088": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "LT",
      "path": "5"
    },
    "1089": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x44C"
    },
    "1092": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1093": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x44C"
    },
    "1096": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "1099": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3636,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1100": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1101": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1102": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1104": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1105": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1107": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1109": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1110": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1111": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1113": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "MUL",
      "path": "5"
    },
    "1114": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3636,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1115": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1117": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1118": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1119": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "1121": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1122": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1124": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1125": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1126": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1127": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1129": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1130": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1131": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1132": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1133": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x475"
    },
    "1136": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1137": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "1140": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1141": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1142": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1143": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1145": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1146": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1148": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1149": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1150": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DIV",
      "path": "5"
    },
    "1151": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MUL",
      "path": "5"
    },
    "1152": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1154": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1155": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1157": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1158": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1159": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1160": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1161": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1163": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1164": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1165": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1166": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1167": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1168": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1169": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1170": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1171": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1173": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1174": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1175": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1176": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1177": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x4A1"
    },
    "1180": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1181": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "1184": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1185": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1186": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1187": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1188": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x4EE"
    },
    "1191": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1192": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1193": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1195": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "LT",
      "path": "5"
    },
    "1196": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x4C3"
    },
    "1199": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1200": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x100"
    },
    "1203": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1204": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1205": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1206": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DIV",
      "path": "5"
    },
    "1207": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MUL",
      "path": "5"
    },
    "1208": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1209": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1210": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1211": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1213": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1214": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1215": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x4EE"
    },
    "1218": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1219": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1220": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1221": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1222": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1223": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1224": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1226": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1227": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1229": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1231": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1232": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1233": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1234": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1235": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1236": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1237": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1238": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1239": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1241": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1242": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1243": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1245": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1246": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1247": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1248": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "GT",
      "path": "5"
    },
    "1249": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x4D1"
    },
    "1252": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1253": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1254": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1255": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SUB",
      "path": "5"
    },
    "1256": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1258": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "AND",
      "path": "5"
    },
    "1259": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1260": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1261": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1262": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1263": {
      "op": "POP"
    },
    "1264": {
      "op": "POP"
    },
    "1265": {
      "op": "POP"
    },
    "1266": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1267": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1268": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1269": {
      "op": "POP"
    },
    "1270": {
      "op": "POP"
    },
    "1271": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1273": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1274": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1275": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1276": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "1278": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "AND",
      "path": "5"
    },
    "1279": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1281": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1282": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1283": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1284": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1286": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1287": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1288": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1289": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1290": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1292": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1293": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1294": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1295": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1296": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x518"
    },
    "1299": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1300": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "1303": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1304": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1305": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1306": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1308": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1309": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1311": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1312": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1313": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DIV",
      "path": "5"
    },
    "1314": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MUL",
      "path": "5"
    },
    "1315": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1317": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1318": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1320": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1321": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1322": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1323": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1324": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1326": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1327": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1328": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "1329": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1330": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1331": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1332": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1333": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1334": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1336": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1337": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1338": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1339": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1340": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x544"
    },
    "1343": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1344": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "1347": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1348": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1349": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1350": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1351": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x591"
    },
    "1354": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1355": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1356": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1358": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "LT",
      "path": "5"
    },
    "1359": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x566"
    },
    "1362": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1363": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x100"
    },
    "1366": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1367": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1368": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1369": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DIV",
      "path": "5"
    },
    "1370": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MUL",
      "path": "5"
    },
    "1371": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1372": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1373": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1374": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1376": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1377": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1378": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x591"
    },
    "1381": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1382": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1383": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1384": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1385": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1386": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1387": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1389": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1390": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1392": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1394": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1395": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1396": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1397": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1398": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1399": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1400": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1401": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1402": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1404": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1405": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1406": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1408": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1409": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1410": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1411": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "GT",
      "path": "5"
    },
    "1412": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x574"
    },
    "1415": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1416": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1417": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1418": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SUB",
      "path": "5"
    },
    "1419": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1421": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "AND",
      "path": "5"
    },
    "1422": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1423": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1424": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1425": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1426": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1427": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1428": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1429": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1430": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1431": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1432": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1433": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1435": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1436": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "1438": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1439": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "ADD",
      "path": "5"
    },
    "1440": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1441": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1442": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1443": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1444": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1445": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3630
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1446": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3631,
        3632
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1447": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "1449": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "AND",
      "path": "5"
    },
    "1450": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1451": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1452": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1453": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "LT",
      "path": "5"
    },
    "1454": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5B9"
    },
    "1457": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1458": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5B9"
    },
    "1461": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "1464": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3623,
        3633
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1465": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1466": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1468": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "MUL",
      "path": "5"
    },
    "1469": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1471": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "ADD",
      "path": "5"
    },
    "1472": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3633
      ],
      "op": "ADD",
      "path": "5"
    },
    "1473": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1474": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1475": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1476": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3623,
        3666
      ],
      "op": "POP",
      "path": "5"
    },
    "1477": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "DUP1",
      "path": "5",
      "statement": 8
    },
    "1478": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x5CE"
    },
    "1481": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1482": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x19B5"
    },
    "1485": {
      "fn": "Voting.winningCandidates",
      "jump": "i",
      "offset": [
        3618,
        3621
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1486": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1487": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1488": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3618,
        3621
      ],
      "op": "POP",
      "path": "5"
    },
    "1489": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x40C"
    },
    "1492": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1493": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3572,
        3666
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1494": {
      "op": "POP"
    },
    "1495": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3683,
        3690
      ],
      "op": "SWAP2",
      "path": "5",
      "statement": 9
    },
    "1496": {
      "fn": "Voting.winningCandidates",
      "offset": [
        3410,
        3706
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1497": {
      "op": "POP"
    },
    "1498": {
      "fn": "Voting.winningCandidates",
      "jump": "o",
      "offset": [
        3410,
        3706
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1499": {
      "fn": "Voting.register",
      "offset": [
        1986,
        2322
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1500": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1502": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1504": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1506": {
      "op": "SHL"
    },
    "1507": {
      "op": "SUB"
    },
    "1508": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 10
    },
    "1509": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "AND",
      "path": "5"
    },
    "1510": {
      "fn": "Voting.register",
      "offset": [
        2038,
        2042
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1512": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1513": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1514": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1515": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2083
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1517": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1519": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1520": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1522": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1523": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1524": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1525": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "1527": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "AND",
      "path": "5"
    },
    "1528": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2101
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1529": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2101
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1530": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2093
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1532": {
      "fn": "Voting.register",
      "offset": [
        2071,
        2101
      ],
      "op": "EQ",
      "path": "5"
    },
    "1533": {
      "branch": 64,
      "fn": "Voting.register",
      "offset": [
        2071,
        2101
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1534": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x67E"
    },
    "1537": {
      "branch": 64,
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1538": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1540": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1541": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1545": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1547": {
      "op": "SHL"
    },
    "1548": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1549": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1550": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1552": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1554": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1555": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "ADD",
      "path": "5"
    },
    "1556": {
      "op": "MSTORE"
    },
    "1557": {
      "op": "PUSH1",
      "value": "0x46"
    },
    "1559": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1561": {
      "op": "DUP3"
    },
    "1562": {
      "op": "ADD"
    },
    "1563": {
      "op": "MSTORE"
    },
    "1564": {
      "op": "PUSH32",
      "value": "0x54686520636974697A656E20686173206265656E207265676973746572656420"
    },
    "1597": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1599": {
      "op": "DUP3"
    },
    "1600": {
      "op": "ADD"
    },
    "1601": {
      "op": "MSTORE"
    },
    "1602": {
      "op": "PUSH32",
      "value": "0x2D20746865726520617265206E6F206D756C7469706C65207265676973747261"
    },
    "1635": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1637": {
      "op": "DUP3"
    },
    "1638": {
      "op": "ADD"
    },
    "1639": {
      "op": "MSTORE"
    },
    "1640": {
      "op": "PUSH6",
      "value": "0x3A34B7B73997"
    },
    "1647": {
      "op": "PUSH1",
      "value": "0xD1"
    },
    "1649": {
      "op": "SHL"
    },
    "1650": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1652": {
      "op": "DUP3"
    },
    "1653": {
      "op": "ADD"
    },
    "1654": {
      "op": "MSTORE"
    },
    "1655": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "1657": {
      "op": "ADD"
    },
    "1658": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "1661": {
      "op": "JUMP"
    },
    "1662": {
      "fn": "Voting.register",
      "offset": [
        2063,
        2176
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1663": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2199
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 11,
      "value": "0x1"
    },
    "1665": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2199
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1666": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2199
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1667": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1669": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1670": {
      "op": "PUSH4",
      "value": "0xBC0E60E1"
    },
    "1675": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1677": {
      "op": "SHL"
    },
    "1678": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1679": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1680": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1682": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1684": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1686": {
      "op": "SHL"
    },
    "1687": {
      "op": "SUB"
    },
    "1688": {
      "op": "DUP6"
    },
    "1689": {
      "op": "DUP2"
    },
    "1690": {
      "op": "AND"
    },
    "1691": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1693": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1694": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1695": {
      "op": "MSTORE"
    },
    "1696": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1698": {
      "op": "DUP3"
    },
    "1699": {
      "op": "ADD"
    },
    "1700": {
      "op": "SWAP4"
    },
    "1701": {
      "op": "SWAP1"
    },
    "1702": {
      "op": "SWAP4"
    },
    "1703": {
      "op": "MSTORE"
    },
    "1704": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2199
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1705": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2199
      ],
      "op": "AND",
      "path": "5"
    },
    "1706": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2199
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1707": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2222
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xBC0E60E1"
    },
    "1712": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2222
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1713": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1715": {
      "op": "ADD"
    },
    "1716": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1718": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1720": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1721": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1722": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1723": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "SUB",
      "path": "5"
    },
    "1724": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1725": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1727": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP8",
      "path": "5"
    },
    "1728": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1729": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "EXTCODESIZE",
      "path": "5"
    },
    "1730": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1731": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1732": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1733": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6CD"
    },
    "1736": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1737": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1739": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1740": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "REVERT",
      "path": "5"
    },
    "1741": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1742": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "POP",
      "path": "5"
    },
    "1743": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "GAS",
      "path": "5"
    },
    "1744": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "CALL",
      "path": "5"
    },
    "1745": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1746": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1747": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "1748": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x6E1"
    },
    "1751": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1752": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "1753": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1755": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1756": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "RETURNDATACOPY",
      "path": "5"
    },
    "1757": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "1758": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1760": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "REVERT",
      "path": "5"
    },
    "1761": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1762": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "POP",
      "path": "5"
    },
    "1763": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "POP",
      "path": "5"
    },
    "1764": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "POP",
      "path": "5"
    },
    "1765": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "POP",
      "path": "5"
    },
    "1766": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1768": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1769": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "1770": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1772": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "NOT",
      "path": "5"
    },
    "1773": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "1775": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1776": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1777": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "AND",
      "path": "5"
    },
    "1778": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1779": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1780": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1781": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1783": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1784": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "POP",
      "path": "5"
    },
    "1785": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1786": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "ADD",
      "path": "5"
    },
    "1787": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1788": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x705"
    },
    "1791": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1792": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1793": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1639"
    },
    "1796": {
      "fn": "Voting.register",
      "jump": "i",
      "offset": [
        2187,
        2253
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1797": {
      "fn": "Voting.register",
      "offset": [
        2187,
        2253
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1798": {
      "op": "POP"
    },
    "1799": {
      "op": "POP"
    },
    "1800": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1802": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1804": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1806": {
      "op": "SHL"
    },
    "1807": {
      "op": "SUB"
    },
    "1808": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "AND",
      "path": "5",
      "statement": 12
    },
    "1809": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1811": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1812": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1813": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1814": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2275
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "1816": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1818": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1819": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1821": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1822": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2285
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1823": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1824": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1825": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1827": {
      "op": "NOT"
    },
    "1828": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "AND",
      "path": "5"
    },
    "1829": {
      "fn": "Voting.register",
      "offset": [
        2288,
        2292
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1831": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1832": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1833": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "OR",
      "path": "5"
    },
    "1834": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1835": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1836": {
      "fn": "Voting.register",
      "offset": [
        2263,
        2292
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "1837": {
      "fn": "Voting.register",
      "offset": [
        2288,
        2292
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1838": {
      "fn": "Voting.register",
      "jump": "o",
      "offset": [
        1986,
        2322
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1839": {
      "fn": "Voting.endTheElection",
      "offset": [
        1610,
        1795
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1840": {
      "fn": "Voting.endTheElection",
      "offset": [
        1652,
        1656
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1842": {
      "fn": "Voting.endTheElection",
      "offset": [
        1699,
        1703
      ],
      "op": "DUP1",
      "path": "5",
      "statement": 13
    },
    "1843": {
      "fn": "Voting.endTheElection",
      "offset": [
        1699,
        1703
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1844": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1846": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1848": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1850": {
      "op": "SHL"
    },
    "1851": {
      "op": "SUB"
    },
    "1852": {
      "fn": "Voting.endTheElection",
      "offset": [
        1699,
        1703
      ],
      "op": "AND",
      "path": "5"
    },
    "1853": {
      "fn": "Voting.endTheElection",
      "offset": [
        1685,
        1695
      ],
      "op": "CALLER",
      "path": "5"
    },
    "1854": {
      "branch": 65,
      "fn": "Voting.endTheElection",
      "offset": [
        1685,
        1703
      ],
      "op": "EQ",
      "path": "5"
    },
    "1855": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x78A"
    },
    "1858": {
      "branch": 65,
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "1859": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1861": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1862": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "1866": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "1868": {
      "op": "SHL"
    },
    "1869": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1870": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1871": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1873": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "1875": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "DUP3",
      "path": "5"
    },
    "1876": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "ADD",
      "path": "5"
    },
    "1877": {
      "op": "MSTORE"
    },
    "1878": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1880": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1882": {
      "op": "DUP3"
    },
    "1883": {
      "op": "ADD"
    },
    "1884": {
      "op": "MSTORE"
    },
    "1885": {
      "op": "PUSH32",
      "value": "0x4F6E6C79204B494E472063616E20656E642074686520656C656374696F6E2E00"
    },
    "1918": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1920": {
      "op": "DUP3"
    },
    "1921": {
      "op": "ADD"
    },
    "1922": {
      "op": "MSTORE"
    },
    "1923": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1925": {
      "op": "ADD"
    },
    "1926": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "1929": {
      "op": "JUMP"
    },
    "1930": {
      "fn": "Voting.endTheElection",
      "offset": [
        1677,
        1739
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1931": {
      "op": "POP"
    },
    "1932": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1758
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 14,
      "value": "0x7"
    },
    "1934": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1935": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1936": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1938": {
      "op": "NOT"
    },
    "1939": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "AND",
      "path": "5"
    },
    "1940": {
      "fn": "Voting.endTheElection",
      "offset": [
        1761,
        1765
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "1942": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1943": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1944": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "OR",
      "path": "5"
    },
    "1945": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1946": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "1947": {
      "fn": "Voting.endTheElection",
      "offset": [
        1750,
        1765
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "1948": {
      "fn": "Voting.endTheElection",
      "offset": [
        1761,
        1765
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1949": {
      "fn": "Voting.endTheElection",
      "jump": "o",
      "offset": [
        1610,
        1795
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1950": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1951": {
      "fn": "Voting.vote",
      "offset": [
        2916,
        2956
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 15,
      "value": "0x7A9"
    },
    "1954": {
      "fn": "Voting.vote",
      "offset": [
        2922,
        2932
      ],
      "op": "CALLER",
      "path": "5"
    },
    "1955": {
      "fn": "Voting.vote",
      "offset": [
        2934,
        2946
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1956": {
      "fn": "Voting.vote",
      "offset": [
        2948,
        2955
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1957": {
      "fn": "Voting.vote",
      "offset": [
        2916,
        2921
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA25"
    },
    "1960": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        2916,
        2956
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1961": {
      "fn": "Voting.vote",
      "offset": [
        2916,
        2956
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1962": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "POP",
      "path": "5"
    },
    "1963": {
      "fn": "Voting.vote",
      "offset": [
        2845,
        2964
      ],
      "op": "POP",
      "path": "5"
    },
    "1964": {
      "fn": "Voting.vote",
      "jump": "o",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMP",
      "path": "5"
    },
    "1965": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "1966": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1968": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1970": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1972": {
      "op": "SHL"
    },
    "1973": {
      "op": "SUB"
    },
    "1974": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1975": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "AND",
      "path": "5"
    },
    "1976": {
      "fn": "Voting.getDigest",
      "offset": [
        4597,
        4604
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "1978": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1979": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1980": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1981": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4638
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "1983": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "1985": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "1986": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "DUP2",
      "path": "5"
    },
    "1987": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "1988": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "1990": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "DUP1",
      "path": "5"
    },
    "1991": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "DUP4",
      "path": "5"
    },
    "1992": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "1993": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "1994": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 16
    },
    "1995": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "1996": {
      "fn": "Voting.getDigest",
      "offset": [
        4765,
        4855
      ],
      "op": "PUSH32",
      "path": "5",
      "value": "0xA56F781F7251D29FCA13933D69C34316EA277F967C4A968F77DB62D983FE1120"
    },
    "2029": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "2030": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2031": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "ADD",
      "path": "5"
    },
    "2032": {
      "op": "SWAP4"
    },
    "2033": {
      "op": "SWAP1"
    },
    "2034": {
      "op": "SWAP4"
    },
    "2035": {
      "op": "MSTORE"
    },
    "2036": {
      "op": "SWAP1"
    },
    "2037": {
      "op": "DUP3"
    },
    "2038": {
      "op": "ADD"
    },
    "2039": {
      "op": "SWAP4"
    },
    "2040": {
      "op": "SWAP1"
    },
    "2041": {
      "op": "SWAP4"
    },
    "2042": {
      "op": "MSTORE"
    },
    "2043": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "2045": {
      "op": "DUP2"
    },
    "2046": {
      "op": "ADD"
    },
    "2047": {
      "op": "DUP6"
    },
    "2048": {
      "op": "SWAP1"
    },
    "2049": {
      "op": "MSTORE"
    },
    "2050": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "2052": {
      "op": "DUP2"
    },
    "2053": {
      "op": "ADD"
    },
    "2054": {
      "op": "DUP5"
    },
    "2055": {
      "op": "SWAP1"
    },
    "2056": {
      "op": "MSTORE"
    },
    "2057": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2059": {
      "op": "DUP2"
    },
    "2060": {
      "op": "ADD"
    },
    "2061": {
      "op": "DUP4"
    },
    "2062": {
      "op": "SWAP1"
    },
    "2063": {
      "op": "MSTORE"
    },
    "2064": {
      "fn": "Voting.getDigest",
      "offset": [
        4597,
        4604
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2065": {
      "fn": "Voting.getDigest",
      "offset": [
        4597,
        4604
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2066": {
      "fn": "Voting.getDigest",
      "offset": [
        4632,
        4654
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2067": {
      "fn": "Voting.getDigest",
      "offset": [
        4672,
        5021
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x834"
    },
    "2070": {
      "fn": "Voting.getDigest",
      "offset": [
        4672,
        5021
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2071": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "2073": {
      "op": "ADD"
    },
    "2074": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2076": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2077": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2079": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2080": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2081": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "SUB",
      "path": "5"
    },
    "2082": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "SUB",
      "path": "5"
    },
    "2083": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2084": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2085": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2086": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2088": {
      "fn": "Voting.getDigest",
      "offset": [
        4729,
        4997
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2089": {
      "fn": "Voting.getDigest",
      "offset": [
        4702,
        5011
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2090": {
      "fn": "Voting.getDigest",
      "offset": [
        4702,
        5011
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2091": {
      "fn": "Voting.getDigest",
      "offset": [
        4702,
        5011
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2092": {
      "fn": "Voting.getDigest",
      "offset": [
        4702,
        5011
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2094": {
      "fn": "Voting.getDigest",
      "offset": [
        4702,
        5011
      ],
      "op": "ADD",
      "path": "5"
    },
    "2095": {
      "fn": "Voting.getDigest",
      "offset": [
        4702,
        5011
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2096": {
      "fn": "Voting.getDigest",
      "offset": [
        4672,
        4688
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDD6"
    },
    "2099": {
      "fn": "Voting.getDigest",
      "jump": "i",
      "offset": [
        4672,
        5021
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2100": {
      "fn": "Voting.getDigest",
      "offset": [
        4672,
        5021
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2101": {
      "fn": "Voting.getDigest",
      "offset": [
        4665,
        5021
      ],
      "op": "SWAP6",
      "path": "5"
    },
    "2102": {
      "fn": "Voting.getDigest",
      "offset": [
        4496,
        5028
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "2103": {
      "op": "POP"
    },
    "2104": {
      "op": "POP"
    },
    "2105": {
      "op": "POP"
    },
    "2106": {
      "op": "POP"
    },
    "2107": {
      "op": "POP"
    },
    "2108": {
      "fn": "Voting.getDigest",
      "jump": "o",
      "offset": [
        4496,
        5028
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2109": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3826,
        3931
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2110": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3875,
        3893
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x60"
    },
    "2112": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3913,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 17,
      "value": "0x5"
    },
    "2114": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2115": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2116": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2117": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2119": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MUL",
      "path": "5"
    },
    "2120": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2122": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2123": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2125": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2126": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2127": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2128": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2129": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2131": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2132": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2133": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2134": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2135": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2136": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2137": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2138": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2139": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2141": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2142": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2144": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2145": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2146": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2147": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2148": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "LT",
      "path": "5"
    },
    "2149": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2150": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9D2"
    },
    "2153": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2154": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2155": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2156": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2157": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2159": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2160": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2162": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2164": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2165": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2166": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2168": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MUL",
      "path": "5"
    },
    "2169": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2170": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2172": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2173": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2174": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x80"
    },
    "2176": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2177": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2179": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2180": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2181": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2182": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2184": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2185": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2186": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2187": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2188": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x894"
    },
    "2191": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2192": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "2195": {
      "fn": "Voting.seeAllCandidates",
      "jump": "i",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2196": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2197": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2198": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2200": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2201": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2203": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2204": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2205": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DIV",
      "path": "5"
    },
    "2206": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MUL",
      "path": "5"
    },
    "2207": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2209": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2210": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2212": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2213": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2214": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2215": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2216": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2218": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2219": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2220": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2221": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2222": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2223": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2224": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2225": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2226": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2228": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2229": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2230": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2231": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2232": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8C0"
    },
    "2235": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2236": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "2239": {
      "fn": "Voting.seeAllCandidates",
      "jump": "i",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2240": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2241": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2242": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2243": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x90D"
    },
    "2246": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2247": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2248": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2250": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "LT",
      "path": "5"
    },
    "2251": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8E2"
    },
    "2254": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2255": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x100"
    },
    "2258": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2259": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2260": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2261": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DIV",
      "path": "5"
    },
    "2262": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MUL",
      "path": "5"
    },
    "2263": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2264": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2265": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2266": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2268": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2269": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2270": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x90D"
    },
    "2273": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2274": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2275": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2276": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2277": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2278": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2279": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2281": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2282": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2284": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2286": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2287": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2288": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2289": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2290": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2291": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2292": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2293": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2294": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2296": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2297": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2298": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2300": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2301": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2302": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2303": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "GT",
      "path": "5"
    },
    "2304": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x8F0"
    },
    "2307": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2308": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2309": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2310": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SUB",
      "path": "5"
    },
    "2311": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2313": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "AND",
      "path": "5"
    },
    "2314": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2315": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2316": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2317": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2318": {
      "op": "POP"
    },
    "2319": {
      "op": "POP"
    },
    "2320": {
      "op": "POP"
    },
    "2321": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2322": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2323": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2324": {
      "op": "POP"
    },
    "2325": {
      "op": "POP"
    },
    "2326": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2328": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2329": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2330": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2331": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "2333": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "AND",
      "path": "5"
    },
    "2334": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2336": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2337": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2338": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2339": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "2341": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2342": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2343": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2344": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2345": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2347": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2348": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2349": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2350": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2351": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x937"
    },
    "2354": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2355": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "2358": {
      "fn": "Voting.seeAllCandidates",
      "jump": "i",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2359": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2360": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2361": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2363": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2364": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2366": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2367": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2368": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DIV",
      "path": "5"
    },
    "2369": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MUL",
      "path": "5"
    },
    "2370": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2372": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2373": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2375": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2376": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2377": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2378": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2379": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2381": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2382": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2383": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2384": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2385": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2386": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2387": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2388": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2389": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2391": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2392": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2393": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2394": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2395": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x963"
    },
    "2398": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2399": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1965"
    },
    "2402": {
      "fn": "Voting.seeAllCandidates",
      "jump": "i",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2403": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2404": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2405": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2406": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9B0"
    },
    "2409": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2410": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2411": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2413": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "LT",
      "path": "5"
    },
    "2414": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x985"
    },
    "2417": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2418": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x100"
    },
    "2421": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2422": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2423": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2424": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DIV",
      "path": "5"
    },
    "2425": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MUL",
      "path": "5"
    },
    "2426": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2427": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2428": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2429": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2431": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2432": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2433": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x9B0"
    },
    "2436": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2437": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2438": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2439": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2440": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2441": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2442": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2444": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2445": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2447": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2449": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2450": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2451": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2452": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2453": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2454": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2455": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2456": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2457": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2459": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2460": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2461": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2463": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2464": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2465": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2466": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "GT",
      "path": "5"
    },
    "2467": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x993"
    },
    "2470": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2471": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2472": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2473": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SUB",
      "path": "5"
    },
    "2474": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2476": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "AND",
      "path": "5"
    },
    "2477": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2478": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2479": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2480": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2481": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2482": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2483": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2484": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2485": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2486": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2487": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2488": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2490": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2491": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "2493": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2494": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2495": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2496": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2497": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2498": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2499": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2500": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2501": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2502": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2504": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2505": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2506": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2508": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "ADD",
      "path": "5"
    },
    "2509": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2510": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x861"
    },
    "2513": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2514": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2515": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2516": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2517": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2518": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2519": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2520": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3906,
        3923
      ],
      "op": "POP",
      "path": "5"
    },
    "2521": {
      "fn": "Voting.seeAllCandidates",
      "offset": [
        3826,
        3931
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2522": {
      "fn": "Voting.seeAllCandidates",
      "jump": "o",
      "offset": [
        3826,
        3931
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2523": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2524": {
      "fn": "Voting.getSigner",
      "offset": [
        5293,
        5300
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2526": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 18,
      "value": "0xA1D"
    },
    "2529": {
      "fn": "Voting.getSigner",
      "offset": [
        5333,
        5339
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2530": {
      "fn": "Voting.getSigner",
      "offset": [
        5341,
        5350
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2531": {
      "fn": "Voting.getSigner",
      "offset": [
        5341,
        5350
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2532": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2533": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2534": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "2536": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "ADD",
      "path": "5"
    },
    "2537": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2539": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2540": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2541": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DIV",
      "path": "5"
    },
    "2542": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "MUL",
      "path": "5"
    },
    "2543": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2545": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "ADD",
      "path": "5"
    },
    "2546": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2548": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2549": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2550": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2551": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "ADD",
      "path": "5"
    },
    "2552": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2554": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2555": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2556": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "2557": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2558": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2559": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2560": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2561": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2562": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2563": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2565": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "ADD",
      "path": "5"
    },
    "2566": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2567": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP4",
      "path": "5"
    },
    "2568": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP1",
      "path": "5"
    },
    "2569": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2570": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "DUP5",
      "path": "5"
    },
    "2571": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "CALLDATACOPY",
      "path": "5"
    },
    "2572": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2574": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2575": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "ADD",
      "path": "5"
    },
    "2576": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2577": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2578": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "2579": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2580": {
      "op": "POP"
    },
    "2581": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5332
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE2A"
    },
    "2584": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5332
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "2585": {
      "op": "POP"
    },
    "2586": {
      "op": "POP"
    },
    "2587": {
      "op": "POP"
    },
    "2588": {
      "fn": "Voting.getSigner",
      "jump": "i",
      "offset": [
        5319,
        5351
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2589": {
      "fn": "Voting.getSigner",
      "offset": [
        5319,
        5351
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2590": {
      "fn": "Voting.getSigner",
      "offset": [
        5311,
        5351
      ],
      "op": "SWAP5",
      "path": "5"
    },
    "2591": {
      "fn": "Voting.getSigner",
      "offset": [
        5211,
        5358
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "2592": {
      "op": "POP"
    },
    "2593": {
      "op": "POP"
    },
    "2594": {
      "op": "POP"
    },
    "2595": {
      "op": "POP"
    },
    "2596": {
      "fn": "Voting.getSigner",
      "jump": "o",
      "offset": [
        5211,
        5358
      ],
      "op": "JUMP",
      "path": "5"
    },
    "2597": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2598": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7369
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 19,
      "value": "0x7"
    },
    "2600": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7369
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2601": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7369
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "2603": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7369
      ],
      "op": "AND",
      "path": "5"
    },
    "2604": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7377
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2605": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7377
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2606": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7369
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2608": {
      "fn": "Voting._vote",
      "offset": [
        7361,
        7377
      ],
      "op": "EQ",
      "path": "5"
    },
    "2609": {
      "branch": 66,
      "fn": "Voting._vote",
      "offset": [
        7361,
        7377
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2610": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xA91"
    },
    "2613": {
      "branch": 66,
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2614": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2616": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2617": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2621": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2623": {
      "op": "SHL"
    },
    "2624": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2625": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2626": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2628": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2630": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2631": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "ADD",
      "path": "5"
    },
    "2632": {
      "op": "MSTORE"
    },
    "2633": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "2635": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2637": {
      "op": "DUP3"
    },
    "2638": {
      "op": "ADD"
    },
    "2639": {
      "op": "MSTORE"
    },
    "2640": {
      "op": "PUSH32",
      "value": "0x566F74696E6720666F72207468652063757272656E7420656C656374696F6E20"
    },
    "2673": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2675": {
      "op": "DUP3"
    },
    "2676": {
      "op": "ADD"
    },
    "2677": {
      "op": "MSTORE"
    },
    "2678": {
      "op": "PUSH11",
      "value": "0x3430B99032B73232B21017"
    },
    "2690": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "2692": {
      "op": "SHL"
    },
    "2693": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2695": {
      "op": "DUP3"
    },
    "2696": {
      "op": "ADD"
    },
    "2697": {
      "op": "MSTORE"
    },
    "2698": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2700": {
      "op": "ADD"
    },
    "2701": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "2704": {
      "op": "JUMP"
    },
    "2705": {
      "fn": "Voting._vote",
      "offset": [
        7353,
        7425
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2706": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2708": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2710": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "2712": {
      "op": "SHL"
    },
    "2713": {
      "op": "SUB"
    },
    "2714": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "DUP4",
      "path": "5",
      "statement": 20
    },
    "2715": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "AND",
      "path": "5"
    },
    "2716": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "2718": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2719": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2720": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2721": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7448
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2723": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "2725": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2726": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2728": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "2729": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7458
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "2730": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7467
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x2"
    },
    "2732": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7467
      ],
      "op": "ADD",
      "path": "5"
    },
    "2733": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7467
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2734": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7467
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "2736": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7467
      ],
      "op": "AND",
      "path": "5"
    },
    "2737": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7475
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2738": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7475
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2739": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7467
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2741": {
      "fn": "Voting._vote",
      "offset": [
        7443,
        7475
      ],
      "op": "EQ",
      "path": "5"
    },
    "2742": {
      "branch": 67,
      "fn": "Voting._vote",
      "offset": [
        7443,
        7475
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2743": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB16"
    },
    "2746": {
      "branch": 67,
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2747": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2749": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2750": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2754": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2756": {
      "op": "SHL"
    },
    "2757": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2758": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2759": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2761": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2763": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2764": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "ADD",
      "path": "5"
    },
    "2765": {
      "op": "MSTORE"
    },
    "2766": {
      "op": "PUSH1",
      "value": "0x2B"
    },
    "2768": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2770": {
      "op": "DUP3"
    },
    "2771": {
      "op": "ADD"
    },
    "2772": {
      "op": "MSTORE"
    },
    "2773": {
      "op": "PUSH32",
      "value": "0x54686520636974697A656E20616C726561647920766F74656420696E20746865"
    },
    "2806": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2808": {
      "op": "DUP3"
    },
    "2809": {
      "op": "ADD"
    },
    "2810": {
      "op": "MSTORE"
    },
    "2811": {
      "op": "PUSH11",
      "value": "0x1032B632B1BA34B7B71017"
    },
    "2823": {
      "op": "PUSH1",
      "value": "0xA9"
    },
    "2825": {
      "op": "SHL"
    },
    "2826": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2828": {
      "op": "DUP3"
    },
    "2829": {
      "op": "ADD"
    },
    "2830": {
      "op": "MSTORE"
    },
    "2831": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2833": {
      "op": "ADD"
    },
    "2834": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "2837": {
      "op": "JUMP"
    },
    "2838": {
      "fn": "Voting._vote",
      "offset": [
        7435,
        7523
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2839": {
      "offset": [
        568,
        569
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "2841": {
      "fn": "Voting._vote",
      "offset": [
        7541,
        7548
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 21
    },
    "2842": {
      "fn": "Voting._vote",
      "offset": [
        7541,
        7571
      ],
      "op": "LT",
      "path": "5"
    },
    "2843": {
      "branch": 68,
      "fn": "Voting._vote",
      "offset": [
        7541,
        7571
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "2844": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xB82"
    },
    "2847": {
      "branch": 68,
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2848": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2850": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2851": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2855": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2857": {
      "op": "SHL"
    },
    "2858": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2859": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2860": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2862": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2864": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2865": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "ADD",
      "path": "5"
    },
    "2866": {
      "op": "MSTORE"
    },
    "2867": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "2869": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2871": {
      "op": "DUP3"
    },
    "2872": {
      "op": "ADD"
    },
    "2873": {
      "op": "MSTORE"
    },
    "2874": {
      "op": "PUSH32",
      "value": "0x54686520616D6F756E74206973206C6573736572207468616E20746865205245"
    },
    "2907": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "2909": {
      "op": "DUP3"
    },
    "2910": {
      "op": "ADD"
    },
    "2911": {
      "op": "MSTORE"
    },
    "2912": {
      "op": "PUSH18",
      "value": "0x23A4A9AA2920AA24A7A71020A6A7AAA72A17"
    },
    "2931": {
      "op": "PUSH1",
      "value": "0x71"
    },
    "2933": {
      "op": "SHL"
    },
    "2934": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "2936": {
      "op": "DUP3"
    },
    "2937": {
      "op": "ADD"
    },
    "2938": {
      "op": "MSTORE"
    },
    "2939": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "2941": {
      "op": "ADD"
    },
    "2942": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "2945": {
      "op": "JUMP"
    },
    "2946": {
      "fn": "Voting._vote",
      "offset": [
        7533,
        7626
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "2947": {
      "fn": "Voting._vote",
      "offset": [
        7659,
        7669
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 22,
      "value": "0x5"
    },
    "2949": {
      "fn": "Voting._vote",
      "offset": [
        7659,
        7676
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "2950": {
      "fn": "Voting._vote",
      "offset": [
        7644,
        7676
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2951": {
      "branch": 69,
      "fn": "Voting._vote",
      "offset": [
        7644,
        7676
      ],
      "op": "LT",
      "path": "5"
    },
    "2952": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xBF9"
    },
    "2955": {
      "branch": 69,
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "2956": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "2958": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "2959": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "2963": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "2965": {
      "op": "SHL"
    },
    "2966": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "DUP2",
      "path": "5"
    },
    "2967": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "2968": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2970": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "2972": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "DUP3",
      "path": "5"
    },
    "2973": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "ADD",
      "path": "5"
    },
    "2974": {
      "op": "MSTORE"
    },
    "2975": {
      "op": "PUSH1",
      "value": "0x38"
    },
    "2977": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2979": {
      "op": "DUP3"
    },
    "2980": {
      "op": "ADD"
    },
    "2981": {
      "op": "MSTORE"
    },
    "2982": {
      "op": "PUSH32",
      "value": "0x5468652063616E6469646174652049442067726561746572207468616E207468"
    },
    "3015": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3017": {
      "op": "DUP3"
    },
    "3018": {
      "op": "ADD"
    },
    "3019": {
      "op": "MSTORE"
    },
    "3020": {
      "op": "PUSH32",
      "value": "0x65206E756D626572206F662063616E6469646174657320210000000000000000"
    },
    "3053": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "3055": {
      "op": "DUP3"
    },
    "3056": {
      "op": "ADD"
    },
    "3057": {
      "op": "MSTORE"
    },
    "3058": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "3060": {
      "op": "ADD"
    },
    "3061": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x282"
    },
    "3064": {
      "op": "JUMP"
    },
    "3065": {
      "fn": "Voting._vote",
      "offset": [
        7636,
        7737
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3066": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7760
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 23,
      "value": "0x1"
    },
    "3068": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7760
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3069": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3071": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3072": {
      "op": "PUSH4",
      "value": "0x14294617"
    },
    "3077": {
      "op": "PUSH1",
      "value": "0xE1"
    },
    "3079": {
      "op": "SHL"
    },
    "3080": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3081": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3082": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3084": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3086": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3088": {
      "op": "SHL"
    },
    "3089": {
      "op": "SUB"
    },
    "3090": {
      "op": "DUP6"
    },
    "3091": {
      "op": "DUP2"
    },
    "3092": {
      "op": "AND"
    },
    "3093": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3095": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3096": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ADD",
      "path": "5"
    },
    "3097": {
      "op": "MSTORE"
    },
    "3098": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "3100": {
      "op": "DUP3"
    },
    "3101": {
      "op": "ADD"
    },
    "3102": {
      "op": "DUP5"
    },
    "3103": {
      "op": "SWAP1"
    },
    "3104": {
      "op": "MSTORE"
    },
    "3105": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7760
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3106": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7760
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3107": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7760
      ],
      "op": "AND",
      "path": "5"
    },
    "3108": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7760
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3109": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7777
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0x28528C2E"
    },
    "3114": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7777
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3115": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "3117": {
      "op": "ADD"
    },
    "3118": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3120": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3122": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3123": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3124": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3125": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "SUB",
      "path": "5"
    },
    "3126": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3127": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3129": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP8",
      "path": "5"
    },
    "3130": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3131": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "EXTCODESIZE",
      "path": "5"
    },
    "3132": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3133": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3134": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3135": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC47"
    },
    "3138": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3139": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3141": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3142": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "REVERT",
      "path": "5"
    },
    "3143": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3144": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3145": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "GAS",
      "path": "5"
    },
    "3146": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "CALL",
      "path": "5"
    },
    "3147": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3148": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3149": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3150": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC5B"
    },
    "3153": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3154": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "3155": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3157": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3158": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "RETURNDATACOPY",
      "path": "5"
    },
    "3159": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "3160": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3162": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "REVERT",
      "path": "5"
    },
    "3163": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3164": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3165": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3166": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3167": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3168": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3170": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3171": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "RETURNDATASIZE",
      "path": "5"
    },
    "3172": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "3174": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "NOT",
      "path": "5"
    },
    "3175": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1F"
    },
    "3177": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3178": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ADD",
      "path": "5"
    },
    "3179": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "AND",
      "path": "5"
    },
    "3180": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3181": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ADD",
      "path": "5"
    },
    "3182": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3183": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3185": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3186": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3187": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3188": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "ADD",
      "path": "5"
    },
    "3189": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3190": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC7F"
    },
    "3193": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3194": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3195": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1639"
    },
    "3198": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        7748,
        7796
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3199": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3200": {
      "fn": "Voting._vote",
      "offset": [
        7748,
        7796
      ],
      "op": "POP",
      "path": "5"
    },
    "3201": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7883
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 24,
      "value": "0xCB7"
    },
    "3204": {
      "fn": "Voting._vote",
      "offset": [
        7875,
        7882
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3205": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7850
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "3207": {
      "fn": "Voting._vote",
      "offset": [
        7851,
        7863
      ],
      "op": "DUP5",
      "path": "5"
    },
    "3208": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3209": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3210": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3211": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "LT",
      "path": "5"
    },
    "3212": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC97"
    },
    "3215": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3216": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xC97"
    },
    "3219": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3222": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        7840,
        7864
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3223": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3224": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3225": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3227": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3228": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3230": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3232": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3233": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3234": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3236": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "MUL",
      "path": "5"
    },
    "3237": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7864
      ],
      "op": "ADD",
      "path": "5"
    },
    "3238": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7870
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3240": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7870
      ],
      "op": "ADD",
      "path": "5"
    },
    "3241": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7870
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3242": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7874
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE4E"
    },
    "3245": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7874
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3246": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7883
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3247": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7883
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3248": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7883
      ],
      "op": "PUSH4",
      "path": "5",
      "value": "0xFFFFFFFF"
    },
    "3253": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7883
      ],
      "op": "AND",
      "path": "5"
    },
    "3254": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        7840,
        7883
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3255": {
      "fn": "Voting._vote",
      "offset": [
        7840,
        7883
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3256": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7817
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "3258": {
      "fn": "Voting._vote",
      "offset": [
        7818,
        7830
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3259": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3260": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3261": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3262": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "LT",
      "path": "5"
    },
    "3263": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCCA"
    },
    "3266": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3267": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xCCA"
    },
    "3270": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3273": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        7807,
        7831
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3274": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3275": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3277": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3278": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3279": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3280": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3282": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3283": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3284": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3285": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3287": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "3288": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3289": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "MUL",
      "path": "5"
    },
    "3290": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7831
      ],
      "op": "ADD",
      "path": "5"
    },
    "3291": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7837
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3293": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7837
      ],
      "op": "ADD",
      "path": "5"
    },
    "3294": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7883
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "3295": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7883
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3296": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7883
      ],
      "op": "SWAP4",
      "path": "5"
    },
    "3297": {
      "fn": "Voting._vote",
      "offset": [
        7807,
        7883
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3298": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3300": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "3302": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "3304": {
      "op": "SHL"
    },
    "3305": {
      "op": "SUB"
    },
    "3306": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "DUP7",
      "path": "5",
      "statement": 25
    },
    "3307": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "AND",
      "path": "5"
    },
    "3308": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3309": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3310": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3311": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3312": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3313": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3315": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3316": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7908
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3317": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7935
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3318": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7935
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3319": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7935
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3320": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7967
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 26,
      "value": "0x1"
    },
    "3322": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7967
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3323": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7967
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3324": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7967
      ],
      "op": "ADD",
      "path": "5"
    },
    "3325": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7977
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3326": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7977
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3327": {
      "fn": "Voting._vote",
      "offset": [
        7945,
        7977
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3328": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8011
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 27,
      "value": "0x2"
    },
    "3330": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8011
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3331": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8011
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3332": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8011
      ],
      "op": "ADD",
      "path": "5"
    },
    "3333": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3334": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3335": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "3337": {
      "op": "NOT"
    },
    "3338": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "AND",
      "path": "5"
    },
    "3339": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3340": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3341": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "OR",
      "path": "5"
    },
    "3342": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3343": {
      "fn": "Voting._vote",
      "offset": [
        7987,
        8018
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3344": {
      "fn": "Voting._vote",
      "offset": [
        8032,
        8066
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD18"
    },
    "3347": {
      "fn": "Voting._vote",
      "offset": [
        7893,
        7935
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3348": {
      "fn": "Voting._vote",
      "offset": [
        8032,
        8052
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE61"
    },
    "3351": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8032,
        8066
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3352": {
      "fn": "Voting._vote",
      "offset": [
        8032,
        8066
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3353": {
      "fn": "Voting._vote",
      "offset": [
        8029,
        8713
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDCE"
    },
    "3356": {
      "fn": "Voting._vote",
      "offset": [
        8029,
        8713
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3357": {
      "fn": "Voting._vote",
      "offset": [
        8170,
        8190
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD24"
    },
    "3360": {
      "fn": "Voting._vote",
      "offset": [
        8170,
        8188
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEBC"
    },
    "3363": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8170,
        8190
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3364": {
      "fn": "Voting._vote",
      "offset": [
        8170,
        8190
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3365": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8147
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "3367": {
      "fn": "Voting._vote",
      "offset": [
        8148,
        8160
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3368": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3369": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3370": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3371": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "LT",
      "path": "5"
    },
    "3372": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD37"
    },
    "3375": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3376": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD37"
    },
    "3379": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3382": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8137,
        8161
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3383": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3384": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3385": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3387": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3388": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3390": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3392": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3393": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3394": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3396": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "MUL",
      "path": "5"
    },
    "3397": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8161
      ],
      "op": "ADD",
      "path": "5"
    },
    "3398": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8167
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3400": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8167
      ],
      "op": "ADD",
      "path": "5"
    },
    "3401": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8167
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3402": {
      "branch": 70,
      "fn": "Voting._vote",
      "offset": [
        8137,
        8190
      ],
      "op": "GT",
      "path": "5"
    },
    "3403": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8242
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3404": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8242
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xD57"
    },
    "3407": {
      "branch": 70,
      "fn": "Voting._vote",
      "offset": [
        8137,
        8242
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3408": {
      "op": "POP"
    },
    "3409": {
      "fn": "Voting._vote",
      "offset": [
        8194,
        8209
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3411": {
      "fn": "Voting._vote",
      "offset": [
        8194,
        8216
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3412": {
      "offset": [
        522,
        523
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3414": {
      "op": "GT"
    },
    "3415": {
      "fn": "Voting._vote",
      "offset": [
        8137,
        8242
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3416": {
      "fn": "Voting._vote",
      "offset": [
        8133,
        8563
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3417": {
      "fn": "Voting._vote",
      "offset": [
        8133,
        8563
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDC9"
    },
    "3420": {
      "fn": "Voting._vote",
      "offset": [
        8133,
        8563
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3421": {
      "fn": "Voting._vote",
      "offset": [
        8297,
        8337
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 28,
      "value": "0xD65"
    },
    "3424": {
      "fn": "Voting._vote",
      "offset": [
        8324,
        8336
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3425": {
      "fn": "Voting._vote",
      "offset": [
        8297,
        8323
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF21"
    },
    "3428": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8297,
        8337
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3429": {
      "fn": "Voting._vote",
      "offset": [
        8297,
        8337
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3430": {
      "fn": "Voting._vote",
      "offset": [
        8355,
        8377
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 29,
      "value": "0xD6D"
    },
    "3433": {
      "fn": "Voting._vote",
      "offset": [
        8355,
        8375
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF92"
    },
    "3436": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8355,
        8377
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3437": {
      "fn": "Voting._vote",
      "offset": [
        8355,
        8377
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3438": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "PUSH32",
      "path": "5",
      "statement": 30,
      "value": "0x6FEB6D2E3B854B96FF5A9F8E857F483FBFF471F03C8F8451FDEDFFE83CC605B"
    },
    "3471": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8424
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "3473": {
      "fn": "Voting._vote",
      "offset": [
        8425,
        8437
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3474": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3475": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3476": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3477": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "LT",
      "path": "5"
    },
    "3478": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDA1"
    },
    "3481": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3482": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDA1"
    },
    "3485": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3488": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8414,
        8438
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3489": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3490": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3491": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3493": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3494": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3496": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3498": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3499": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3500": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3502": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "MUL",
      "path": "5"
    },
    "3503": {
      "fn": "Voting._vote",
      "offset": [
        8414,
        8438
      ],
      "op": "ADD",
      "path": "5"
    },
    "3504": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3506": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3507": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xDBC"
    },
    "3510": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3511": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3512": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x18BB"
    },
    "3515": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8400,
        8439
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3516": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3517": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x40"
    },
    "3519": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "MLOAD",
      "path": "5"
    },
    "3520": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3521": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3522": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "SUB",
      "path": "5"
    },
    "3523": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3524": {
      "fn": "Voting._vote",
      "offset": [
        8400,
        8439
      ],
      "op": "LOG1",
      "path": "5"
    },
    "3525": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "POP",
      "path": "5"
    },
    "3526": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "POP",
      "path": "5"
    },
    "3527": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "POP",
      "path": "5"
    },
    "3528": {
      "fn": "Voting._vote",
      "jump": "o",
      "offset": [
        7261,
        8719
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3529": {
      "fn": "Voting._vote",
      "offset": [
        8133,
        8563
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3530": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "POP",
      "path": "5"
    },
    "3531": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "POP",
      "path": "5"
    },
    "3532": {
      "fn": "Voting._vote",
      "offset": [
        7261,
        8719
      ],
      "op": "POP",
      "path": "5"
    },
    "3533": {
      "fn": "Voting._vote",
      "jump": "o",
      "offset": [
        7261,
        8719
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3534": {
      "fn": "Voting._vote",
      "offset": [
        8029,
        8713
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3535": {
      "fn": "Voting._vote",
      "offset": [
        8645,
        8667
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 31,
      "value": "0xDC9"
    },
    "3538": {
      "fn": "Voting._vote",
      "offset": [
        8645,
        8665
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF92"
    },
    "3541": {
      "fn": "Voting._vote",
      "jump": "i",
      "offset": [
        8645,
        8667
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3542": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4339,
        4504
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3543": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4416,
        4423
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "3545": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4442,
        4497
      ],
      "op": "PUSH2",
      "path": "2",
      "statement": 32,
      "value": "0xE24"
    },
    "3548": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4464,
        4484
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xDE3"
    },
    "3551": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4464,
        4482
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1124"
    },
    "3554": {
      "fn": "EIP712._hashTypedDataV4",
      "jump": "i",
      "offset": [
        4464,
        4484
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3555": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4464,
        4484
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3556": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4486,
        4496
      ],
      "op": "DUP4",
      "path": "2"
    },
    "3557": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 33,
      "value": "0x40"
    },
    "3559": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3560": {
      "op": "PUSH2",
      "value": "0x1901"
    },
    "3563": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "3565": {
      "op": "SHL"
    },
    "3566": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3568": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "DUP3",
      "path": "1"
    },
    "3569": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "ADD",
      "path": "1"
    },
    "3570": {
      "op": "MSTORE"
    },
    "3571": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "3573": {
      "op": "DUP2"
    },
    "3574": {
      "op": "ADD"
    },
    "3575": {
      "op": "DUP4"
    },
    "3576": {
      "op": "SWAP1"
    },
    "3577": {
      "op": "MSTORE"
    },
    "3578": {
      "op": "PUSH1",
      "value": "0x42"
    },
    "3580": {
      "op": "DUP2"
    },
    "3581": {
      "op": "ADD"
    },
    "3582": {
      "op": "DUP3"
    },
    "3583": {
      "op": "SWAP1"
    },
    "3584": {
      "op": "MSTORE"
    },
    "3585": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9218,
        9225
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3587": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9218,
        9225
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3588": {
      "op": "PUSH1",
      "value": "0x62"
    },
    "3590": {
      "op": "ADD"
    },
    "3591": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3593": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3594": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3596": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3597": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "DUP4",
      "path": "1"
    },
    "3598": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "SUB",
      "path": "1"
    },
    "3599": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "SUB",
      "path": "1"
    },
    "3600": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3601": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3602": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3603": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "3605": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9254,
        9311
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "3606": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9244,
        9312
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3607": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9244,
        9312
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "3608": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9244,
        9312
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3609": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9244,
        9312
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "3611": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9244,
        9312
      ],
      "op": "ADD",
      "path": "1"
    },
    "3612": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9244,
        9312
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "3613": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9237,
        9312
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "3614": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9237,
        9312
      ],
      "op": "POP",
      "path": "1"
    },
    "3615": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9125,
        9319
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3616": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9125,
        9319
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3617": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9125,
        9319
      ],
      "op": "POP",
      "path": "1"
    },
    "3618": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9125,
        9319
      ],
      "op": "POP",
      "path": "1"
    },
    "3619": {
      "fn": "ECDSA.toTypedDataHash",
      "offset": [
        9125,
        9319
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3620": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4442,
        4497
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "3621": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4435,
        4497
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "3622": {
      "fn": "EIP712._hashTypedDataV4",
      "offset": [
        4339,
        4504
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "3623": {
      "op": "POP"
    },
    "3624": {
      "op": "POP"
    },
    "3625": {
      "fn": "EIP712._hashTypedDataV4",
      "jump": "o",
      "offset": [
        4339,
        4504
      ],
      "op": "JUMP",
      "path": "2"
    },
    "3626": {
      "fn": "ECDSA.recover",
      "offset": [
        4293,
        4520
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3627": {
      "fn": "ECDSA.recover",
      "offset": [
        4371,
        4378
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3629": {
      "fn": "ECDSA.recover",
      "offset": [
        4391,
        4408
      ],
      "op": "DUP1",
      "path": "1"
    },
    "3630": {
      "fn": "ECDSA.recover",
      "offset": [
        4410,
        4428
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "3632": {
      "fn": "ECDSA.recover",
      "offset": [
        4432,
        4459
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE39"
    },
    "3635": {
      "fn": "ECDSA.recover",
      "offset": [
        4443,
        4447
      ],
      "op": "DUP6",
      "path": "1"
    },
    "3636": {
      "fn": "ECDSA.recover",
      "offset": [
        4449,
        4458
      ],
      "op": "DUP6",
      "path": "1"
    },
    "3637": {
      "fn": "ECDSA.recover",
      "offset": [
        4432,
        4442
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x124B"
    },
    "3640": {
      "fn": "ECDSA.recover",
      "jump": "i",
      "offset": [
        4432,
        4459
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3641": {
      "fn": "ECDSA.recover",
      "offset": [
        4432,
        4459
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3642": {
      "fn": "ECDSA.recover",
      "offset": [
        4390,
        4459
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3643": {
      "fn": "ECDSA.recover",
      "offset": [
        4390,
        4459
      ],
      "op": "POP",
      "path": "1"
    },
    "3644": {
      "fn": "ECDSA.recover",
      "offset": [
        4390,
        4459
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "3645": {
      "fn": "ECDSA.recover",
      "offset": [
        4390,
        4459
      ],
      "op": "POP",
      "path": "1"
    },
    "3646": {
      "fn": "ECDSA.recover",
      "offset": [
        4469,
        4487
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 34,
      "value": "0xE46"
    },
    "3649": {
      "fn": "ECDSA.recover",
      "offset": [
        4481,
        4486
      ],
      "op": "DUP2",
      "path": "1"
    },
    "3650": {
      "fn": "ECDSA.recover",
      "offset": [
        4469,
        4480
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12BB"
    },
    "3653": {
      "fn": "ECDSA.recover",
      "jump": "i",
      "offset": [
        4469,
        4487
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3654": {
      "fn": "ECDSA.recover",
      "offset": [
        4469,
        4487
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "3655": {
      "op": "POP"
    },
    "3656": {
      "fn": "ECDSA.recover",
      "offset": [
        4504,
        4513
      ],
      "op": "SWAP4",
      "path": "1",
      "statement": 35
    },
    "3657": {
      "fn": "ECDSA.recover",
      "offset": [
        4293,
        4520
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "3658": {
      "op": "POP"
    },
    "3659": {
      "op": "POP"
    },
    "3660": {
      "op": "POP"
    },
    "3661": {
      "fn": "ECDSA.recover",
      "jump": "o",
      "offset": [
        4293,
        4520
      ],
      "op": "JUMP",
      "path": "1"
    },
    "3662": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3663": {
      "fn": "SafeMath.add",
      "offset": [
        2799,
        2806
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "3665": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "PUSH2",
      "path": "3",
      "statement": 36,
      "value": "0xE5A"
    },
    "3668": {
      "fn": "SafeMath.add",
      "offset": [
        2829,
        2830
      ],
      "op": "DUP3",
      "path": "3"
    },
    "3669": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2826
      ],
      "op": "DUP5",
      "path": "3"
    },
    "3670": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1911"
    },
    "3673": {
      "fn": "SafeMath.add",
      "jump": "i",
      "offset": [
        2825,
        2830
      ],
      "op": "JUMP",
      "path": "3"
    },
    "3674": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "3675": {
      "fn": "SafeMath.add",
      "offset": [
        2818,
        2830
      ],
      "op": "SWAP4",
      "path": "3"
    },
    "3676": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "3677": {
      "op": "POP"
    },
    "3678": {
      "op": "POP"
    },
    "3679": {
      "op": "POP"
    },
    "3680": {
      "fn": "SafeMath.add",
      "jump": "o",
      "offset": [
        2741,
        2837
      ],
      "op": "JUMP",
      "path": "3"
    },
    "3681": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9682,
        9925
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3682": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9757,
        9761
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3684": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9757,
        9761
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3685": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3686": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9794,
        9809
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3688": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9794,
        9816
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3689": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9790,
        9816
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "3691": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9790,
        9816
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3692": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9790,
        9816
      ],
      "op": "AND",
      "path": "5"
    },
    "3693": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9790,
        9816
      ],
      "op": "LT",
      "path": "5"
    },
    "3694": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3695": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEB3"
    },
    "3698": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3699": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9870
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3701": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9871,
        9872
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3702": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "3704": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "AND",
      "path": "5"
    },
    "3705": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3706": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3707": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3708": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "LT",
      "path": "5"
    },
    "3709": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE88"
    },
    "3712": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3713": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE88"
    },
    "3716": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3719": {
      "fn": "Voting._isInElectionWinners",
      "jump": "i",
      "offset": [
        9855,
        9873
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3720": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3721": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3722": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3724": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3725": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3727": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3729": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3730": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "ADD",
      "path": "5"
    },
    "3731": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9855,
        9873
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3732": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9839,
        9851
      ],
      "op": "DUP4",
      "path": "5"
    },
    "3733": {
      "branch": 71,
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9839,
        9873
      ],
      "op": "EQ",
      "path": "5"
    },
    "3734": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9836,
        9886
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3735": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9836,
        9886
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEA3"
    },
    "3738": {
      "branch": 71,
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9836,
        9886
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3739": {
      "op": "POP"
    },
    "3740": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9882,
        9886
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 37,
      "value": "0x1"
    },
    "3742": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9882,
        9886
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "3743": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9682,
        9925
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3744": {
      "op": "POP"
    },
    "3745": {
      "op": "POP"
    },
    "3746": {
      "fn": "Voting._isInElectionWinners",
      "jump": "o",
      "offset": [
        9682,
        9925
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3747": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9836,
        9886
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3748": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9818,
        9821
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 38,
      "value": "0xEAC"
    },
    "3751": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9818,
        9821
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3752": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9818,
        9821
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x19B5"
    },
    "3755": {
      "fn": "Voting._isInElectionWinners",
      "jump": "i",
      "offset": [
        9818,
        9821
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3756": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9818,
        9821
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3757": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9818,
        9821
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3758": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9818,
        9821
      ],
      "op": "POP",
      "path": "5"
    },
    "3759": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xE65"
    },
    "3762": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3763": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9773,
        9897
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3764": {
      "op": "POP"
    },
    "3765": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9913,
        9918
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 39,
      "value": "0x0"
    },
    "3767": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9913,
        9918
      ],
      "op": "SWAP3",
      "path": "5"
    },
    "3768": {
      "fn": "Voting._isInElectionWinners",
      "offset": [
        9682,
        9925
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3769": {
      "op": "POP"
    },
    "3770": {
      "op": "POP"
    },
    "3771": {
      "fn": "Voting._isInElectionWinners",
      "jump": "o",
      "offset": [
        9682,
        9925
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3772": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10117,
        10312
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3773": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10206,
        10221
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3775": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10206,
        10228
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3776": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10170,
        10177
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3778": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10170,
        10177
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3779": {
      "branch": 72,
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10255
      ],
      "op": "DUP1",
      "path": "5",
      "statement": 40
    },
    "3780": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10305
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xECE"
    },
    "3783": {
      "branch": 72,
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10305
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3784": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10304,
        10305
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3786": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10305
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF1B"
    },
    "3789": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10305
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3790": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10305
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3791": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10268
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "3793": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10284
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3795": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10285,
        10293
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEDD"
    },
    "3798": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10292,
        10293
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "3800": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10285,
        10291
      ],
      "op": "DUP5",
      "path": "5"
    },
    "3801": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10285,
        10293
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x194E"
    },
    "3804": {
      "fn": "Voting._getLastPlaceVotes",
      "jump": "i",
      "offset": [
        10285,
        10293
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3805": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10285,
        10293
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3806": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3807": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3808": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3809": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "LT",
      "path": "5"
    },
    "3810": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEED"
    },
    "3813": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3814": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xEED"
    },
    "3817": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3820": {
      "fn": "Voting._getLastPlaceVotes",
      "jump": "i",
      "offset": [
        10269,
        10294
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3821": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3822": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3823": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3825": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3826": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3828": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3830": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3831": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "ADD",
      "path": "5"
    },
    "3832": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10269,
        10294
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3833": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3834": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3835": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3836": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "LT",
      "path": "5"
    },
    "3837": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF08"
    },
    "3840": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3841": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF08"
    },
    "3844": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3847": {
      "fn": "Voting._getLastPlaceVotes",
      "jump": "i",
      "offset": [
        10258,
        10295
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3848": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3849": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3850": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3852": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3853": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3855": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3857": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3858": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3859": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "3861": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "MUL",
      "path": "5"
    },
    "3862": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10295
      ],
      "op": "ADD",
      "path": "5"
    },
    "3863": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10301
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3865": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10301
      ],
      "op": "ADD",
      "path": "5"
    },
    "3866": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10258,
        10301
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3867": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10245,
        10305
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3868": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10238,
        10305
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3869": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10238,
        10305
      ],
      "op": "POP",
      "path": "5"
    },
    "3870": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10238,
        10305
      ],
      "op": "POP",
      "path": "5"
    },
    "3871": {
      "fn": "Voting._getLastPlaceVotes",
      "offset": [
        10117,
        10312
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3872": {
      "fn": "Voting._getLastPlaceVotes",
      "jump": "o",
      "offset": [
        10117,
        10312
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3873": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10480,
        10797
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3874": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10575,
        10590
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3876": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10575,
        10597
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3877": {
      "offset": [
        522,
        523
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3879": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10610,
        10642
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3880": {
      "branch": 73,
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10610,
        10642
      ],
      "op": "LT",
      "path": "5"
    },
    "3881": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10607,
        10791
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "3882": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10607,
        10791
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF63"
    },
    "3885": {
      "branch": 73,
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10607,
        10791
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3886": {
      "op": "POP"
    },
    "3887": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10673
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 41,
      "value": "0x6"
    },
    "3889": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "DUP1",
      "path": "5"
    },
    "3890": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3891": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "3893": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3894": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "ADD",
      "path": "5"
    },
    "3895": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3896": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3897": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "3899": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3900": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3901": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3902": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3903": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "PUSH32",
      "path": "5",
      "value": "0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F"
    },
    "3936": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "ADD",
      "path": "5"
    },
    "3937": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10658,
        10692
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3938": {
      "fn": "Voting.vote",
      "jump": "o",
      "offset": [
        2845,
        2964
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3939": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10607,
        10791
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3940": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10768,
        10780
      ],
      "op": "DUP2",
      "path": "5",
      "statement": 42
    },
    "3941": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10738
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3943": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10739,
        10764
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF72"
    },
    "3946": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10763,
        10764
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "3948": {
      "offset": [
        522,
        523
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "3950": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10739,
        10764
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x194E"
    },
    "3953": {
      "fn": "Voting._insertIntoElectionWinners",
      "jump": "i",
      "offset": [
        10739,
        10764
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3954": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10739,
        10764
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3955": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3956": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3957": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "DUP2",
      "path": "5"
    },
    "3958": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "LT",
      "path": "5"
    },
    "3959": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF82"
    },
    "3962": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3963": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF82"
    },
    "3966": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "3969": {
      "fn": "Voting._insertIntoElectionWinners",
      "jump": "i",
      "offset": [
        10723,
        10765
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3970": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3971": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3973": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3974": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "DUP3",
      "path": "5"
    },
    "3975": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "3976": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "3978": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "3979": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "3980": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "3981": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10765
      ],
      "op": "ADD",
      "path": "5"
    },
    "3982": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10723,
        10780
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "3983": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10547,
        10797
      ],
      "op": "POP",
      "path": "5"
    },
    "3984": {
      "fn": "Voting._insertIntoElectionWinners",
      "offset": [
        10480,
        10797
      ],
      "op": "POP",
      "path": "5"
    },
    "3985": {
      "fn": "Voting._insertIntoElectionWinners",
      "jump": "o",
      "offset": [
        10480,
        10797
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3986": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8813,
        9443
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3987": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8868,
        8883
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "3989": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8868,
        8890
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "3990": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8865,
        8904
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF9B"
    },
    "3993": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8865,
        8904
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "3994": {
      "fn": "Voting._sortElectionWinners",
      "jump": "o",
      "offset": [
        8813,
        9443
      ],
      "op": "JUMP",
      "path": "5"
    },
    "3995": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8865,
        8904
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3996": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8918,
        8925
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "3998": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "3999": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8935,
        8950
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4001": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8935,
        8957
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4002": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8935,
        8961
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFAD"
    },
    "4005": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8935,
        8961
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4006": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8960,
        8961
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "4008": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8960,
        8961
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4009": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8935,
        8961
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x194E"
    },
    "4012": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        8935,
        8961
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4013": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8935,
        8961
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4014": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8931,
        8932
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4015": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8931,
        8961
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4017": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8931,
        8961
      ],
      "op": "AND",
      "path": "5"
    },
    "4018": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8931,
        8961
      ],
      "op": "LT",
      "path": "5"
    },
    "4019": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "4020": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1121"
    },
    "4023": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4024": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8985,
        8992
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4026": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8995,
        8998
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFC4"
    },
    "4029": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8995,
        8996
      ],
      "op": "DUP3",
      "path": "5"
    },
    "4030": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8997,
        8998
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x1"
    },
    "4032": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8995,
        8998
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1929"
    },
    "4035": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        8995,
        8998
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4036": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8995,
        8998
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4037": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8985,
        8998
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4038": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8985,
        8998
      ],
      "op": "POP",
      "path": "5"
    },
    "4039": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4040": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9004,
        9019
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4042": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9004,
        9026
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4043": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9000,
        9026
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4045": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9000,
        9026
      ],
      "op": "DUP3",
      "path": "5"
    },
    "4046": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9000,
        9026
      ],
      "op": "AND",
      "path": "5"
    },
    "4047": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9000,
        9026
      ],
      "op": "LT",
      "path": "5"
    },
    "4048": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "4049": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1110"
    },
    "4052": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4053": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9050,
        9069
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4055": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9087
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4057": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9088,
        9089
      ],
      "op": "DUP4",
      "path": "5"
    },
    "4058": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4060": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "AND",
      "path": "5"
    },
    "4061": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4062": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4063": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4064": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "LT",
      "path": "5"
    },
    "4065": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFEC"
    },
    "4068": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4069": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFEC"
    },
    "4072": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4075": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9072,
        9090
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4076": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4077": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4078": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4080": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4081": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4083": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4085": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4086": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "ADD",
      "path": "5"
    },
    "4087": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9072,
        9090
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4088": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9050,
        9090
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4089": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9050,
        9090
      ],
      "op": "POP",
      "path": "5"
    },
    "4090": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9108,
        9127
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4092": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9145
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4094": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9146,
        9147
      ],
      "op": "DUP4",
      "path": "5"
    },
    "4095": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4097": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "AND",
      "path": "5"
    },
    "4098": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4099": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4100": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4101": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "LT",
      "path": "5"
    },
    "4102": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1011"
    },
    "4105": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4106": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1011"
    },
    "4109": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4112": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9130,
        9148
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4113": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4114": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4115": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4117": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4118": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4120": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4122": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4123": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "ADD",
      "path": "5"
    },
    "4124": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9130,
        9148
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4125": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9108,
        9148
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4126": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9108,
        9148
      ],
      "op": "POP",
      "path": "5"
    },
    "4127": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9211
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "4129": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9212,
        9223
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4130": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4131": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4132": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4133": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "LT",
      "path": "5"
    },
    "4134": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1031"
    },
    "4137": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4138": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1031"
    },
    "4141": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4144": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9201,
        9224
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4145": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4146": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4147": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4149": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4150": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4152": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4154": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4155": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4156": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "4158": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "MUL",
      "path": "5"
    },
    "4159": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9224
      ],
      "op": "ADD",
      "path": "5"
    },
    "4160": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9230
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "4162": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9230
      ],
      "op": "ADD",
      "path": "5"
    },
    "4163": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9201,
        9230
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4164": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9179
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x5"
    },
    "4166": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9180,
        9191
      ],
      "op": "DUP4",
      "path": "5"
    },
    "4167": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4168": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4169": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4170": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "LT",
      "path": "5"
    },
    "4171": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1056"
    },
    "4174": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4175": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1056"
    },
    "4178": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4181": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9169,
        9192
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4182": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4183": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4184": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4186": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4187": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4189": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4191": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4192": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4193": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x4"
    },
    "4195": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "MUL",
      "path": "5"
    },
    "4196": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9192
      ],
      "op": "ADD",
      "path": "5"
    },
    "4197": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9198
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x3"
    },
    "4199": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9198
      ],
      "op": "ADD",
      "path": "5"
    },
    "4200": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9198
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4201": {
      "branch": 74,
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9169,
        9230
      ],
      "op": "LT",
      "path": "5"
    },
    "4202": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9166,
        9413
      ],
      "op": "ISZERO",
      "path": "5"
    },
    "4203": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9166,
        9413
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10FD"
    },
    "4206": {
      "branch": 74,
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9166,
        9413
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4207": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9253,
        9265
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4209": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9283
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4211": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9284,
        9285
      ],
      "op": "DUP6",
      "path": "5"
    },
    "4212": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4214": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "AND",
      "path": "5"
    },
    "4215": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4216": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4217": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4218": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "LT",
      "path": "5"
    },
    "4219": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1086"
    },
    "4222": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4223": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1086"
    },
    "4226": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4229": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9268,
        9286
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4230": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4231": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4232": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4234": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4235": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4237": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4239": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4240": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "ADD",
      "path": "5"
    },
    "4241": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9268,
        9286
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4242": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9253,
        9286
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4243": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9253,
        9286
      ],
      "op": "POP",
      "path": "5"
    },
    "4244": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9344
      ],
      "op": "PUSH1",
      "path": "5",
      "statement": 43,
      "value": "0x6"
    },
    "4246": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9345,
        9346
      ],
      "op": "DUP5",
      "path": "5"
    },
    "4247": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4249": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "AND",
      "path": "5"
    },
    "4250": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4251": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4252": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4253": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "LT",
      "path": "5"
    },
    "4254": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10A9"
    },
    "4257": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4258": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10A9"
    },
    "4261": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4264": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9329,
        9347
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4265": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4266": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4267": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4269": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4270": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4272": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4274": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4275": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "ADD",
      "path": "5"
    },
    "4276": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9329,
        9347
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4277": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9323
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4279": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9324,
        9325
      ],
      "op": "DUP7",
      "path": "5"
    },
    "4280": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4282": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "AND",
      "path": "5"
    },
    "4283": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4284": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4285": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4286": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "LT",
      "path": "5"
    },
    "4287": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10CA"
    },
    "4290": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4291": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10CA"
    },
    "4294": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4297": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9308,
        9326
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4298": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4299": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4300": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4302": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4303": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4305": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4307": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4308": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9326
      ],
      "op": "ADD",
      "path": "5"
    },
    "4309": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9347
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4310": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9347
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4311": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9347
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "4312": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9308,
        9347
      ],
      "op": "POP",
      "path": "5"
    },
    "4313": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9390,
        9394
      ],
      "op": "DUP1",
      "path": "5",
      "statement": 44
    },
    "4314": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9384
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x6"
    },
    "4316": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9385,
        9386
      ],
      "op": "DUP6",
      "path": "5"
    },
    "4317": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0xFF"
    },
    "4319": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "AND",
      "path": "5"
    },
    "4320": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4321": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "SLOAD",
      "path": "5"
    },
    "4322": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4323": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "LT",
      "path": "5"
    },
    "4324": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10EF"
    },
    "4327": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "JUMPI",
      "path": "5"
    },
    "4328": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x10EF"
    },
    "4331": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1A01"
    },
    "4334": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9369,
        9387
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4335": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4336": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x0"
    },
    "4338": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "4339": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "DUP3",
      "path": "5"
    },
    "4340": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "MSTORE",
      "path": "5"
    },
    "4341": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "PUSH1",
      "path": "5",
      "value": "0x20"
    },
    "4343": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4344": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "SWAP2",
      "path": "5"
    },
    "4345": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "KECCAK256",
      "path": "5"
    },
    "4346": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9387
      ],
      "op": "ADD",
      "path": "5"
    },
    "4347": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9369,
        9394
      ],
      "op": "SSTORE",
      "path": "5"
    },
    "4348": {
      "op": "POP"
    },
    "4349": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9166,
        9413
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4350": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9032,
        9427
      ],
      "op": "POP",
      "path": "5"
    },
    "4351": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9032,
        9427
      ],
      "op": "POP",
      "path": "5"
    },
    "4352": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "DUP1",
      "path": "5",
      "statement": 45
    },
    "4353": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x1109"
    },
    "4356": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4357": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x19B5"
    },
    "4360": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        9028,
        9031
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4361": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4362": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4363": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        9028,
        9031
      ],
      "op": "POP",
      "path": "5"
    },
    "4364": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xFC7"
    },
    "4367": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4368": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8981,
        9427
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4369": {
      "op": "POP"
    },
    "4370": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8963,
        8966
      ],
      "op": "PUSH2",
      "path": "5",
      "statement": 46,
      "value": "0x111A"
    },
    "4373": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8963,
        8966
      ],
      "op": "DUP2",
      "path": "5"
    },
    "4374": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8963,
        8966
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0x19B5"
    },
    "4377": {
      "fn": "Voting._sortElectionWinners",
      "jump": "i",
      "offset": [
        8963,
        8966
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4378": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8963,
        8966
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4379": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8963,
        8966
      ],
      "op": "SWAP1",
      "path": "5"
    },
    "4380": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8963,
        8966
      ],
      "op": "POP",
      "path": "5"
    },
    "4381": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "PUSH2",
      "path": "5",
      "value": "0xF9E"
    },
    "4384": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4385": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "JUMPDEST",
      "path": "5"
    },
    "4386": {
      "fn": "Voting._sortElectionWinners",
      "offset": [
        8914,
        9437
      ],
      "op": "POP",
      "path": "5"
    },
    "4387": {
      "fn": "Voting._sortElectionWinners",
      "jump": "o",
      "offset": [
        8813,
        9443
      ],
      "op": "JUMP",
      "path": "5"
    },
    "4388": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3143,
        3451
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4389": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3196,
        3203
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "4391": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3227,
        3231
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "4392": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4394": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "4396": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4398": {
      "op": "SHL"
    },
    "4399": {
      "op": "SUB"
    },
    "4400": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3236,
        3248
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x0"
    },
    "4433": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3248
      ],
      "op": "AND",
      "path": "2"
    },
    "4434": {
      "branch": 86,
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3248
      ],
      "op": "EQ",
      "path": "2"
    },
    "4435": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3285
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4436": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3285
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "4437": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3285
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x117D"
    },
    "4440": {
      "branch": 86,
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3285
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "4441": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3285
      ],
      "op": "POP",
      "path": "2"
    },
    "4442": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3269,
        3285
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x0"
    },
    "4475": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3252,
        3265
      ],
      "op": "CHAINID",
      "path": "2"
    },
    "4476": {
      "branch": 87,
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3252,
        3285
      ],
      "op": "EQ",
      "path": "2"
    },
    "4477": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3219,
        3285
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4478": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3215,
        3445
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "4479": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3215,
        3445
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x11A7"
    },
    "4482": {
      "branch": 87,
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3215,
        3445
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "4483": {
      "op": "POP"
    },
    "4484": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3308,
        3332
      ],
      "op": "PUSH32",
      "path": "2",
      "statement": 47,
      "value": "0x0"
    },
    "4517": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3308,
        3332
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4518": {
      "fn": "EIP712._domainSeparatorV4",
      "jump": "o",
      "offset": [
        3143,
        3451
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4519": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3215,
        3445
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "4520": {
      "op": "POP"
    },
    "4521": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 48,
      "value": "0x40"
    },
    "4523": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4524": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4525": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3392,
        3402
      ],
      "op": "PUSH32",
      "path": "2",
      "statement": 49,
      "value": "0x0"
    },
    "4558": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "4560": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4561": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4562": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "ADD",
      "path": "2"
    },
    "4563": {
      "op": "SWAP2"
    },
    "4564": {
      "op": "SWAP1"
    },
    "4565": {
      "op": "SWAP2"
    },
    "4566": {
      "op": "MSTORE"
    },
    "4567": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3404,
        3416
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x0"
    },
    "4600": {
      "op": "DUP3"
    },
    "4601": {
      "op": "DUP5"
    },
    "4602": {
      "op": "ADD"
    },
    "4603": {
      "op": "MSTORE"
    },
    "4604": {
      "fn": "EIP712._domainSeparatorV4",
      "offset": [
        3418,
        3433
      ],
      "op": "PUSH32",
      "path": "2",
      "value": "0x0"
    },
    "4637": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "4639": {
      "op": "DUP4"
    },
    "4640": {
      "op": "ADD"
    },
    "4641": {
      "op": "MSTORE"
    },
    "4642": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3677,
        3690
      ],
      "op": "CHAINID",
      "path": "2"
    },
    "4643": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "4645": {
      "op": "DUP4"
    },
    "4646": {
      "op": "ADD"
    },
    "4647": {
      "op": "MSTORE"
    },
    "4648": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3700,
        3704
      ],
      "op": "ADDRESS",
      "path": "2"
    },
    "4649": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "4651": {
      "op": "DUP1"
    },
    "4652": {
      "op": "DUP5"
    },
    "4653": {
      "op": "ADD"
    },
    "4654": {
      "op": "SWAP2"
    },
    "4655": {
      "op": "SWAP1"
    },
    "4656": {
      "op": "SWAP2"
    },
    "4657": {
      "op": "MSTORE"
    },
    "4658": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP4",
      "path": "2"
    },
    "4659": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4660": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4661": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP5",
      "path": "2"
    },
    "4662": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "SUB",
      "path": "2"
    },
    "4663": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4664": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "4665": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "ADD",
      "path": "2"
    },
    "4666": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "DUP2",
      "path": "2"
    },
    "4667": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4668": {
      "op": "PUSH1",
      "value": "0xC0"
    },
    "4670": {
      "op": "SWAP1"
    },
    "4671": {
      "op": "SWAP3"
    },
    "4672": {
      "op": "ADD"
    },
    "4673": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4674": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "4675": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3633,
        3706
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "4676": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3623,
        3707
      ],
      "op": "DUP1",
      "path": "2"
    },
    "4677": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3623,
        3707
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "4678": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3623,
        3707
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "4679": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3623,
        3707
      ],
      "op": "ADD",
      "path": "2"
    },
    "4680": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3623,
        3707
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "4681": {
      "fn": "EIP712._buildDomainSeparator",
      "offset": [
        3623,
        3707
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "4682": {
      "fn": "EIP712._domainSeparatorV4",
      "jump": "o",
      "offset": [
        3143,
        3451
      ],
      "op": "JUMP",
      "path": "2"
    },
    "4683": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        3507
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4684": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2309,
        2316
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4686": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2318,
        2330
      ],
      "op": "DUP1",
      "path": "1"
    },
    "4687": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2539,
        2548
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4688": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2539,
        2555
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4689": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2559,
        2561
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x41"
    },
    "4691": {
      "branch": 75,
      "fn": "ECDSA.tryRecover",
      "offset": [
        2539,
        2561
      ],
      "op": "EQ",
      "path": "1"
    },
    "4692": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2535,
        3501
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4693": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2535,
        3501
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1282"
    },
    "4696": {
      "branch": 75,
      "fn": "ECDSA.tryRecover",
      "offset": [
        2535,
        3501
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4697": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2828,
        2832
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4699": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2813,
        2833
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4700": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2813,
        2833
      ],
      "op": "ADD",
      "path": "1"
    },
    "4701": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2807,
        2834
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4702": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2877,
        2881
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4704": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2862,
        2882
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4705": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2862,
        2882
      ],
      "op": "ADD",
      "path": "1"
    },
    "4706": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2856,
        2883
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4707": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2934,
        2938
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x60"
    },
    "4709": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2919,
        2939
      ],
      "op": "DUP6",
      "path": "1"
    },
    "4710": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2919,
        2939
      ],
      "op": "ADD",
      "path": "1"
    },
    "4711": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2913,
        2940
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4712": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2577,
        2586
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4714": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2905,
        2941
      ],
      "op": "BYTE",
      "path": "1"
    },
    "4715": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2975,
        3000
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 50,
      "value": "0x1276"
    },
    "4718": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2986,
        2990
      ],
      "op": "DUP8",
      "path": "1"
    },
    "4719": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2905,
        2941
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4720": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2807,
        2834
      ],
      "op": "DUP6",
      "path": "1"
    },
    "4721": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2856,
        2883
      ],
      "op": "DUP6",
      "path": "1"
    },
    "4722": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2975,
        2985
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1471"
    },
    "4725": {
      "fn": "ECDSA.tryRecover",
      "jump": "i",
      "offset": [
        2975,
        3000
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4726": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2975,
        3000
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4727": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "4728": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "POP",
      "path": "1"
    },
    "4729": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "4730": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "POP",
      "path": "1"
    },
    "4731": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "POP",
      "path": "1"
    },
    "4732": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "POP",
      "path": "1"
    },
    "4733": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "POP",
      "path": "1"
    },
    "4734": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12B4"
    },
    "4737": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2968,
        3000
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4738": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2535,
        3501
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4739": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3021,
        3030
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4740": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3021,
        3037
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4741": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3041,
        3043
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4743": {
      "branch": 76,
      "fn": "ECDSA.tryRecover",
      "offset": [
        3021,
        3043
      ],
      "op": "EQ",
      "path": "1"
    },
    "4744": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3017,
        3501
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4745": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3017,
        3501
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12AC"
    },
    "4748": {
      "branch": 76,
      "fn": "ECDSA.tryRecover",
      "offset": [
        3017,
        3501
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4749": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3290,
        3294
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "4751": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3275,
        3295
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4752": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3275,
        3295
      ],
      "op": "ADD",
      "path": "1"
    },
    "4753": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3269,
        3296
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4754": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3340,
        3344
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4756": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3325,
        3345
      ],
      "op": "DUP5",
      "path": "1"
    },
    "4757": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3325,
        3345
      ],
      "op": "ADD",
      "path": "1"
    },
    "4758": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3319,
        3346
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4759": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3380,
        3403
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 51,
      "value": "0x12A1"
    },
    "4762": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3391,
        3395
      ],
      "op": "DUP7",
      "path": "1"
    },
    "4763": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3269,
        3296
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4764": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3319,
        3346
      ],
      "op": "DUP4",
      "path": "1"
    },
    "4765": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3380,
        3390
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x155E"
    },
    "4768": {
      "fn": "ECDSA.tryRecover",
      "jump": "i",
      "offset": [
        3380,
        3403
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4769": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3380,
        3403
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4770": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "4771": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "POP",
      "path": "1"
    },
    "4772": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "4773": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "POP",
      "path": "1"
    },
    "4774": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "POP",
      "path": "1"
    },
    "4775": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "POP",
      "path": "1"
    },
    "4776": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12B4"
    },
    "4779": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3373,
        3403
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4780": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3017,
        3501
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4781": {
      "op": "POP"
    },
    "4782": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3450,
        3451
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 52,
      "value": "0x0"
    },
    "4784": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3450,
        3451
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4785": {
      "op": "POP"
    },
    "4786": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3454,
        3489
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "4788": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        3017,
        3501
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4789": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        3507
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4790": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        3507
      ],
      "op": "POP",
      "path": "1"
    },
    "4791": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        3507
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "4792": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        3507
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "4793": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        2228,
        3507
      ],
      "op": "POP",
      "path": "1"
    },
    "4794": {
      "fn": "ECDSA.tryRecover",
      "jump": "o",
      "offset": [
        2228,
        3507
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4795": {
      "fn": "ECDSA._throwError",
      "offset": [
        533,
        1164
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4796": {
      "fn": "ECDSA._throwError",
      "offset": [
        610,
        630
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "4798": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        606
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4799": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4801": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4802": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "GT",
      "path": "1"
    },
    "4803": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4804": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12CF"
    },
    "4807": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4808": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12CF"
    },
    "4811": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19EB"
    },
    "4814": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        601,
        630
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4815": {
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4816": {
      "branch": 77,
      "fn": "ECDSA._throwError",
      "offset": [
        601,
        630
      ],
      "op": "EQ",
      "path": "1"
    },
    "4817": {
      "fn": "ECDSA._throwError",
      "offset": [
        597,
        1158
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4818": {
      "fn": "ECDSA._throwError",
      "offset": [
        597,
        1158
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12D8"
    },
    "4821": {
      "branch": 77,
      "fn": "ECDSA._throwError",
      "offset": [
        597,
        1158
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4822": {
      "fn": "ECDSA._throwError",
      "offset": [
        533,
        1164
      ],
      "op": "POP",
      "path": "1"
    },
    "4823": {
      "fn": "ECDSA._throwError",
      "jump": "o",
      "offset": [
        533,
        1164
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4824": {
      "fn": "ECDSA._throwError",
      "offset": [
        597,
        1158
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4825": {
      "fn": "ECDSA._throwError",
      "offset": [
        706,
        735
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "4827": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        702
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4828": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4830": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4831": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "GT",
      "path": "1"
    },
    "4832": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4833": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12EC"
    },
    "4836": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4837": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x12EC"
    },
    "4840": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19EB"
    },
    "4843": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        697,
        735
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4844": {
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4845": {
      "branch": 78,
      "fn": "ECDSA._throwError",
      "offset": [
        697,
        735
      ],
      "op": "EQ",
      "path": "1"
    },
    "4846": {
      "fn": "ECDSA._throwError",
      "offset": [
        693,
        1158
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4847": {
      "fn": "ECDSA._throwError",
      "offset": [
        693,
        1158
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1335"
    },
    "4850": {
      "branch": 78,
      "fn": "ECDSA._throwError",
      "offset": [
        693,
        1158
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4851": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 53,
      "value": "0x40"
    },
    "4853": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4854": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4858": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4860": {
      "op": "SHL"
    },
    "4861": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4862": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4863": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4865": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4867": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4868": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "ADD",
      "path": "1"
    },
    "4869": {
      "op": "MSTORE"
    },
    "4870": {
      "op": "PUSH1",
      "value": "0x18"
    },
    "4872": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4874": {
      "op": "DUP3"
    },
    "4875": {
      "op": "ADD"
    },
    "4876": {
      "op": "MSTORE"
    },
    "4877": {
      "op": "PUSH24",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265"
    },
    "4902": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "4904": {
      "op": "SHL"
    },
    "4905": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "4907": {
      "op": "DUP3"
    },
    "4908": {
      "op": "ADD"
    },
    "4909": {
      "op": "MSTORE"
    },
    "4910": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "4912": {
      "op": "ADD"
    },
    "4913": {
      "fn": "ECDSA._throwError",
      "offset": [
        751,
        785
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x282"
    },
    "4916": {
      "op": "JUMP"
    },
    "4917": {
      "fn": "ECDSA._throwError",
      "offset": [
        693,
        1158
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4918": {
      "fn": "ECDSA._throwError",
      "offset": [
        815,
        850
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "4920": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        811
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4921": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4923": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4924": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "GT",
      "path": "1"
    },
    "4925": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4926": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1349"
    },
    "4929": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4930": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1349"
    },
    "4933": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19EB"
    },
    "4936": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        806,
        850
      ],
      "op": "JUMP",
      "path": "1"
    },
    "4937": {
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "4938": {
      "branch": 79,
      "fn": "ECDSA._throwError",
      "offset": [
        806,
        850
      ],
      "op": "EQ",
      "path": "1"
    },
    "4939": {
      "fn": "ECDSA._throwError",
      "offset": [
        802,
        1158
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "4940": {
      "fn": "ECDSA._throwError",
      "offset": [
        802,
        1158
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1397"
    },
    "4943": {
      "branch": 79,
      "fn": "ECDSA._throwError",
      "offset": [
        802,
        1158
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "4944": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 54,
      "value": "0x40"
    },
    "4946": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "4947": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "4951": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "4953": {
      "op": "SHL"
    },
    "4954": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "DUP2",
      "path": "1"
    },
    "4955": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "4956": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "4958": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "4960": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "DUP3",
      "path": "1"
    },
    "4961": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "ADD",
      "path": "1"
    },
    "4962": {
      "op": "MSTORE"
    },
    "4963": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "4965": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "4967": {
      "op": "DUP3"
    },
    "4968": {
      "op": "ADD"
    },
    "4969": {
      "op": "MSTORE"
    },
    "4970": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
    },
    "5003": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5005": {
      "op": "DUP3"
    },
    "5006": {
      "op": "ADD"
    },
    "5007": {
      "op": "MSTORE"
    },
    "5008": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5010": {
      "op": "ADD"
    },
    "5011": {
      "fn": "ECDSA._throwError",
      "offset": [
        866,
        907
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x282"
    },
    "5014": {
      "op": "JUMP"
    },
    "5015": {
      "fn": "ECDSA._throwError",
      "offset": [
        802,
        1158
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5016": {
      "fn": "ECDSA._throwError",
      "offset": [
        937,
        967
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "5018": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        933
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5019": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5021": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5022": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "GT",
      "path": "1"
    },
    "5023": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5024": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13AB"
    },
    "5027": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5028": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x13AB"
    },
    "5031": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19EB"
    },
    "5034": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        928,
        967
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5035": {
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5036": {
      "branch": 80,
      "fn": "ECDSA._throwError",
      "offset": [
        928,
        967
      ],
      "op": "EQ",
      "path": "1"
    },
    "5037": {
      "fn": "ECDSA._throwError",
      "offset": [
        924,
        1158
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5038": {
      "fn": "ECDSA._throwError",
      "offset": [
        924,
        1158
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1404"
    },
    "5041": {
      "branch": 80,
      "fn": "ECDSA._throwError",
      "offset": [
        924,
        1158
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5042": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 55,
      "value": "0x40"
    },
    "5044": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5045": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5049": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5051": {
      "op": "SHL"
    },
    "5052": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5053": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5054": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5056": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5058": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5059": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "ADD",
      "path": "1"
    },
    "5060": {
      "op": "MSTORE"
    },
    "5061": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "5063": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5065": {
      "op": "DUP3"
    },
    "5066": {
      "op": "ADD"
    },
    "5067": {
      "op": "MSTORE"
    },
    "5068": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265202773272076616C"
    },
    "5101": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5103": {
      "op": "DUP3"
    },
    "5104": {
      "op": "ADD"
    },
    "5105": {
      "op": "MSTORE"
    },
    "5106": {
      "op": "PUSH2",
      "value": "0x7565"
    },
    "5109": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "5111": {
      "op": "SHL"
    },
    "5112": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5114": {
      "op": "DUP3"
    },
    "5115": {
      "op": "ADD"
    },
    "5116": {
      "op": "MSTORE"
    },
    "5117": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5119": {
      "op": "ADD"
    },
    "5120": {
      "fn": "ECDSA._throwError",
      "offset": [
        983,
        1027
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x282"
    },
    "5123": {
      "op": "JUMP"
    },
    "5124": {
      "fn": "ECDSA._throwError",
      "offset": [
        924,
        1158
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5125": {
      "fn": "ECDSA._throwError",
      "offset": [
        1057,
        1087
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5127": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1053
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5128": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5130": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5131": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "GT",
      "path": "1"
    },
    "5132": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5133": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1418"
    },
    "5136": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5137": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1418"
    },
    "5140": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x19EB"
    },
    "5143": {
      "fn": "ECDSA._throwError",
      "jump": "i",
      "offset": [
        1048,
        1087
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5144": {
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5145": {
      "branch": 81,
      "fn": "ECDSA._throwError",
      "offset": [
        1048,
        1087
      ],
      "op": "EQ",
      "path": "1"
    },
    "5146": {
      "fn": "ECDSA._throwError",
      "offset": [
        1044,
        1158
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5147": {
      "fn": "ECDSA._throwError",
      "offset": [
        1044,
        1158
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1121"
    },
    "5150": {
      "branch": 81,
      "fn": "ECDSA._throwError",
      "offset": [
        1044,
        1158
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5151": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 56,
      "value": "0x40"
    },
    "5153": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5154": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "5158": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "5160": {
      "op": "SHL"
    },
    "5161": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5162": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5163": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5165": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5167": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5168": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "ADD",
      "path": "1"
    },
    "5169": {
      "op": "MSTORE"
    },
    "5170": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "5172": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "5174": {
      "op": "DUP3"
    },
    "5175": {
      "op": "ADD"
    },
    "5176": {
      "op": "MSTORE"
    },
    "5177": {
      "op": "PUSH32",
      "value": "0x45434453413A20696E76616C6964207369676E6174757265202776272076616C"
    },
    "5210": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "5212": {
      "op": "DUP3"
    },
    "5213": {
      "op": "ADD"
    },
    "5214": {
      "op": "MSTORE"
    },
    "5215": {
      "op": "PUSH2",
      "value": "0x7565"
    },
    "5218": {
      "op": "PUSH1",
      "value": "0xF0"
    },
    "5220": {
      "op": "SHL"
    },
    "5221": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "5223": {
      "op": "DUP3"
    },
    "5224": {
      "op": "ADD"
    },
    "5225": {
      "op": "MSTORE"
    },
    "5226": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "5228": {
      "op": "ADD"
    },
    "5229": {
      "fn": "ECDSA._throwError",
      "offset": [
        1103,
        1147
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x282"
    },
    "5232": {
      "op": "JUMP"
    },
    "5233": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5234": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5870,
        5877
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5236": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5870,
        5877
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5237": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6794,
        6860
      ],
      "op": "PUSH32",
      "path": "1",
      "value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
    },
    "5270": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6781,
        6860
      ],
      "op": "DUP4",
      "path": "1"
    },
    "5271": {
      "branch": 82,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6781,
        6860
      ],
      "op": "GT",
      "path": "1"
    },
    "5272": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6777,
        6938
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5273": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6777,
        6938
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14A8"
    },
    "5276": {
      "branch": 82,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6777,
        6938
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5277": {
      "op": "POP"
    },
    "5278": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6892,
        6893
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 57,
      "value": "0x0"
    },
    "5280": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6892,
        6893
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5281": {
      "op": "POP"
    },
    "5282": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6896,
        6926
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x3"
    },
    "5284": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6876,
        6927
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1555"
    },
    "5287": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6876,
        6927
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5288": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6777,
        6938
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5289": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6952
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5290": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6958
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "5292": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6958
      ],
      "op": "AND",
      "path": "1"
    },
    "5293": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6956,
        6958
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1B"
    },
    "5295": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6958
      ],
      "op": "EQ",
      "path": "1"
    },
    "5296": {
      "branch": 83,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6958
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5297": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6969
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5298": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6969
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5299": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6969
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14C0"
    },
    "5302": {
      "branch": 83,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6969
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5303": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6969
      ],
      "op": "POP",
      "path": "1"
    },
    "5304": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6962,
        6963
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5305": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6962,
        6969
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "5307": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6962,
        6969
      ],
      "op": "AND",
      "path": "1"
    },
    "5308": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6967,
        6969
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1C"
    },
    "5310": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6962,
        6969
      ],
      "op": "EQ",
      "path": "1"
    },
    "5311": {
      "branch": 84,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6962,
        6969
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5312": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6951,
        6969
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5313": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6947,
        7047
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5314": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6947,
        7047
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x14D1"
    },
    "5317": {
      "branch": 84,
      "fn": "ECDSA.tryRecover",
      "offset": [
        6947,
        7047
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5318": {
      "op": "POP"
    },
    "5319": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7001,
        7002
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 58,
      "value": "0x0"
    },
    "5321": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7001,
        7002
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5322": {
      "op": "POP"
    },
    "5323": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7005,
        7035
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "5325": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6985,
        7036
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1555"
    },
    "5328": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6985,
        7036
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5329": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        6947,
        7047
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5330": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5332": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5333": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5334": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7141,
        7155
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5336": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5337": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5338": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5339": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5341": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5342": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "ADD",
      "path": "1"
    },
    "5343": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5344": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5345": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5346": {
      "op": "DUP10"
    },
    "5347": {
      "op": "SWAP1"
    },
    "5348": {
      "op": "MSTORE"
    },
    "5349": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "5351": {
      "op": "DUP9"
    },
    "5352": {
      "op": "AND"
    },
    "5353": {
      "op": "SWAP3"
    },
    "5354": {
      "op": "DUP3"
    },
    "5355": {
      "op": "ADD"
    },
    "5356": {
      "op": "SWAP3"
    },
    "5357": {
      "op": "SWAP1"
    },
    "5358": {
      "op": "SWAP3"
    },
    "5359": {
      "op": "MSTORE"
    },
    "5360": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5362": {
      "op": "DUP2"
    },
    "5363": {
      "op": "ADD"
    },
    "5364": {
      "op": "DUP7"
    },
    "5365": {
      "op": "SWAP1"
    },
    "5366": {
      "op": "MSTORE"
    },
    "5367": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5369": {
      "op": "DUP2"
    },
    "5370": {
      "op": "ADD"
    },
    "5371": {
      "op": "DUP6"
    },
    "5372": {
      "op": "SWAP1"
    },
    "5373": {
      "op": "MSTORE"
    },
    "5374": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "5376": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5377": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5379": {
      "op": "ADD"
    },
    "5380": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5382": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5384": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5385": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "5387": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5388": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "SUB",
      "path": "1"
    },
    "5389": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5390": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5391": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5392": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "SUB",
      "path": "1"
    },
    "5393": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5394": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP6",
      "path": "1"
    },
    "5395": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "GAS",
      "path": "1"
    },
    "5396": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "STATICCALL",
      "path": "1"
    },
    "5397": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5398": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5399": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "5400": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1525"
    },
    "5403": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5404": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "5405": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5407": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5408": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "RETURNDATACOPY",
      "path": "1"
    },
    "5409": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "RETURNDATASIZE",
      "path": "1"
    },
    "5410": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5412": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "REVERT",
      "path": "1"
    },
    "5413": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5414": {
      "op": "POP"
    },
    "5415": {
      "op": "POP"
    },
    "5416": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "5418": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5419": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5421": {
      "op": "NOT"
    },
    "5422": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "ADD",
      "path": "1"
    },
    "5423": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "5424": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7158,
        7182
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5425": {
      "op": "POP"
    },
    "5426": {
      "op": "POP"
    },
    "5427": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5429": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5431": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5433": {
      "op": "SHL"
    },
    "5434": {
      "op": "SUB"
    },
    "5435": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7196,
        7216
      ],
      "op": "DUP2",
      "path": "1"
    },
    "5436": {
      "branch": 85,
      "fn": "ECDSA.tryRecover",
      "offset": [
        7196,
        7216
      ],
      "op": "AND",
      "path": "1"
    },
    "5437": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7192,
        7293
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x154E"
    },
    "5440": {
      "branch": 85,
      "fn": "ECDSA.tryRecover",
      "offset": [
        7192,
        7293
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "5441": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7248,
        7249
      ],
      "op": "PUSH1",
      "path": "1",
      "statement": 59,
      "value": "0x0"
    },
    "5443": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7252,
        7281
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "5445": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5446": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "POP",
      "path": "1"
    },
    "5447": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5448": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "POP",
      "path": "1"
    },
    "5449": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "POP",
      "path": "1"
    },
    "5450": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1555"
    },
    "5453": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7232,
        7282
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5454": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7192,
        7293
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5455": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7311,
        7317
      ],
      "op": "SWAP2",
      "path": "1",
      "statement": 60
    },
    "5456": {
      "op": "POP"
    },
    "5457": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7319,
        7339
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5459": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        7319,
        7339
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5460": {
      "op": "POP"
    },
    "5461": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5462": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "5463": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "POP",
      "path": "1"
    },
    "5464": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "SWAP5",
      "path": "1"
    },
    "5465": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "SWAP3",
      "path": "1"
    },
    "5466": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "POP",
      "path": "1"
    },
    "5467": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "POP",
      "path": "1"
    },
    "5468": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5744,
        7347
      ],
      "op": "POP",
      "path": "1"
    },
    "5469": {
      "fn": "ECDSA.tryRecover",
      "jump": "o",
      "offset": [
        5744,
        7347
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5470": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5471": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4884,
        4891
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "5473": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4884,
        4891
      ],
      "op": "DUP1",
      "path": "1"
    },
    "5474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5478": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "5480": {
      "op": "SHL"
    },
    "5481": {
      "op": "SUB"
    },
    "5482": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4981,
        5056
      ],
      "op": "DUP4",
      "path": "1"
    },
    "5483": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4981,
        5056
      ],
      "op": "AND",
      "path": "1"
    },
    "5484": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5082,
        5085
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "5486": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5078,
        5090
      ],
      "op": "DUP5",
      "path": "1"
    },
    "5487": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5078,
        5090
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "5488": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5078,
        5090
      ],
      "op": "SHR",
      "path": "1"
    },
    "5489": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5092,
        5094
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1B"
    },
    "5491": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5074,
        5095
      ],
      "op": "ADD",
      "path": "1"
    },
    "5492": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5121,
        5146
      ],
      "op": "PUSH2",
      "path": "1",
      "statement": 61,
      "value": "0x157F"
    },
    "5495": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5132,
        5136
      ],
      "op": "DUP8",
      "path": "1"
    },
    "5496": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5074,
        5095
      ],
      "op": "DUP3",
      "path": "1"
    },
    "5497": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5141,
        5142
      ],
      "op": "DUP9",
      "path": "1"
    },
    "5498": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4981,
        5056
      ],
      "op": "DUP6",
      "path": "1"
    },
    "5499": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5121,
        5131
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1471"
    },
    "5502": {
      "fn": "ECDSA.tryRecover",
      "jump": "i",
      "offset": [
        5121,
        5146
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5503": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5121,
        5146
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "5504": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5114,
        5146
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "5505": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5114,
        5146
      ],
      "op": "POP",
      "path": "1"
    },
    "5506": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5114,
        5146
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "5507": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5114,
        5146
      ],
      "op": "POP",
      "path": "1"
    },
    "5508": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5114,
        5146
      ],
      "op": "POP",
      "path": "1"
    },
    "5509": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        5114,
        5146
      ],
      "op": "POP",
      "path": "1"
    },
    "5510": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "5511": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "POP",
      "path": "1"
    },
    "5512": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "SWAP4",
      "path": "1"
    },
    "5513": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "5514": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "POP",
      "path": "1"
    },
    "5515": {
      "fn": "ECDSA.tryRecover",
      "offset": [
        4774,
        5153
      ],
      "op": "POP",
      "path": "1"
    },
    "5516": {
      "fn": "ECDSA.tryRecover",
      "jump": "o",
      "offset": [
        4774,
        5153
      ],
      "op": "JUMP",
      "path": "1"
    },
    "5517": {
      "op": "JUMPDEST"
    },
    "5518": {
      "op": "DUP1"
    },
    "5519": {
      "op": "CALLDATALOAD"
    },
    "5520": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5522": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "5524": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "5526": {
      "op": "SHL"
    },
    "5527": {
      "op": "SUB"
    },
    "5528": {
      "op": "DUP2"
    },
    "5529": {
      "op": "AND"
    },
    "5530": {
      "op": "DUP2"
    },
    "5531": {
      "op": "EQ"
    },
    "5532": {
      "op": "PUSH2",
      "value": "0x15A4"
    },
    "5535": {
      "op": "JUMPI"
    },
    "5536": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5538": {
      "op": "DUP1"
    },
    "5539": {
      "op": "REVERT"
    },
    "5540": {
      "op": "JUMPDEST"
    },
    "5541": {
      "op": "SWAP2"
    },
    "5542": {
      "op": "SWAP1"
    },
    "5543": {
      "op": "POP"
    },
    "5544": {
      "jump": "o",
      "op": "JUMP"
    },
    "5545": {
      "op": "JUMPDEST"
    },
    "5546": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5548": {
      "op": "DUP1"
    },
    "5549": {
      "op": "DUP4"
    },
    "5550": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5552": {
      "op": "DUP5"
    },
    "5553": {
      "op": "ADD"
    },
    "5554": {
      "op": "SLT"
    },
    "5555": {
      "op": "PUSH2",
      "value": "0x15BB"
    },
    "5558": {
      "op": "JUMPI"
    },
    "5559": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5561": {
      "op": "DUP1"
    },
    "5562": {
      "op": "REVERT"
    },
    "5563": {
      "op": "JUMPDEST"
    },
    "5564": {
      "op": "POP"
    },
    "5565": {
      "op": "DUP2"
    },
    "5566": {
      "op": "CALLDATALOAD"
    },
    "5567": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5576": {
      "op": "DUP2"
    },
    "5577": {
      "op": "GT"
    },
    "5578": {
      "op": "ISZERO"
    },
    "5579": {
      "op": "PUSH2",
      "value": "0x15D3"
    },
    "5582": {
      "op": "JUMPI"
    },
    "5583": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5585": {
      "op": "DUP1"
    },
    "5586": {
      "op": "REVERT"
    },
    "5587": {
      "op": "JUMPDEST"
    },
    "5588": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5590": {
      "op": "DUP4"
    },
    "5591": {
      "op": "ADD"
    },
    "5592": {
      "op": "SWAP2"
    },
    "5593": {
      "op": "POP"
    },
    "5594": {
      "op": "DUP4"
    },
    "5595": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5597": {
      "op": "DUP3"
    },
    "5598": {
      "op": "DUP6"
    },
    "5599": {
      "op": "ADD"
    },
    "5600": {
      "op": "ADD"
    },
    "5601": {
      "op": "GT"
    },
    "5602": {
      "op": "ISZERO"
    },
    "5603": {
      "op": "PUSH2",
      "value": "0x12B4"
    },
    "5606": {
      "op": "JUMPI"
    },
    "5607": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5609": {
      "op": "DUP1"
    },
    "5610": {
      "op": "REVERT"
    },
    "5611": {
      "op": "JUMPDEST"
    },
    "5612": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5614": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5616": {
      "op": "DUP3"
    },
    "5617": {
      "op": "DUP5"
    },
    "5618": {
      "op": "SUB"
    },
    "5619": {
      "op": "SLT"
    },
    "5620": {
      "op": "ISZERO"
    },
    "5621": {
      "op": "PUSH2",
      "value": "0x15FD"
    },
    "5624": {
      "op": "JUMPI"
    },
    "5625": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5627": {
      "op": "DUP1"
    },
    "5628": {
      "op": "REVERT"
    },
    "5629": {
      "op": "JUMPDEST"
    },
    "5630": {
      "op": "PUSH2",
      "value": "0xE5A"
    },
    "5633": {
      "op": "DUP3"
    },
    "5634": {
      "op": "PUSH2",
      "value": "0x158D"
    },
    "5637": {
      "jump": "i",
      "op": "JUMP"
    },
    "5638": {
      "op": "JUMPDEST"
    },
    "5639": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5641": {
      "op": "DUP1"
    },
    "5642": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5644": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5646": {
      "op": "DUP5"
    },
    "5647": {
      "op": "DUP7"
    },
    "5648": {
      "op": "SUB"
    },
    "5649": {
      "op": "SLT"
    },
    "5650": {
      "op": "ISZERO"
    },
    "5651": {
      "op": "PUSH2",
      "value": "0x161B"
    },
    "5654": {
      "op": "JUMPI"
    },
    "5655": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5657": {
      "op": "DUP1"
    },
    "5658": {
      "op": "REVERT"
    },
    "5659": {
      "op": "JUMPDEST"
    },
    "5660": {
      "op": "PUSH2",
      "value": "0x1624"
    },
    "5663": {
      "op": "DUP5"
    },
    "5664": {
      "op": "PUSH2",
      "value": "0x158D"
    },
    "5667": {
      "jump": "i",
      "op": "JUMP"
    },
    "5668": {
      "op": "JUMPDEST"
    },
    "5669": {
      "op": "SWAP6"
    },
    "5670": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5672": {
      "op": "DUP6"
    },
    "5673": {
      "op": "ADD"
    },
    "5674": {
      "op": "CALLDATALOAD"
    },
    "5675": {
      "op": "SWAP6"
    },
    "5676": {
      "op": "POP"
    },
    "5677": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5679": {
      "op": "SWAP1"
    },
    "5680": {
      "op": "SWAP5"
    },
    "5681": {
      "op": "ADD"
    },
    "5682": {
      "op": "CALLDATALOAD"
    },
    "5683": {
      "op": "SWAP4"
    },
    "5684": {
      "op": "SWAP3"
    },
    "5685": {
      "op": "POP"
    },
    "5686": {
      "op": "POP"
    },
    "5687": {
      "op": "POP"
    },
    "5688": {
      "jump": "o",
      "op": "JUMP"
    },
    "5689": {
      "op": "JUMPDEST"
    },
    "5690": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5692": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5694": {
      "op": "DUP3"
    },
    "5695": {
      "op": "DUP5"
    },
    "5696": {
      "op": "SUB"
    },
    "5697": {
      "op": "SLT"
    },
    "5698": {
      "op": "ISZERO"
    },
    "5699": {
      "op": "PUSH2",
      "value": "0x164B"
    },
    "5702": {
      "op": "JUMPI"
    },
    "5703": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5705": {
      "op": "DUP1"
    },
    "5706": {
      "op": "REVERT"
    },
    "5707": {
      "op": "JUMPDEST"
    },
    "5708": {
      "op": "DUP2"
    },
    "5709": {
      "op": "MLOAD"
    },
    "5710": {
      "op": "DUP1"
    },
    "5711": {
      "op": "ISZERO"
    },
    "5712": {
      "op": "ISZERO"
    },
    "5713": {
      "op": "DUP2"
    },
    "5714": {
      "op": "EQ"
    },
    "5715": {
      "op": "PUSH2",
      "value": "0xE5A"
    },
    "5718": {
      "op": "JUMPI"
    },
    "5719": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5721": {
      "op": "DUP1"
    },
    "5722": {
      "op": "REVERT"
    },
    "5723": {
      "op": "JUMPDEST"
    },
    "5724": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5726": {
      "op": "DUP1"
    },
    "5727": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5729": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5731": {
      "op": "DUP5"
    },
    "5732": {
      "op": "DUP7"
    },
    "5733": {
      "op": "SUB"
    },
    "5734": {
      "op": "SLT"
    },
    "5735": {
      "op": "ISZERO"
    },
    "5736": {
      "op": "PUSH2",
      "value": "0x1670"
    },
    "5739": {
      "op": "JUMPI"
    },
    "5740": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5742": {
      "op": "DUP1"
    },
    "5743": {
      "op": "REVERT"
    },
    "5744": {
      "op": "JUMPDEST"
    },
    "5745": {
      "op": "DUP4"
    },
    "5746": {
      "op": "CALLDATALOAD"
    },
    "5747": {
      "op": "SWAP3"
    },
    "5748": {
      "op": "POP"
    },
    "5749": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5751": {
      "op": "DUP5"
    },
    "5752": {
      "op": "ADD"
    },
    "5753": {
      "op": "CALLDATALOAD"
    },
    "5754": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5763": {
      "op": "DUP2"
    },
    "5764": {
      "op": "GT"
    },
    "5765": {
      "op": "ISZERO"
    },
    "5766": {
      "op": "PUSH2",
      "value": "0x168E"
    },
    "5769": {
      "op": "JUMPI"
    },
    "5770": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5772": {
      "op": "DUP1"
    },
    "5773": {
      "op": "REVERT"
    },
    "5774": {
      "op": "JUMPDEST"
    },
    "5775": {
      "op": "PUSH2",
      "value": "0x169A"
    },
    "5778": {
      "op": "DUP7"
    },
    "5779": {
      "op": "DUP3"
    },
    "5780": {
      "op": "DUP8"
    },
    "5781": {
      "op": "ADD"
    },
    "5782": {
      "op": "PUSH2",
      "value": "0x15A9"
    },
    "5785": {
      "jump": "i",
      "op": "JUMP"
    },
    "5786": {
      "op": "JUMPDEST"
    },
    "5787": {
      "op": "SWAP5"
    },
    "5788": {
      "op": "SWAP8"
    },
    "5789": {
      "op": "SWAP1"
    },
    "5790": {
      "op": "SWAP7"
    },
    "5791": {
      "op": "POP"
    },
    "5792": {
      "op": "SWAP4"
    },
    "5793": {
      "op": "SWAP5"
    },
    "5794": {
      "op": "POP"
    },
    "5795": {
      "op": "POP"
    },
    "5796": {
      "op": "POP"
    },
    "5797": {
      "op": "POP"
    },
    "5798": {
      "jump": "o",
      "op": "JUMP"
    },
    "5799": {
      "op": "JUMPDEST"
    },
    "5800": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5802": {
      "op": "DUP1"
    },
    "5803": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5805": {
      "op": "DUP1"
    },
    "5806": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5808": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "5810": {
      "op": "DUP7"
    },
    "5811": {
      "op": "DUP9"
    },
    "5812": {
      "op": "SUB"
    },
    "5813": {
      "op": "SLT"
    },
    "5814": {
      "op": "ISZERO"
    },
    "5815": {
      "op": "PUSH2",
      "value": "0x16BF"
    },
    "5818": {
      "op": "JUMPI"
    },
    "5819": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5821": {
      "op": "DUP1"
    },
    "5822": {
      "op": "REVERT"
    },
    "5823": {
      "op": "JUMPDEST"
    },
    "5824": {
      "op": "DUP6"
    },
    "5825": {
      "op": "CALLDATALOAD"
    },
    "5826": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "5835": {
      "op": "DUP2"
    },
    "5836": {
      "op": "GT"
    },
    "5837": {
      "op": "ISZERO"
    },
    "5838": {
      "op": "PUSH2",
      "value": "0x16D6"
    },
    "5841": {
      "op": "JUMPI"
    },
    "5842": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5844": {
      "op": "DUP1"
    },
    "5845": {
      "op": "REVERT"
    },
    "5846": {
      "op": "JUMPDEST"
    },
    "5847": {
      "op": "PUSH2",
      "value": "0x16E2"
    },
    "5850": {
      "op": "DUP9"
    },
    "5851": {
      "op": "DUP3"
    },
    "5852": {
      "op": "DUP10"
    },
    "5853": {
      "op": "ADD"
    },
    "5854": {
      "op": "PUSH2",
      "value": "0x15A9"
    },
    "5857": {
      "jump": "i",
      "op": "JUMP"
    },
    "5858": {
      "op": "JUMPDEST"
    },
    "5859": {
      "op": "SWAP1"
    },
    "5860": {
      "op": "SWAP7"
    },
    "5861": {
      "op": "POP"
    },
    "5862": {
      "op": "SWAP5"
    },
    "5863": {
      "op": "POP"
    },
    "5864": {
      "op": "PUSH2",
      "value": "0x16F5"
    },
    "5867": {
      "op": "SWAP1"
    },
    "5868": {
      "op": "POP"
    },
    "5869": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5871": {
      "op": "DUP8"
    },
    "5872": {
      "op": "ADD"
    },
    "5873": {
      "op": "PUSH2",
      "value": "0x158D"
    },
    "5876": {
      "jump": "i",
      "op": "JUMP"
    },
    "5877": {
      "op": "JUMPDEST"
    },
    "5878": {
      "op": "SWAP5"
    },
    "5879": {
      "op": "SWAP8"
    },
    "5880": {
      "op": "SWAP4"
    },
    "5881": {
      "op": "SWAP7"
    },
    "5882": {
      "op": "POP"
    },
    "5883": {
      "op": "SWAP4"
    },
    "5884": {
      "op": "SWAP5"
    },
    "5885": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5887": {
      "op": "DUP2"
    },
    "5888": {
      "op": "ADD"
    },
    "5889": {
      "op": "CALLDATALOAD"
    },
    "5890": {
      "op": "SWAP5"
    },
    "5891": {
      "op": "POP"
    },
    "5892": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "5894": {
      "op": "ADD"
    },
    "5895": {
      "op": "CALLDATALOAD"
    },
    "5896": {
      "op": "SWAP3"
    },
    "5897": {
      "op": "SWAP2"
    },
    "5898": {
      "op": "POP"
    },
    "5899": {
      "op": "POP"
    },
    "5900": {
      "jump": "o",
      "op": "JUMP"
    },
    "5901": {
      "op": "JUMPDEST"
    },
    "5902": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5904": {
      "op": "DUP1"
    },
    "5905": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "5907": {
      "op": "DUP4"
    },
    "5908": {
      "op": "DUP6"
    },
    "5909": {
      "op": "SUB"
    },
    "5910": {
      "op": "SLT"
    },
    "5911": {
      "op": "ISZERO"
    },
    "5912": {
      "op": "PUSH2",
      "value": "0x1720"
    },
    "5915": {
      "op": "JUMPI"
    },
    "5916": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5918": {
      "op": "DUP1"
    },
    "5919": {
      "op": "REVERT"
    },
    "5920": {
      "op": "JUMPDEST"
    },
    "5921": {
      "op": "POP"
    },
    "5922": {
      "op": "POP"
    },
    "5923": {
      "op": "DUP1"
    },
    "5924": {
      "op": "CALLDATALOAD"
    },
    "5925": {
      "op": "SWAP3"
    },
    "5926": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5928": {
      "op": "SWAP1"
    },
    "5929": {
      "op": "SWAP2"
    },
    "5930": {
      "op": "ADD"
    },
    "5931": {
      "op": "CALLDATALOAD"
    },
    "5932": {
      "op": "SWAP2"
    },
    "5933": {
      "op": "POP"
    },
    "5934": {
      "jump": "o",
      "op": "JUMP"
    },
    "5935": {
      "op": "JUMPDEST"
    },
    "5936": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5938": {
      "op": "DUP2"
    },
    "5939": {
      "op": "MLOAD"
    },
    "5940": {
      "op": "DUP1"
    },
    "5941": {
      "op": "DUP5"
    },
    "5942": {
      "op": "MSTORE"
    },
    "5943": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5945": {
      "op": "JUMPDEST"
    },
    "5946": {
      "op": "DUP2"
    },
    "5947": {
      "op": "DUP2"
    },
    "5948": {
      "op": "LT"
    },
    "5949": {
      "op": "ISZERO"
    },
    "5950": {
      "op": "PUSH2",
      "value": "0x1755"
    },
    "5953": {
      "op": "JUMPI"
    },
    "5954": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5956": {
      "op": "DUP2"
    },
    "5957": {
      "op": "DUP6"
    },
    "5958": {
      "op": "ADD"
    },
    "5959": {
      "op": "DUP2"
    },
    "5960": {
      "op": "ADD"
    },
    "5961": {
      "op": "MLOAD"
    },
    "5962": {
      "op": "DUP7"
    },
    "5963": {
      "op": "DUP4"
    },
    "5964": {
      "op": "ADD"
    },
    "5965": {
      "op": "DUP3"
    },
    "5966": {
      "op": "ADD"
    },
    "5967": {
      "op": "MSTORE"
    },
    "5968": {
      "op": "ADD"
    },
    "5969": {
      "op": "PUSH2",
      "value": "0x1739"
    },
    "5972": {
      "op": "JUMP"
    },
    "5973": {
      "op": "JUMPDEST"
    },
    "5974": {
      "op": "DUP2"
    },
    "5975": {
      "op": "DUP2"
    },
    "5976": {
      "op": "GT"
    },
    "5977": {
      "op": "ISZERO"
    },
    "5978": {
      "op": "PUSH2",
      "value": "0x1767"
    },
    "5981": {
      "op": "JUMPI"
    },
    "5982": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "5984": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "5986": {
      "op": "DUP4"
    },
    "5987": {
      "op": "DUP8"
    },
    "5988": {
      "op": "ADD"
    },
    "5989": {
      "op": "ADD"
    },
    "5990": {
      "op": "MSTORE"
    },
    "5991": {
      "op": "JUMPDEST"
    },
    "5992": {
      "op": "POP"
    },
    "5993": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5995": {
      "op": "ADD"
    },
    "5996": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "5998": {
      "op": "NOT"
    },
    "5999": {
      "op": "AND"
    },
    "6000": {
      "op": "SWAP3"
    },
    "6001": {
      "op": "SWAP1"
    },
    "6002": {
      "op": "SWAP3"
    },
    "6003": {
      "op": "ADD"
    },
    "6004": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6006": {
      "op": "ADD"
    },
    "6007": {
      "op": "SWAP3"
    },
    "6008": {
      "op": "SWAP2"
    },
    "6009": {
      "op": "POP"
    },
    "6010": {
      "op": "POP"
    },
    "6011": {
      "jump": "o",
      "op": "JUMP"
    },
    "6012": {
      "op": "JUMPDEST"
    },
    "6013": {
      "op": "DUP1"
    },
    "6014": {
      "op": "SLOAD"
    },
    "6015": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6017": {
      "op": "SWAP1"
    },
    "6018": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6020": {
      "op": "DUP2"
    },
    "6021": {
      "op": "DUP2"
    },
    "6022": {
      "op": "SHR"
    },
    "6023": {
      "op": "SWAP1"
    },
    "6024": {
      "op": "DUP1"
    },
    "6025": {
      "op": "DUP4"
    },
    "6026": {
      "op": "AND"
    },
    "6027": {
      "op": "DUP1"
    },
    "6028": {
      "op": "PUSH2",
      "value": "0x1796"
    },
    "6031": {
      "op": "JUMPI"
    },
    "6032": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "6034": {
      "op": "DUP4"
    },
    "6035": {
      "op": "AND"
    },
    "6036": {
      "op": "SWAP3"
    },
    "6037": {
      "op": "POP"
    },
    "6038": {
      "op": "JUMPDEST"
    },
    "6039": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6041": {
      "op": "DUP1"
    },
    "6042": {
      "op": "DUP5"
    },
    "6043": {
      "op": "LT"
    },
    "6044": {
      "op": "DUP3"
    },
    "6045": {
      "op": "EQ"
    },
    "6046": {
      "op": "ISZERO"
    },
    "6047": {
      "op": "PUSH2",
      "value": "0x17B8"
    },
    "6050": {
      "op": "JUMPI"
    },
    "6051": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6056": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6058": {
      "op": "SHL"
    },
    "6059": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6061": {
      "op": "MSTORE"
    },
    "6062": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "6064": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6066": {
      "op": "MSTORE"
    },
    "6067": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6069": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6071": {
      "op": "REVERT"
    },
    "6072": {
      "op": "JUMPDEST"
    },
    "6073": {
      "op": "DUP4"
    },
    "6074": {
      "op": "DUP9"
    },
    "6075": {
      "op": "MSTORE"
    },
    "6076": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6078": {
      "op": "DUP9"
    },
    "6079": {
      "op": "ADD"
    },
    "6080": {
      "op": "DUP3"
    },
    "6081": {
      "op": "DUP1"
    },
    "6082": {
      "op": "ISZERO"
    },
    "6083": {
      "op": "PUSH2",
      "value": "0x17D3"
    },
    "6086": {
      "op": "JUMPI"
    },
    "6087": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6089": {
      "op": "DUP2"
    },
    "6090": {
      "op": "EQ"
    },
    "6091": {
      "op": "PUSH2",
      "value": "0x17E4"
    },
    "6094": {
      "op": "JUMPI"
    },
    "6095": {
      "op": "PUSH2",
      "value": "0x180F"
    },
    "6098": {
      "op": "JUMP"
    },
    "6099": {
      "op": "JUMPDEST"
    },
    "6100": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6102": {
      "op": "NOT"
    },
    "6103": {
      "op": "DUP8"
    },
    "6104": {
      "op": "AND"
    },
    "6105": {
      "op": "DUP3"
    },
    "6106": {
      "op": "MSTORE"
    },
    "6107": {
      "op": "DUP3"
    },
    "6108": {
      "op": "DUP3"
    },
    "6109": {
      "op": "ADD"
    },
    "6110": {
      "op": "SWAP8"
    },
    "6111": {
      "op": "POP"
    },
    "6112": {
      "op": "PUSH2",
      "value": "0x180F"
    },
    "6115": {
      "op": "JUMP"
    },
    "6116": {
      "op": "JUMPDEST"
    },
    "6117": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6119": {
      "op": "DUP10"
    },
    "6120": {
      "op": "DUP2"
    },
    "6121": {
      "op": "MSTORE"
    },
    "6122": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6124": {
      "op": "SWAP1"
    },
    "6125": {
      "op": "KECCAK256"
    },
    "6126": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6128": {
      "op": "JUMPDEST"
    },
    "6129": {
      "op": "DUP8"
    },
    "6130": {
      "op": "DUP2"
    },
    "6131": {
      "op": "LT"
    },
    "6132": {
      "op": "ISZERO"
    },
    "6133": {
      "op": "PUSH2",
      "value": "0x1809"
    },
    "6136": {
      "op": "JUMPI"
    },
    "6137": {
      "op": "DUP2"
    },
    "6138": {
      "op": "SLOAD"
    },
    "6139": {
      "op": "DUP5"
    },
    "6140": {
      "op": "DUP3"
    },
    "6141": {
      "op": "ADD"
    },
    "6142": {
      "op": "MSTORE"
    },
    "6143": {
      "op": "SWAP1"
    },
    "6144": {
      "op": "DUP7"
    },
    "6145": {
      "op": "ADD"
    },
    "6146": {
      "op": "SWAP1"
    },
    "6147": {
      "op": "DUP5"
    },
    "6148": {
      "op": "ADD"
    },
    "6149": {
      "op": "PUSH2",
      "value": "0x17F0"
    },
    "6152": {
      "op": "JUMP"
    },
    "6153": {
      "op": "JUMPDEST"
    },
    "6154": {
      "op": "DUP4"
    },
    "6155": {
      "op": "ADD"
    },
    "6156": {
      "op": "SWAP9"
    },
    "6157": {
      "op": "POP"
    },
    "6158": {
      "op": "POP"
    },
    "6159": {
      "op": "JUMPDEST"
    },
    "6160": {
      "op": "POP"
    },
    "6161": {
      "op": "POP"
    },
    "6162": {
      "op": "POP"
    },
    "6163": {
      "op": "POP"
    },
    "6164": {
      "op": "POP"
    },
    "6165": {
      "op": "POP"
    },
    "6166": {
      "op": "POP"
    },
    "6167": {
      "op": "SWAP3"
    },
    "6168": {
      "op": "SWAP2"
    },
    "6169": {
      "op": "POP"
    },
    "6170": {
      "op": "POP"
    },
    "6171": {
      "jump": "o",
      "op": "JUMP"
    },
    "6172": {
      "op": "JUMPDEST"
    },
    "6173": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6175": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6177": {
      "op": "DUP1"
    },
    "6178": {
      "op": "DUP4"
    },
    "6179": {
      "op": "ADD"
    },
    "6180": {
      "op": "DUP2"
    },
    "6181": {
      "op": "DUP5"
    },
    "6182": {
      "op": "MSTORE"
    },
    "6183": {
      "op": "DUP1"
    },
    "6184": {
      "op": "DUP6"
    },
    "6185": {
      "op": "MLOAD"
    },
    "6186": {
      "op": "DUP1"
    },
    "6187": {
      "op": "DUP4"
    },
    "6188": {
      "op": "MSTORE"
    },
    "6189": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6191": {
      "op": "SWAP3"
    },
    "6192": {
      "op": "POP"
    },
    "6193": {
      "op": "DUP3"
    },
    "6194": {
      "op": "DUP7"
    },
    "6195": {
      "op": "ADD"
    },
    "6196": {
      "op": "SWAP2"
    },
    "6197": {
      "op": "POP"
    },
    "6198": {
      "op": "DUP3"
    },
    "6199": {
      "op": "DUP2"
    },
    "6200": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "6202": {
      "op": "SHL"
    },
    "6203": {
      "op": "DUP8"
    },
    "6204": {
      "op": "ADD"
    },
    "6205": {
      "op": "ADD"
    },
    "6206": {
      "op": "DUP5"
    },
    "6207": {
      "op": "DUP9"
    },
    "6208": {
      "op": "ADD"
    },
    "6209": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6211": {
      "op": "JUMPDEST"
    },
    "6212": {
      "op": "DUP4"
    },
    "6213": {
      "op": "DUP2"
    },
    "6214": {
      "op": "LT"
    },
    "6215": {
      "op": "ISZERO"
    },
    "6216": {
      "op": "PUSH2",
      "value": "0x18AD"
    },
    "6219": {
      "op": "JUMPI"
    },
    "6220": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "6222": {
      "op": "NOT"
    },
    "6223": {
      "op": "DUP10"
    },
    "6224": {
      "op": "DUP5"
    },
    "6225": {
      "op": "SUB"
    },
    "6226": {
      "op": "ADD"
    },
    "6227": {
      "op": "DUP6"
    },
    "6228": {
      "op": "MSTORE"
    },
    "6229": {
      "op": "DUP2"
    },
    "6230": {
      "op": "MLOAD"
    },
    "6231": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6233": {
      "op": "DUP2"
    },
    "6234": {
      "op": "MLOAD"
    },
    "6235": {
      "op": "DUP2"
    },
    "6236": {
      "op": "DUP7"
    },
    "6237": {
      "op": "MSTORE"
    },
    "6238": {
      "op": "PUSH2",
      "value": "0x1869"
    },
    "6241": {
      "op": "DUP3"
    },
    "6242": {
      "op": "DUP8"
    },
    "6243": {
      "op": "ADD"
    },
    "6244": {
      "op": "DUP3"
    },
    "6245": {
      "op": "PUSH2",
      "value": "0x172F"
    },
    "6248": {
      "jump": "i",
      "op": "JUMP"
    },
    "6249": {
      "op": "JUMPDEST"
    },
    "6250": {
      "op": "SWAP2"
    },
    "6251": {
      "op": "POP"
    },
    "6252": {
      "op": "POP"
    },
    "6253": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6255": {
      "op": "DUP10"
    },
    "6256": {
      "op": "DUP4"
    },
    "6257": {
      "op": "ADD"
    },
    "6258": {
      "op": "MLOAD"
    },
    "6259": {
      "op": "AND"
    },
    "6260": {
      "op": "DUP10"
    },
    "6261": {
      "op": "DUP7"
    },
    "6262": {
      "op": "ADD"
    },
    "6263": {
      "op": "MSTORE"
    },
    "6264": {
      "op": "DUP8"
    },
    "6265": {
      "op": "DUP3"
    },
    "6266": {
      "op": "ADD"
    },
    "6267": {
      "op": "MLOAD"
    },
    "6268": {
      "op": "DUP6"
    },
    "6269": {
      "op": "DUP3"
    },
    "6270": {
      "op": "SUB"
    },
    "6271": {
      "op": "DUP10"
    },
    "6272": {
      "op": "DUP8"
    },
    "6273": {
      "op": "ADD"
    },
    "6274": {
      "op": "MSTORE"
    },
    "6275": {
      "op": "PUSH2",
      "value": "0x188C"
    },
    "6278": {
      "op": "DUP3"
    },
    "6279": {
      "op": "DUP3"
    },
    "6280": {
      "op": "PUSH2",
      "value": "0x172F"
    },
    "6283": {
      "jump": "i",
      "op": "JUMP"
    },
    "6284": {
      "op": "JUMPDEST"
    },
    "6285": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6287": {
      "op": "SWAP4"
    },
    "6288": {
      "op": "DUP5"
    },
    "6289": {
      "op": "ADD"
    },
    "6290": {
      "op": "MLOAD"
    },
    "6291": {
      "op": "SWAP7"
    },
    "6292": {
      "op": "SWAP1"
    },
    "6293": {
      "op": "SWAP4"
    },
    "6294": {
      "op": "ADD"
    },
    "6295": {
      "op": "SWAP6"
    },
    "6296": {
      "op": "SWAP1"
    },
    "6297": {
      "op": "SWAP6"
    },
    "6298": {
      "op": "MSTORE"
    },
    "6299": {
      "op": "POP"
    },
    "6300": {
      "op": "SWAP5"
    },
    "6301": {
      "op": "DUP8"
    },
    "6302": {
      "op": "ADD"
    },
    "6303": {
      "op": "SWAP5"
    },
    "6304": {
      "op": "SWAP3"
    },
    "6305": {
      "op": "POP"
    },
    "6306": {
      "op": "SWAP1"
    },
    "6307": {
      "op": "DUP7"
    },
    "6308": {
      "op": "ADD"
    },
    "6309": {
      "op": "SWAP1"
    },
    "6310": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6312": {
      "op": "ADD"
    },
    "6313": {
      "op": "PUSH2",
      "value": "0x1843"
    },
    "6316": {
      "op": "JUMP"
    },
    "6317": {
      "op": "JUMPDEST"
    },
    "6318": {
      "op": "POP"
    },
    "6319": {
      "op": "SWAP1"
    },
    "6320": {
      "op": "SWAP9"
    },
    "6321": {
      "op": "SWAP8"
    },
    "6322": {
      "op": "POP"
    },
    "6323": {
      "op": "POP"
    },
    "6324": {
      "op": "POP"
    },
    "6325": {
      "op": "POP"
    },
    "6326": {
      "op": "POP"
    },
    "6327": {
      "op": "POP"
    },
    "6328": {
      "op": "POP"
    },
    "6329": {
      "op": "POP"
    },
    "6330": {
      "jump": "o",
      "op": "JUMP"
    },
    "6331": {
      "op": "JUMPDEST"
    },
    "6332": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6334": {
      "op": "DUP2"
    },
    "6335": {
      "op": "MSTORE"
    },
    "6336": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6338": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6340": {
      "op": "DUP3"
    },
    "6341": {
      "op": "ADD"
    },
    "6342": {
      "op": "MSTORE"
    },
    "6343": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6345": {
      "op": "PUSH2",
      "value": "0x18D5"
    },
    "6348": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "6350": {
      "op": "DUP4"
    },
    "6351": {
      "op": "ADD"
    },
    "6352": {
      "op": "DUP5"
    },
    "6353": {
      "op": "PUSH2",
      "value": "0x177C"
    },
    "6356": {
      "jump": "i",
      "op": "JUMP"
    },
    "6357": {
      "op": "JUMPDEST"
    },
    "6358": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6360": {
      "op": "DUP5"
    },
    "6361": {
      "op": "ADD"
    },
    "6362": {
      "op": "SLOAD"
    },
    "6363": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6365": {
      "op": "AND"
    },
    "6366": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "6368": {
      "op": "DUP5"
    },
    "6369": {
      "op": "ADD"
    },
    "6370": {
      "op": "MSTORE"
    },
    "6371": {
      "op": "DUP3"
    },
    "6372": {
      "op": "DUP2"
    },
    "6373": {
      "op": "SUB"
    },
    "6374": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "6376": {
      "op": "NOT"
    },
    "6377": {
      "op": "ADD"
    },
    "6378": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "6380": {
      "op": "DUP5"
    },
    "6381": {
      "op": "ADD"
    },
    "6382": {
      "op": "MSTORE"
    },
    "6383": {
      "op": "PUSH2",
      "value": "0x18FB"
    },
    "6386": {
      "op": "DUP2"
    },
    "6387": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "6389": {
      "op": "DUP7"
    },
    "6390": {
      "op": "ADD"
    },
    "6391": {
      "op": "PUSH2",
      "value": "0x177C"
    },
    "6394": {
      "jump": "i",
      "op": "JUMP"
    },
    "6395": {
      "op": "JUMPDEST"
    },
    "6396": {
      "op": "SWAP1"
    },
    "6397": {
      "op": "POP"
    },
    "6398": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "6400": {
      "op": "DUP5"
    },
    "6401": {
      "op": "ADD"
    },
    "6402": {
      "op": "SLOAD"
    },
    "6403": {
      "op": "PUSH1",
      "value": "0x80"
    },
    "6405": {
      "op": "DUP5"
    },
    "6406": {
      "op": "ADD"
    },
    "6407": {
      "op": "MSTORE"
    },
    "6408": {
      "op": "DUP1"
    },
    "6409": {
      "op": "SWAP2"
    },
    "6410": {
      "op": "POP"
    },
    "6411": {
      "op": "POP"
    },
    "6412": {
      "op": "SWAP3"
    },
    "6413": {
      "op": "SWAP2"
    },
    "6414": {
      "op": "POP"
    },
    "6415": {
      "op": "POP"
    },
    "6416": {
      "jump": "o",
      "op": "JUMP"
    },
    "6417": {
      "op": "JUMPDEST"
    },
    "6418": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6420": {
      "op": "DUP3"
    },
    "6421": {
      "op": "NOT"
    },
    "6422": {
      "op": "DUP3"
    },
    "6423": {
      "op": "GT"
    },
    "6424": {
      "op": "ISZERO"
    },
    "6425": {
      "op": "PUSH2",
      "value": "0x1924"
    },
    "6428": {
      "op": "JUMPI"
    },
    "6429": {
      "op": "PUSH2",
      "value": "0x1924"
    },
    "6432": {
      "op": "PUSH2",
      "value": "0x19D5"
    },
    "6435": {
      "jump": "i",
      "op": "JUMP"
    },
    "6436": {
      "op": "JUMPDEST"
    },
    "6437": {
      "op": "POP"
    },
    "6438": {
      "op": "ADD"
    },
    "6439": {
      "op": "SWAP1"
    },
    "6440": {
      "jump": "o",
      "op": "JUMP"
    },
    "6441": {
      "op": "JUMPDEST"
    },
    "6442": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6444": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6446": {
      "op": "DUP3"
    },
    "6447": {
      "op": "AND"
    },
    "6448": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6450": {
      "op": "DUP5"
    },
    "6451": {
      "op": "AND"
    },
    "6452": {
      "op": "DUP1"
    },
    "6453": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6455": {
      "op": "SUB"
    },
    "6456": {
      "op": "DUP3"
    },
    "6457": {
      "op": "GT"
    },
    "6458": {
      "op": "ISZERO"
    },
    "6459": {
      "op": "PUSH2",
      "value": "0x1946"
    },
    "6462": {
      "op": "JUMPI"
    },
    "6463": {
      "op": "PUSH2",
      "value": "0x1946"
    },
    "6466": {
      "op": "PUSH2",
      "value": "0x19D5"
    },
    "6469": {
      "jump": "i",
      "op": "JUMP"
    },
    "6470": {
      "op": "JUMPDEST"
    },
    "6471": {
      "op": "ADD"
    },
    "6472": {
      "op": "SWAP4"
    },
    "6473": {
      "op": "SWAP3"
    },
    "6474": {
      "op": "POP"
    },
    "6475": {
      "op": "POP"
    },
    "6476": {
      "op": "POP"
    },
    "6477": {
      "jump": "o",
      "op": "JUMP"
    },
    "6478": {
      "op": "JUMPDEST"
    },
    "6479": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6481": {
      "op": "DUP3"
    },
    "6482": {
      "op": "DUP3"
    },
    "6483": {
      "op": "LT"
    },
    "6484": {
      "op": "ISZERO"
    },
    "6485": {
      "op": "PUSH2",
      "value": "0x1960"
    },
    "6488": {
      "op": "JUMPI"
    },
    "6489": {
      "op": "PUSH2",
      "value": "0x1960"
    },
    "6492": {
      "op": "PUSH2",
      "value": "0x19D5"
    },
    "6495": {
      "jump": "i",
      "op": "JUMP"
    },
    "6496": {
      "op": "JUMPDEST"
    },
    "6497": {
      "op": "POP"
    },
    "6498": {
      "op": "SUB"
    },
    "6499": {
      "op": "SWAP1"
    },
    "6500": {
      "jump": "o",
      "op": "JUMP"
    },
    "6501": {
      "op": "JUMPDEST"
    },
    "6502": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6504": {
      "op": "DUP2"
    },
    "6505": {
      "op": "DUP2"
    },
    "6506": {
      "op": "SHR"
    },
    "6507": {
      "op": "SWAP1"
    },
    "6508": {
      "op": "DUP3"
    },
    "6509": {
      "op": "AND"
    },
    "6510": {
      "op": "DUP1"
    },
    "6511": {
      "op": "PUSH2",
      "value": "0x1979"
    },
    "6514": {
      "op": "JUMPI"
    },
    "6515": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "6517": {
      "op": "DUP3"
    },
    "6518": {
      "op": "AND"
    },
    "6519": {
      "op": "SWAP2"
    },
    "6520": {
      "op": "POP"
    },
    "6521": {
      "op": "JUMPDEST"
    },
    "6522": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "6524": {
      "op": "DUP3"
    },
    "6525": {
      "op": "LT"
    },
    "6526": {
      "op": "DUP2"
    },
    "6527": {
      "op": "EQ"
    },
    "6528": {
      "op": "ISZERO"
    },
    "6529": {
      "op": "PUSH2",
      "value": "0x5D5"
    },
    "6532": {
      "op": "JUMPI"
    },
    "6533": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6538": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6540": {
      "op": "SHL"
    },
    "6541": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6543": {
      "op": "MSTORE"
    },
    "6544": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "6546": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6548": {
      "op": "MSTORE"
    },
    "6549": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6553": {
      "op": "REVERT"
    },
    "6554": {
      "op": "JUMPDEST"
    },
    "6555": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6557": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6559": {
      "op": "NOT"
    },
    "6560": {
      "op": "DUP3"
    },
    "6561": {
      "op": "EQ"
    },
    "6562": {
      "op": "ISZERO"
    },
    "6563": {
      "op": "PUSH2",
      "value": "0x19AE"
    },
    "6566": {
      "op": "JUMPI"
    },
    "6567": {
      "op": "PUSH2",
      "value": "0x19AE"
    },
    "6570": {
      "op": "PUSH2",
      "value": "0x19D5"
    },
    "6573": {
      "jump": "i",
      "op": "JUMP"
    },
    "6574": {
      "op": "JUMPDEST"
    },
    "6575": {
      "op": "POP"
    },
    "6576": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6578": {
      "op": "ADD"
    },
    "6579": {
      "op": "SWAP1"
    },
    "6580": {
      "jump": "o",
      "op": "JUMP"
    },
    "6581": {
      "op": "JUMPDEST"
    },
    "6582": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6584": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6586": {
      "op": "DUP3"
    },
    "6587": {
      "op": "AND"
    },
    "6588": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "6590": {
      "op": "DUP2"
    },
    "6591": {
      "op": "EQ"
    },
    "6592": {
      "op": "ISZERO"
    },
    "6593": {
      "op": "PUSH2",
      "value": "0x19CC"
    },
    "6596": {
      "op": "JUMPI"
    },
    "6597": {
      "op": "PUSH2",
      "value": "0x19CC"
    },
    "6600": {
      "op": "PUSH2",
      "value": "0x19D5"
    },
    "6603": {
      "jump": "i",
      "op": "JUMP"
    },
    "6604": {
      "op": "JUMPDEST"
    },
    "6605": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "6607": {
      "op": "ADD"
    },
    "6608": {
      "op": "SWAP3"
    },
    "6609": {
      "op": "SWAP2"
    },
    "6610": {
      "op": "POP"
    },
    "6611": {
      "op": "POP"
    },
    "6612": {
      "jump": "o",
      "op": "JUMP"
    },
    "6613": {
      "op": "JUMPDEST"
    },
    "6614": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6619": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6621": {
      "op": "SHL"
    },
    "6622": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6624": {
      "op": "MSTORE"
    },
    "6625": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "6627": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6629": {
      "op": "MSTORE"
    },
    "6630": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6632": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6634": {
      "op": "REVERT"
    },
    "6635": {
      "op": "JUMPDEST"
    },
    "6636": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6641": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6643": {
      "op": "SHL"
    },
    "6644": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6646": {
      "op": "MSTORE"
    },
    "6647": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "6649": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6651": {
      "op": "MSTORE"
    },
    "6652": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6654": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6656": {
      "op": "REVERT"
    },
    "6657": {
      "op": "JUMPDEST"
    },
    "6658": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6663": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6665": {
      "op": "SHL"
    },
    "6666": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6668": {
      "op": "MSTORE"
    },
    "6669": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "6671": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6673": {
      "op": "MSTORE"
    },
    "6674": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6676": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6678": {
      "op": "REVERT"
    },
    "6679": {
      "op": "JUMPDEST"
    },
    "6680": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "6685": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "6687": {
      "op": "SHL"
    },
    "6688": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6690": {
      "op": "MSTORE"
    },
    "6691": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "6693": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "6695": {
      "op": "MSTORE"
    },
    "6696": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "6698": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "6700": {
      "op": "REVERT"
    }
  },
  "sha1": "2447ee8141be376cf3a073e09205e021a7f28d04",
  "source": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n// SPDX-License-Identifier: MIT\n\nimport \"./OpenZepellin/contracts/utils/math/SafeMath.sol\";\nimport \"./Token.sol\";\n\nimport \"./OpenZepellin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./OpenZepellin/contracts/utils/cryptography/draft-EIP712.sol\";\n\n/**\n    @title Voting Contract\n    @notice Voters Register (receive 1 WKND) token after which, they can particapate in the elections\n\n */\ncontract Voting is EIP712{\n\n    uint256 constant ELECTION_WINNERS_LENGTH = 3;\n    uint256 constant REGISTRATION_AMOUNT = 1;\n\n    using SafeMath for uint256;\n\n    struct Candidate {\n        string name;\n        uint8 age;\n        string cult;\n        uint256 votes;\n    }\n\n    struct Vote {\n        uint256 candidateId;\n        uint256 amount;\n        bool hasVoted;\n    }\n\n    address king;\n\n    Token wakandaToken;\n\n    mapping (address => bool) isRegistered;\n    mapping (address => uint256) nonces;\n    mapping (address => Vote) votes;\n\n    Candidate[] candidates;\n\n    uint256[] electionWinners;\n    event NewChallenger(Candidate challenger);\n\n    bool hasEnded;\n\n    constructor(string memory _electionName, address _wakandaTokenAddress, string[] memory _candidateNames, uint8[] memory _candidateAges, string[] memory _candidateCults) EIP712(_electionName, \"1.0.0\") {\n\n        king = msg.sender;\n\n        _addCandidates(_candidateNames, _candidateAges, _candidateCults);\n\n        wakandaToken = Token(_wakandaTokenAddress);\n\n    }\n\n    /**\n        @notice Ends the election - there is no voting after\n        @return Boolean : True if successful\n     */\n    function endTheElection() public returns (bool) {\n        \n        require(msg.sender == king, \"Only KING can end the election.\");\n\n        hasEnded = true;\n\n        return true;\n\n    }\n\n    /**\n        @notice Registers the _citizen to be able to participate in the elections\n        @param _citizen Citizen's address\n        @return Boolean : True if successful\n     */\n    function register(address _citizen) public returns (bool) {\n        \n        require(isRegistered[_citizen] != true, \"The citizen has been registered - there are no multiple registrations.\");\n\n        wakandaToken.usingRegistrationRight(_citizen, REGISTRATION_AMOUNT);\n        isRegistered[_citizen] = true;\n\n        return true;\n\n    }\n\n    /**\n        @notice Returns the registration status of _citizenAddress\n        @param _citizenAddress Citizen's address\n        @return Boolean : True if citizen is registered\n     */\n    function citizenIsRegistered(address _citizenAddress) public view returns (bool) {\n\n        return isRegistered[_citizenAddress];\n\n    }\n\n    /**\n        @notice Voting function - casts a vote from msg.sender\n        @param _candidateId Candidate ID\n        @param _amount Amount of WKND tokens to be used for voting\n     */\n    function vote(uint256 _candidateId, uint256 _amount) public {\n\n        _vote(msg.sender, _candidateId, _amount);\n\n    }\n\n    /**\n        @notice Returns the voting status of _citizenAddress\n        @param _citizenAddress Citizen's address\n        @return The Vote struct\n     */\n    function citizenHasVoted(address _citizenAddress) public view returns (Vote memory) {\n\n        return votes[_citizenAddress];\n        \n    }\n\n    /**\n        @notice Returns the Election's top 3 candidates (winning candidates)\n        @return An array of top candidates\n     */\n    function winningCandidates() public view returns (Candidate[] memory){\n    \n        Candidate[] memory winners = new Candidate[](electionWinners.length);\n        for (uint8 i = 0; i < electionWinners.length; ++i) winners[i] = candidates[electionWinners[i]];\n        return winners;\n        \n    }\n\n    /**\n        @notice Returns an array of all candidates involved in the election\n        @return Array\n     */\n    function seeAllCandidates() public view returns (Candidate[] memory) {\n\n        return candidates;\n\n    }\n\n    /**\n        @notice Returns a nonce fo the specified citizenAddress\n        @param citizenAddress Citizen's address\n        @return Nonce\n     */\n    function getNonce(address citizenAddress) public view returns (uint256){\n\n        return nonces[citizenAddress];\n        \n    }\n\n    /**\n        @notice Returns a digest that will be used in verification of a signature\n        @param citizenAddress Citizen's address\n        @param candidateId Candidate's ID\n        @param amount Amount of WKND tokens to be used in voting\n        @return Digest\n     */\n    function getDigest(address citizenAddress, uint256 candidateId, uint256 amount) public view returns (bytes32){\n\n        uint256 nonce = nonces[citizenAddress];\n\n        return _hashTypedDataV4(\n            keccak256(\n                abi.encode(    \n                    keccak256(\"vote(address citizenAddress,uint256 candidateId,uint256 amount,uint256 nonce)\"),\n                    citizenAddress,\n                    candidateId,\n                    amount,\n                    nonce\n                )\n            )\n        );\n    }\n    \n    /**\n        @notice Return the signer of a message\n        @param digest Digested message\n        @param signature Singature\n        @return Signer of a message\n     */\n    function getSigner(bytes32 digest, bytes calldata signature) public pure returns (address){\n        return  ECDSA.recover(digest, signature);\n    }\n\n    /**\n        @notice Used for delegating a vote - can be called by anyone having a signature and rest of the information\n        @param citizenAddress Citizen's address\n        @param candidateId Candidate's ID\n        @param amount Amount of WKND tokens to be used in voting\n     */\n    function delegatedVote(bytes calldata signature, address citizenAddress, uint256 candidateId, uint256 amount) public {\n\n        bytes32 digest = getDigest(citizenAddress, candidateId, amount);\n        address signer = getSigner(digest, signature);\n        require(signer == citizenAddress, \"Function `vote` : invalid signature\");\n        require(signer != address(0), \"ECDSA: invalid signature\");\n\n        _vote(citizenAddress, candidateId, amount);\n\n        nonces[citizenAddress]++;\n    }\n    /**\n        @notice When deployed, instantiates the candidate array\n        @param _candidateNames Candidate's Names\n        @param _candidateAges Candidate's Ages\n        @param _candidateCults Candidate's Cults\n     */\n    function _addCandidates(string[] memory _candidateNames, uint8[] memory _candidateAges, string[] memory _candidateCults) internal {\n\n        require(msg.sender == king, \"Only KING can start a new election !\");\n        require(_candidateNames.length == _candidateAges.length, \"Length mismatch - candidate names and ages !\");\n        require(_candidateNames.length == _candidateCults.length, \"Length mismatch - candidate names and ages !\");\n\n        for(uint256 i = 0; i < _candidateNames.length; ++i) {\n            candidates.push(Candidate({name: _candidateNames[i], age: _candidateAges[i], cult: _candidateCults[i], votes: 0}));\n        }\n\n    }\n\n    /**\n        @notice Internal function which handles the voting\n        @param _citizen Citizen's address\n        @param _candidateId Candidate's ID\n        @param _amount Amount of WKND tokens to be used in the voting process\n     */\n    function _vote(address _citizen, uint256 _candidateId, uint256 _amount) internal {\n\n        require(hasEnded != true, \"Voting for the current election has ended .\");\n        require(votes[_citizen].hasVoted != true, \"The citizen already voted in the election .\");\n        require(_amount >= REGISTRATION_AMOUNT, \"The amount is lesser than the REGISTRATION AMOUNT.\");\n        require(_candidateId < candidates.length, \"The candidate ID greater than the number of candidates !\");\n\n        wakandaToken.usingVotingRight(_citizen, _amount);\n\n        candidates[_candidateId].votes = candidates[_candidateId].votes.add(_amount);\n        votes[_citizen].candidateId = _candidateId;\n        votes[_citizen].amount = _amount;\n        votes[_citizen].hasVoted = true;\n\n        if(_isInElectionWinners(_candidateId) == false){ // potentially a new challenger \n         \n            if (candidates[_candidateId].votes > _getLastPlaceVotes() || electionWinners.length < ELECTION_WINNERS_LENGTH) { // entering the first N places\n   \n                _insertIntoElectionWinners(_candidateId);\n                _sortElectionWinners();\n                emit NewChallenger(candidates[_candidateId]);\n\n            } else {\n\n                // do nothing - current candidate didn't enter the first three places\n            }\n            \n        } else { // it is not a new challenger\n        \n            _sortElectionWinners(); // the order can be different now\n\n        }\n    }\n\n    /**\n        @notice Internal function which sorts the electionWinners Array\n     */\n    function _sortElectionWinners() internal {\n\n        if(electionWinners.length == 0) return;\n\n        for(uint8 i = 0; i < electionWinners.length - 1; ++i){\n            for(uint8 j = i+1; j < electionWinners.length; ++j){\n                uint256 currPlaceId = electionWinners[i];\n                uint256 nextPlaceId = electionWinners[j];\n                if(candidates[currPlaceId].votes < candidates[nextPlaceId].votes){\n                    uint256 temp = electionWinners[i];\n                    electionWinners[i] = electionWinners[j];\n                    electionWinners[j] = temp;\n                }\n            }\n        }\n    }\n\n    /**\n        @notice Internal function which returns if the _candidateId is in the electionWinners Array\n        @param _candidateId Candidate's ID to be checked\n        @return Bool : True if found in the electionWinners\n     */\n    function _isInElectionWinners(uint256 _candidateId) internal view returns (bool){\n\n        for(uint8 i = 0; i < electionWinners.length; ++i){\n            if(_candidateId == electionWinners[i]) return true;\n        }\n        return false;\n    }\n\n    /**\n        @notice Internal function which returns the number of votes of the last candidate in the electionWinners\n        @return Votes of candidate that is in last place\n     */\n    function _getLastPlaceVotes() internal view returns (uint256){\n\n        uint256 length = electionWinners.length;\n        return length > 0 ? candidates[electionWinners[length-1]].votes : 0;\n    }\n\n    /**\n        @notice Internal function which inserts a candidate in the electionWinners\n        @param _candidateId ID of the Candidate to be inserted\n     */\n    function _insertIntoElectionWinners(uint256 _candidateId) internal {\n\n        uint256 length = electionWinners.length;\n        if(length < ELECTION_WINNERS_LENGTH){\n             electionWinners.push(_candidateId);\n        } else {\n            electionWinners[ELECTION_WINNERS_LENGTH-1] = _candidateId;\n        }\n    }\n}\n",
  "sourceMap": "447:10352:5:-:0;;;1119:363;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2455:602:2;;;;;;;;;;;-1:-1:-1;;;2455:602:2;;;;;2541:22;;;;;;2778:25;;;;2597;2813:31;;;;2873:13;2854:32;;;;3633:73;;2651:117;3633:73;;;3875:25:6;;;3916:18;;;3909:34;;;;-1:-1:-1;3959:18:6;;;3952:34;;;;4002:18;;;;3995:34;;;;3700:4:2;4045:19:6;;;4038:61;;;3633:73:2;;;;;;;;;;3847:19:6;;;;3633:73:2;;;3623:84;;;;;;;2896:85;;2991:28;;;;;;3029:21;;-1:-1:-1;1329:17:5;;-1:-1:-1;;;;;;1329:17:5::1;1336:10;1329:17;::::0;;1357:64:::1;1372:15:::0;1389:14;1405:15;1357:14:::1;:64::i;:::-;-1:-1:-1::0;;1432:12:5::1;:42:::0;;-1:-1:-1;;;;;;1432:42:5::1;-1:-1:-1::0;;;;;1432:42:5;;;::::1;::::0;;;::::1;::::0;;;-1:-1:-1;447:10352:5;;-1:-1:-1;447:10352:5;6371:646;6534:4;;-1:-1:-1;;;;;6534:4:5;6520:10;:18;6512:67;;;;-1:-1:-1;;;6512:67:5;;4725:2:6;6512:67:5;;;4707:21:6;4764:2;4744:18;;;4737:30;4803:34;4783:18;;;4776:62;-1:-1:-1;;;4854:18:6;;;4847:34;4898:19;;6512:67:5;;;;;;;;;6623:14;:21;6597:15;:22;:47;6589:104;;;;-1:-1:-1;;;6589:104:5;;4312:2:6;6589:104:5;;;4294:21:6;4351:2;4331:18;;;4324:30;-1:-1:-1;;;;;;;;;;;4370:18:6;;;4363:62;-1:-1:-1;;;4441:18:6;;;4434:42;4493:19;;6589:104:5;4284:234:6;6589:104:5;6737:15;:22;6711:15;:22;:48;6703:105;;;;-1:-1:-1;;;6703:105:5;;4312:2:6;6703:105:5;;;4294:21:6;4351:2;4331:18;;;4324:30;-1:-1:-1;;;;;;;;;;;4370:18:6;;;4363:62;-1:-1:-1;;;4441:18:6;;;4434:42;4493:19;;6703:105:5;4284:234:6;6703:105:5;6823:9;6819:191;6842:15;:22;6838:1;:26;6819:191;;;6885:10;6901:97;;;;;;;;6918:15;6934:1;6918:18;;;;;;;;:::i;:::-;;;;;;;6901:97;;;;6943:14;6958:1;6943:17;;;;;;;;:::i;:::-;;;;;;;6901:97;;;;;;6968:15;6984:1;6968:18;;;;;;;;:::i;:::-;;;;;;;;;;;;6901:97;;6995:1;6901:97;;;;;;6885:114;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;6885:114:5;;;;;;;;;;-1:-1:-1;;6885:114:5;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;6866:3;;;;:::i;:::-;;;6819:191;;;;6371:646;;;:::o;447:10352::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;447:10352:5;;;-1:-1:-1;447:10352:5;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:863:6;78:5;131:3;124:4;116:6;112:17;108:27;98:2;;149:1;146;139:12;98:2;178:6;172:13;204:4;228:59;244:42;283:2;244:42;:::i;:::-;228:59;:::i;:::-;309:3;333:2;328:3;321:15;361:2;356:3;352:12;345:19;;396:2;388:6;384:15;448:3;443:2;437;434:1;430:10;422:6;418:23;414:32;411:41;408:2;;;465:1;462;455:12;408:2;487:1;508;518:330;534:2;529:3;526:11;518:330;;;602:10;;-1:-1:-1;;;;;628:35:6;;625:2;;;676:1;673;666:12;625:2;705:68;769:3;764:2;750:11;742:6;738:24;734:33;705:68;:::i;:::-;693:81;;-1:-1:-1;794:12:6;;;;826;;;;556:1;547:11;518:330;;;-1:-1:-1;866:5:6;;88:789;-1:-1:-1;;;;;;;;88:789:6:o;882:793::-;945:5;998:3;991:4;983:6;979:17;975:27;965:2;;1016:1;1013;1006:12;965:2;1045:6;1039:13;1071:4;1095:59;1111:42;1150:2;1111:42;:::i;1095:59::-;1176:3;1200:2;1195:3;1188:15;1228:2;1223:3;1219:12;1212:19;;1263:2;1255:6;1251:15;1315:3;1310:2;1304;1301:1;1297:10;1289:6;1285:23;1281:32;1278:41;1275:2;;;1332:1;1329;1322:12;1275:2;1354:1;1375;1385:261;1401:2;1396:3;1393:11;1385:261;;;1469:3;1463:10;1517:4;1510:5;1506:16;1499:5;1496:27;1486:2;;1537:1;1534;1527:12;1486:2;1554:18;;1592:12;;;;1624;;;;1423:1;1414:11;1385:261;;1680:695;1734:5;1787:3;1780:4;1772:6;1768:17;1764:27;1754:2;;1805:1;1802;1795:12;1754:2;1828:13;;-1:-1:-1;;;;;1853:26:6;;1850:2;;;1882:18;;:::i;:::-;1921:4;1949:53;1992:2;1973:13;;-1:-1:-1;;1969:27:6;1965:36;;1949:53;:::i;:::-;2027:2;2018:7;2011:19;2071:3;2066:2;2061;2053:6;2049:15;2045:24;2042:33;2039:2;;;2088:1;2085;2078:12;2039:2;2110:1;2120:134;2134:2;2131:1;2128:9;2120:134;;;2223:14;;;2219:23;;2213:30;2191:15;;;2187:24;;2180:64;2145:10;;2120:134;;;2272:2;2269:1;2266:9;2263:2;;;2332:1;2327:2;2322;2313:7;2309:16;2305:25;2298:36;2263:2;-1:-1:-1;2362:7:6;1744:631;-1:-1:-1;;;;;1744:631:6:o;2380:1231::-;2589:6;2597;2605;2613;2621;2674:3;2662:9;2653:7;2649:23;2645:33;2642:2;;;2691:1;2688;2681:12;2642:2;2718:16;;-1:-1:-1;;;;;2783:14:6;;;2780:2;;;2810:1;2807;2800:12;2780:2;2833:61;2886:7;2877:6;2866:9;2862:22;2833:61;:::i;:::-;2937:2;2922:18;;2916:25;2823:71;;-1:-1:-1;2916:25:6;-1:-1:-1;;;;;;2970:31:6;;2960:42;;2950:2;;3016:1;3013;3006:12;2950:2;3090;3075:18;;3069:25;3039:5;;-1:-1:-1;3106:16:6;;;3103:2;;;3135:1;3132;3125:12;3103:2;3158:73;3223:7;3212:8;3201:9;3197:24;3158:73;:::i;:::-;3148:83;;3277:2;3266:9;3262:18;3256:25;3240:41;;3306:2;3296:8;3293:16;3290:2;;;3322:1;3319;3312:12;3290:2;3345:72;3409:7;3398:8;3387:9;3383:24;3345:72;:::i;:::-;3335:82;;3463:3;3452:9;3448:19;3442:26;3426:42;;3493:2;3483:8;3480:16;3477:2;;;3509:1;3506;3499:12;3477:2;;3532:73;3597:7;3586:8;3575:9;3571:24;3532:73;:::i;:::-;3522:83;;;2632:979;;;;;;;;:::o;4928:275::-;4999:2;4993:9;5064:2;5045:13;;-1:-1:-1;;5041:27:6;5029:40;;-1:-1:-1;;;;;5084:34:6;;5120:22;;;5081:62;5078:2;;;5146:18;;:::i;:::-;5182:2;5175:22;4973:230;;-1:-1:-1;4973:230:6:o;5208:182::-;5267:4;-1:-1:-1;;;;;5289:30:6;;5286:2;;;5322:18;;:::i;:::-;-1:-1:-1;5367:1:6;5363:14;5379:4;5359:25;;5276:114::o;5395:380::-;5474:1;5470:12;;;;5517;;;5538:2;;5592:4;5584:6;5580:17;5570:27;;5538:2;5645;5637:6;5634:14;5614:18;5611:38;5608:2;;;5691:10;5686:3;5682:20;5679:1;5672:31;5726:4;5723:1;5716:15;5754:4;5751:1;5744:15;5608:2;;5450:325;;;:::o;5780:232::-;5819:3;-1:-1:-1;;5840:17:6;;5837:2;;;5899:10;5894:3;5890:20;5887:1;5880:31;5934:4;5931:1;5924:15;5962:4;5959:1;5952:15;5837:2;-1:-1:-1;6004:1:6;5993:13;;5827:185::o;6017:127::-;6078:10;6073:3;6069:20;6066:1;6059:31;6109:4;6106:1;6099:15;6133:4;6130:1;6123:15;6149:127;6210:10;6205:3;6201:20;6198:1;6191:31;6241:4;6238:1;6231:15;6265:4;6262:1;6255:15;6181:95;447:10352:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/Voting.sol",
  "type": "contract"
}